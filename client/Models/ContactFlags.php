<?php
/**
 * ContactFlags
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * ContactFlags Class Doc Comment
 *
 * @category    Class
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class ContactFlags implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ContactFlags';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent_legal_guardian' => 'string',
        'pickup_rights' => 'string',
        'lives_with' => 'string',
        'address_disclosure' => 'string',
        'email_communication' => 'string',
        'emergency_contact' => 'string',
        'disciplinary_contact' => 'string',
        'home_during_day' => 'string',
        'member_of_armed_forces' => 'string',
        'primary_care_provider' => 'string',
        'requires_interpreter' => 'string',
        'transfer_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent_legal_guardian' => null,
        'pickup_rights' => null,
        'lives_with' => null,
        'address_disclosure' => null,
        'email_communication' => null,
        'emergency_contact' => null,
        'disciplinary_contact' => null,
        'home_during_day' => null,
        'member_of_armed_forces' => null,
        'primary_care_provider' => null,
        'requires_interpreter' => null,
        'transfer_address' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'parent_legal_guardian' => 'ParentLegalGuardian',
        'pickup_rights' => 'PickupRights',
        'lives_with' => 'LivesWith',
        'address_disclosure' => 'AddressDisclosure',
        'email_communication' => 'EmailCommunication',
        'emergency_contact' => 'EmergencyContact',
        'disciplinary_contact' => 'DisciplinaryContact',
        'home_during_day' => 'HomeDuringDay',
        'member_of_armed_forces' => 'MemberOfArmedForces',
        'primary_care_provider' => 'PrimaryCareProvider',
        'requires_interpreter' => 'RequiresInterpreter',
        'transfer_address' => 'TransferAddress'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'parent_legal_guardian' => 'setParentLegalGuardian',
        'pickup_rights' => 'setPickupRights',
        'lives_with' => 'setLivesWith',
        'address_disclosure' => 'setAddressDisclosure',
        'email_communication' => 'setEmailCommunication',
        'emergency_contact' => 'setEmergencyContact',
        'disciplinary_contact' => 'setDisciplinaryContact',
        'home_during_day' => 'setHomeDuringDay',
        'member_of_armed_forces' => 'setMemberOfArmedForces',
        'primary_care_provider' => 'setPrimaryCareProvider',
        'requires_interpreter' => 'setRequiresInterpreter',
        'transfer_address' => 'setTransferAddress'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'parent_legal_guardian' => 'getParentLegalGuardian',
        'pickup_rights' => 'getPickupRights',
        'lives_with' => 'getLivesWith',
        'address_disclosure' => 'getAddressDisclosure',
        'email_communication' => 'getEmailCommunication',
        'emergency_contact' => 'getEmergencyContact',
        'disciplinary_contact' => 'getDisciplinaryContact',
        'home_during_day' => 'getHomeDuringDay',
        'member_of_armed_forces' => 'getMemberOfArmedForces',
        'primary_care_provider' => 'getPrimaryCareProvider',
        'requires_interpreter' => 'getRequiresInterpreter',
        'transfer_address' => 'getTransferAddress'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent_legal_guardian'] = isset($data['parent_legal_guardian']) ? $data['parent_legal_guardian'] : null;
        $this->container['pickup_rights'] = isset($data['pickup_rights']) ? $data['pickup_rights'] : null;
        $this->container['lives_with'] = isset($data['lives_with']) ? $data['lives_with'] : null;
        $this->container['address_disclosure'] = isset($data['address_disclosure']) ? $data['address_disclosure'] : null;
        $this->container['email_communication'] = isset($data['email_communication']) ? $data['email_communication'] : null;
        $this->container['emergency_contact'] = isset($data['emergency_contact']) ? $data['emergency_contact'] : null;
        $this->container['disciplinary_contact'] = isset($data['disciplinary_contact']) ? $data['disciplinary_contact'] : null;
        $this->container['home_during_day'] = isset($data['home_during_day']) ? $data['home_during_day'] : null;
        $this->container['member_of_armed_forces'] = isset($data['member_of_armed_forces']) ? $data['member_of_armed_forces'] : null;
        $this->container['primary_care_provider'] = isset($data['primary_care_provider']) ? $data['primary_care_provider'] : null;
        $this->container['requires_interpreter'] = isset($data['requires_interpreter']) ? $data['requires_interpreter'] : null;
        $this->container['transfer_address'] = isset($data['transfer_address']) ? $data['transfer_address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets parent_legal_guardian
     * @return string
     */
    public function getParentLegalGuardian()
    {
        return isset($this->container['parent_legal_guardian']) ? $this->container['parent_legal_guardian'] : null;
    }

    /**
     * Sets parent_legal_guardian
     * @param string $parent_legal_guardian Does the individual have parental or legal guardianship responsibility for the learner?
     * @return $this
     */
    public function setParentLegalGuardian($parent_legal_guardian)
    {
        $this->container['parent_legal_guardian'] = $parent_legal_guardian;

        return $this;
    }

    /**
     * Gets pickup_rights
     * @return string
     */
    public function getPickupRights()
    {
        return isset($this->container['pickup_rights']) ? $this->container['pickup_rights'] : null;
    }

    /**
     * Sets pickup_rights
     * @param string $pickup_rights Does the contact have pickup rights?
     * @return $this
     */
    public function setPickupRights($pickup_rights)
    {
        $this->container['pickup_rights'] = $pickup_rights;

        return $this;
    }

    /**
     * Gets lives_with
     * @return string
     */
    public function getLivesWith()
    {
        return isset($this->container['lives_with']) ? $this->container['lives_with'] : null;
    }

    /**
     * Sets lives_with
     * @param string $lives_with Does the learner live with this contact?
     * @return $this
     */
    public function setLivesWith($lives_with)
    {
        $this->container['lives_with'] = $lives_with;

        return $this;
    }

    /**
     * Gets address_disclosure
     * @return string
     */
    public function getAddressDisclosure()
    {
        return isset($this->container['address_disclosure']) ? $this->container['address_disclosure'] : null;
    }

    /**
     * Sets address_disclosure
     * @param string $address_disclosure Can address information be disclosed?
     * @return $this
     */
    public function setAddressDisclosure($address_disclosure)
    {
        $this->container['address_disclosure'] = $address_disclosure;

        return $this;
    }

    /**
     * Gets email_communication
     * @return string
     */
    public function getEmailCommunication()
    {
        return isset($this->container['email_communication']) ? $this->container['email_communication'] : null;
    }

    /**
     * Sets email_communication
     * @param string $email_communication Does the contact prefer written communcation via email? Otherwise, postal mail will be used.
     * @return $this
     */
    public function setEmailCommunication($email_communication)
    {
        $this->container['email_communication'] = $email_communication;

        return $this;
    }

    /**
     * Gets emergency_contact
     * @return string
     */
    public function getEmergencyContact()
    {
        return isset($this->container['emergency_contact']) ? $this->container['emergency_contact'] : null;
    }

    /**
     * Sets emergency_contact
     * @param string $emergency_contact Should this contact be notified in case of emergency?
     * @return $this
     */
    public function setEmergencyContact($emergency_contact)
    {
        $this->container['emergency_contact'] = $emergency_contact;

        return $this;
    }

    /**
     * Gets disciplinary_contact
     * @return string
     */
    public function getDisciplinaryContact()
    {
        return isset($this->container['disciplinary_contact']) ? $this->container['disciplinary_contact'] : null;
    }

    /**
     * Sets disciplinary_contact
     * @param string $disciplinary_contact Is this person to be contacted in case of disciplinary action?
     * @return $this
     */
    public function setDisciplinaryContact($disciplinary_contact)
    {
        $this->container['disciplinary_contact'] = $disciplinary_contact;

        return $this;
    }

    /**
     * Gets home_during_day
     * @return string
     */
    public function getHomeDuringDay()
    {
        return isset($this->container['home_during_day']) ? $this->container['home_during_day'] : null;
    }

    /**
     * Sets home_during_day
     * @param string $home_during_day Is the contact at home during normal daytime hours?
     * @return $this
     */
    public function setHomeDuringDay($home_during_day)
    {
        $this->container['home_during_day'] = $home_during_day;

        return $this;
    }

    /**
     * Gets member_of_armed_forces
     * @return string
     */
    public function getMemberOfArmedForces()
    {
        return isset($this->container['member_of_armed_forces']) ? $this->container['member_of_armed_forces'] : null;
    }

    /**
     * Sets member_of_armed_forces
     * @param string $member_of_armed_forces Is this person a member of the armed forces?
     * @return $this
     */
    public function setMemberOfArmedForces($member_of_armed_forces)
    {
        $this->container['member_of_armed_forces'] = $member_of_armed_forces;

        return $this;
    }

    /**
     * Gets primary_care_provider
     * @return string
     */
    public function getPrimaryCareProvider()
    {
        return isset($this->container['primary_care_provider']) ? $this->container['primary_care_provider'] : null;
    }

    /**
     * Sets primary_care_provider
     * @param string $primary_care_provider Does this person provide daily living or personal assistance to the learner?
     * @return $this
     */
    public function setPrimaryCareProvider($primary_care_provider)
    {
        $this->container['primary_care_provider'] = $primary_care_provider;

        return $this;
    }

    /**
     * Gets requires_interpreter
     * @return string
     */
    public function getRequiresInterpreter()
    {
        return isset($this->container['requires_interpreter']) ? $this->container['requires_interpreter'] : null;
    }

    /**
     * Sets requires_interpreter
     * @param string $requires_interpreter Does the contact need a translator or interpreter?
     * @return $this
     */
    public function setRequiresInterpreter($requires_interpreter)
    {
        $this->container['requires_interpreter'] = $requires_interpreter;

        return $this;
    }

    /**
     * Gets transfer_address
     * @return string
     */
    public function getTransferAddress()
    {
        return isset($this->container['transfer_address']) ? $this->container['transfer_address'] : null;
    }

    /**
     * Sets transfer_address
     * @param string $transfer_address Should this contact be transferred with the Learner if and when the Learner moves?
     * @return $this
     */
    public function setTransferAddress($transfer_address)
    {
        $this->container['transfer_address'] = $transfer_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


