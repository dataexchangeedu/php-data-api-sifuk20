<?php
/**
 * LearnerSchoolEnrolment
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LearnerSchoolEnrolment Class Doc Comment
 *
 * @category    Class
 * @description This object defines information related to a learner&amp;#039;s enrolment within a particular school or establishment.The current status on an enrolment is based on EntryDate and ExitDate. Future enrolments are supported where EntryDate is in the future. ExitDate may also be specified as a future occurance.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class LearnerSchoolEnrolment implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnerSchoolEnrolment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'learner_personal_ref_id' => 'string',
        'school_info_ref_id' => 'string',
        'membership_type' => 'string',
        'entry_date' => '\DateTime',
        'nc_year_group_actual' => 'string',
        'class_type' => 'string',
        'exit_date' => '\DateTime',
        'exit_type' => '\DataExchange\SIFUK20\Models\ExitType',
        'sessions' => 'int',
        'ftpt_status' => 'string',
        'boarder' => 'string',
        'alternative_tuition' => '\DataExchange\SIFUK20\Models\AlternativeTuition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'learner_personal_ref_id' => null,
        'school_info_ref_id' => null,
        'membership_type' => null,
        'entry_date' => 'date',
        'nc_year_group_actual' => null,
        'class_type' => null,
        'exit_date' => 'date',
        'exit_type' => null,
        'sessions' => 'int64',
        'ftpt_status' => null,
        'boarder' => null,
        'alternative_tuition' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'learner_personal_ref_id' => '@LearnerPersonalRefId',
        'school_info_ref_id' => '@SchoolInfoRefId',
        'membership_type' => '@MembershipType',
        'entry_date' => 'EntryDate',
        'nc_year_group_actual' => 'NCYearGroupActual',
        'class_type' => 'ClassType',
        'exit_date' => 'ExitDate',
        'exit_type' => 'ExitType',
        'sessions' => 'Sessions',
        'ftpt_status' => 'FTPTStatus',
        'boarder' => 'Boarder',
        'alternative_tuition' => 'AlternativeTuition'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'learner_personal_ref_id' => 'setLearnerPersonalRefId',
        'school_info_ref_id' => 'setSchoolInfoRefId',
        'membership_type' => 'setMembershipType',
        'entry_date' => 'setEntryDate',
        'nc_year_group_actual' => 'setNcYearGroupActual',
        'class_type' => 'setClassType',
        'exit_date' => 'setExitDate',
        'exit_type' => 'setExitType',
        'sessions' => 'setSessions',
        'ftpt_status' => 'setFtptStatus',
        'boarder' => 'setBoarder',
        'alternative_tuition' => 'setAlternativeTuition'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'learner_personal_ref_id' => 'getLearnerPersonalRefId',
        'school_info_ref_id' => 'getSchoolInfoRefId',
        'membership_type' => 'getMembershipType',
        'entry_date' => 'getEntryDate',
        'nc_year_group_actual' => 'getNcYearGroupActual',
        'class_type' => 'getClassType',
        'exit_date' => 'getExitDate',
        'exit_type' => 'getExitType',
        'sessions' => 'getSessions',
        'ftpt_status' => 'getFtptStatus',
        'boarder' => 'getBoarder',
        'alternative_tuition' => 'getAlternativeTuition'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['learner_personal_ref_id'] = isset($data['learner_personal_ref_id']) ? $data['learner_personal_ref_id'] : null;
        $this->container['school_info_ref_id'] = isset($data['school_info_ref_id']) ? $data['school_info_ref_id'] : null;
        $this->container['membership_type'] = isset($data['membership_type']) ? $data['membership_type'] : null;
        $this->container['entry_date'] = isset($data['entry_date']) ? $data['entry_date'] : null;
        $this->container['nc_year_group_actual'] = isset($data['nc_year_group_actual']) ? $data['nc_year_group_actual'] : null;
        $this->container['class_type'] = isset($data['class_type']) ? $data['class_type'] : null;
        $this->container['exit_date'] = isset($data['exit_date']) ? $data['exit_date'] : null;
        $this->container['exit_type'] = isset($data['exit_type']) ? $data['exit_type'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['ftpt_status'] = isset($data['ftpt_status']) ? $data['ftpt_status'] : null;
        $this->container['boarder'] = isset($data['boarder']) ? $data['boarder'] : null;
        $this->container['alternative_tuition'] = isset($data['alternative_tuition']) ? $data['alternative_tuition'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            $invalid_properties[] = "'learner_personal_ref_id' can't be null";
        }
        if ($this->container['school_info_ref_id'] === null) {
            $invalid_properties[] = "'school_info_ref_id' can't be null";
        }
        if ($this->container['membership_type'] === null) {
            $invalid_properties[] = "'membership_type' can't be null";
        }
        if ($this->container['entry_date'] === null) {
            $invalid_properties[] = "'entry_date' can't be null";
        }
        if ($this->container['nc_year_group_actual'] === null) {
            $invalid_properties[] = "'nc_year_group_actual' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_info_ref_id'] === null) {
            return false;
        }
        if ($this->container['membership_type'] === null) {
            return false;
        }
        if ($this->container['entry_date'] === null) {
            return false;
        }
        if ($this->container['nc_year_group_actual'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) that uniquely identifies a particular enrolment.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets learner_personal_ref_id
     * @return string
     */
    public function getLearnerPersonalRefId()
    {
        return isset($this->container['learner_personal_ref_id']) ? $this->container['learner_personal_ref_id'] : null;
    }

    /**
     * Sets learner_personal_ref_id
     * @param string $learner_personal_ref_id The ID (GUID) of the learner to whom this information is linked.
     * @return $this
     */
    public function setLearnerPersonalRefId($learner_personal_ref_id)
    {
        $this->container['learner_personal_ref_id'] = $learner_personal_ref_id;

        return $this;
    }

    /**
     * Gets school_info_ref_id
     * @return string
     */
    public function getSchoolInfoRefId()
    {
        return isset($this->container['school_info_ref_id']) ? $this->container['school_info_ref_id'] : null;
    }

    /**
     * Sets school_info_ref_id
     * @param string $school_info_ref_id The ID (GUID) of the school to which this enrolment applies.
     * @return $this
     */
    public function setSchoolInfoRefId($school_info_ref_id)
    {
        $this->container['school_info_ref_id'] = $school_info_ref_id;

        return $this;
    }

    /**
     * Gets membership_type
     * @return string
     */
    public function getMembershipType()
    {
        return isset($this->container['membership_type']) ? $this->container['membership_type'] : null;
    }

    /**
     * Sets membership_type
     * @param string $membership_type The type of this enrolment as it relates to the school identified by SchoolInfoRefId.
     * @return $this
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }

    /**
     * Gets entry_date
     * @return \DateTime
     */
    public function getEntryDate()
    {
        return isset($this->container['entry_date']) ? $this->container['entry_date'] : null;
    }

    /**
     * Sets entry_date
     * @param \DateTime $entry_date The date from when this enrolment is valid.
     * @return $this
     */
    public function setEntryDate($entry_date)
    {
        $this->container['entry_date'] = $entry_date;

        return $this;
    }

    /**
     * Gets nc_year_group_actual
     * @return string
     */
    public function getNcYearGroupActual()
    {
        return isset($this->container['nc_year_group_actual']) ? $this->container['nc_year_group_actual'] : null;
    }

    /**
     * Sets nc_year_group_actual
     * @param string $nc_year_group_actual The year group in which the learner is taught for the majority of their time, regardless of their chronological age.
     * @return $this
     */
    public function setNcYearGroupActual($nc_year_group_actual)
    {
        $this->container['nc_year_group_actual'] = $nc_year_group_actual;

        return $this;
    }

    /**
     * Gets class_type
     * @return string
     */
    public function getClassType()
    {
        return isset($this->container['class_type']) ? $this->container['class_type'] : null;
    }

    /**
     * Sets class_type
     * @param string $class_type Indicates if the learner is in a nursery class. Must be set to &#039;O&#039; if age on August 31 is &gt;= 6.
     * @return $this
     */
    public function setClassType($class_type)
    {
        $this->container['class_type'] = $class_type;

        return $this;
    }

    /**
     * Gets exit_date
     * @return \DateTime
     */
    public function getExitDate()
    {
        return isset($this->container['exit_date']) ? $this->container['exit_date'] : null;
    }

    /**
     * Sets exit_date
     * @param \DateTime $exit_date The ending date of this enrolment. If the learner has exited before the end of the school year, ExitDate must have a value.
     * @return $this
     */
    public function setExitDate($exit_date)
    {
        $this->container['exit_date'] = $exit_date;

        return $this;
    }

    /**
     * Gets exit_type
     * @return \DataExchange\SIFUK20\Models\ExitType
     */
    public function getExitType()
    {
        return isset($this->container['exit_type']) ? $this->container['exit_type'] : null;
    }

    /**
     * Sets exit_type
     * @param \DataExchange\SIFUK20\Models\ExitType $exit_type
     * @return $this
     */
    public function setExitType($exit_type)
    {
        $this->container['exit_type'] = $exit_type;

        return $this;
    }

    /**
     * Gets sessions
     * @return int
     */
    public function getSessions()
    {
        return isset($this->container['sessions']) ? $this->container['sessions'] : null;
    }

    /**
     * Sets sessions
     * @param int $sessions
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets ftpt_status
     * @return string
     */
    public function getFtptStatus()
    {
        return isset($this->container['ftpt_status']) ? $this->container['ftpt_status'] : null;
    }

    /**
     * Sets ftpt_status
     * @param string $ftpt_status An indication of whether the learner is enroled only part time.
     * @return $this
     */
    public function setFtptStatus($ftpt_status)
    {
        $this->container['ftpt_status'] = $ftpt_status;

        return $this;
    }

    /**
     * Gets boarder
     * @return string
     */
    public function getBoarder()
    {
        return isset($this->container['boarder']) ? $this->container['boarder'] : null;
    }

    /**
     * Sets boarder
     * @param string $boarder Indicates whether the learner is a boarder at the school or not.
     * @return $this
     */
    public function setBoarder($boarder)
    {
        $this->container['boarder'] = $boarder;

        return $this;
    }

    /**
     * Gets alternative_tuition
     * @return \DataExchange\SIFUK20\Models\AlternativeTuition
     */
    public function getAlternativeTuition()
    {
        return isset($this->container['alternative_tuition']) ? $this->container['alternative_tuition'] : null;
    }

    /**
     * Sets alternative_tuition
     * @param \DataExchange\SIFUK20\Models\AlternativeTuition $alternative_tuition
     * @return $this
     */
    public function setAlternativeTuition($alternative_tuition)
    {
        $this->container['alternative_tuition'] = $alternative_tuition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


