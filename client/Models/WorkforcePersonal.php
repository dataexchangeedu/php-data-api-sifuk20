<?php
/**
 * WorkforcePersonal
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * WorkforcePersonal Class Doc Comment
 *
 * @category    Class
 * @description This object contains key personal information relating to a workforce member, who might be a teacher or other employee of the school or LA. Compare with US/Canada objects:
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class WorkforcePersonal implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WorkforcePersonal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'local_id' => 'string',
        'alert_msg_list' => '\DataExchange\SIFUK20\Models\AlertMsg[]',
        'medical_alert_msg_list' => '\DataExchange\SIFUK20\Models\MedicalAlertMsg[]',
        'personal_information' => '\DataExchange\SIFUK20\Models\PersonalInformation',
        'teacher_number' => 'string',
        'ni_number' => 'string',
        'external_workforce_identifier_list' => '\DataExchange\SIFUK20\Models\ExternalLearnerIdentifier[]',
        'current_assignment_list' => '\DataExchange\SIFUK20\Models\CurrentAssignment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'local_id' => null,
        'alert_msg_list' => null,
        'medical_alert_msg_list' => null,
        'personal_information' => null,
        'teacher_number' => null,
        'ni_number' => null,
        'external_workforce_identifier_list' => null,
        'current_assignment_list' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'local_id' => 'LocalId',
        'alert_msg_list' => 'AlertMsgList',
        'medical_alert_msg_list' => 'MedicalAlertMsgList',
        'personal_information' => 'PersonalInformation',
        'teacher_number' => 'TeacherNumber',
        'ni_number' => 'NINumber',
        'external_workforce_identifier_list' => 'ExternalWorkforceIdentifierList',
        'current_assignment_list' => 'CurrentAssignmentList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'local_id' => 'setLocalId',
        'alert_msg_list' => 'setAlertMsgList',
        'medical_alert_msg_list' => 'setMedicalAlertMsgList',
        'personal_information' => 'setPersonalInformation',
        'teacher_number' => 'setTeacherNumber',
        'ni_number' => 'setNiNumber',
        'external_workforce_identifier_list' => 'setExternalWorkforceIdentifierList',
        'current_assignment_list' => 'setCurrentAssignmentList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'local_id' => 'getLocalId',
        'alert_msg_list' => 'getAlertMsgList',
        'medical_alert_msg_list' => 'getMedicalAlertMsgList',
        'personal_information' => 'getPersonalInformation',
        'teacher_number' => 'getTeacherNumber',
        'ni_number' => 'getNiNumber',
        'external_workforce_identifier_list' => 'getExternalWorkforceIdentifierList',
        'current_assignment_list' => 'getCurrentAssignmentList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['local_id'] = isset($data['local_id']) ? $data['local_id'] : null;
        $this->container['alert_msg_list'] = isset($data['alert_msg_list']) ? $data['alert_msg_list'] : null;
        $this->container['medical_alert_msg_list'] = isset($data['medical_alert_msg_list']) ? $data['medical_alert_msg_list'] : null;
        $this->container['personal_information'] = isset($data['personal_information']) ? $data['personal_information'] : null;
        $this->container['teacher_number'] = isset($data['teacher_number']) ? $data['teacher_number'] : null;
        $this->container['ni_number'] = isset($data['ni_number']) ? $data['ni_number'] : null;
        $this->container['external_workforce_identifier_list'] = isset($data['external_workforce_identifier_list']) ? $data['external_workforce_identifier_list'] : null;
        $this->container['current_assignment_list'] = isset($data['current_assignment_list']) ? $data['current_assignment_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['local_id'] === null) {
            $invalid_properties[] = "'local_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['local_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) of the workforce member. Note that the same GUID may be assigned to this person when they are also a learner (via LearnerPersonal) and/or a contact (via ContactPersonal).
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets local_id
     * @return string
     */
    public function getLocalId()
    {
        return isset($this->container['local_id']) ? $this->container['local_id'] : null;
    }

    /**
     * Sets local_id
     * @param string $local_id
     * @return $this
     */
    public function setLocalId($local_id)
    {
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets alert_msg_list
     * @return \DataExchange\SIFUK20\Models\AlertMsg[]
     */
    public function getAlertMsgList()
    {
        return isset($this->container['alert_msg_list']) ? $this->container['alert_msg_list'] : null;
    }

    /**
     * Sets alert_msg_list
     * @param \DataExchange\SIFUK20\Models\AlertMsg[] $alert_msg_list
     * @return $this
     */
    public function setAlertMsgList($alert_msg_list)
    {
        $this->container['alert_msg_list'] = $alert_msg_list;

        return $this;
    }

    /**
     * Gets medical_alert_msg_list
     * @return \DataExchange\SIFUK20\Models\MedicalAlertMsg[]
     */
    public function getMedicalAlertMsgList()
    {
        return isset($this->container['medical_alert_msg_list']) ? $this->container['medical_alert_msg_list'] : null;
    }

    /**
     * Sets medical_alert_msg_list
     * @param \DataExchange\SIFUK20\Models\MedicalAlertMsg[] $medical_alert_msg_list
     * @return $this
     */
    public function setMedicalAlertMsgList($medical_alert_msg_list)
    {
        $this->container['medical_alert_msg_list'] = $medical_alert_msg_list;

        return $this;
    }

    /**
     * Gets personal_information
     * @return \DataExchange\SIFUK20\Models\PersonalInformation
     */
    public function getPersonalInformation()
    {
        return isset($this->container['personal_information']) ? $this->container['personal_information'] : null;
    }

    /**
     * Sets personal_information
     * @param \DataExchange\SIFUK20\Models\PersonalInformation $personal_information
     * @return $this
     */
    public function setPersonalInformation($personal_information)
    {
        $this->container['personal_information'] = $personal_information;

        return $this;
    }

    /**
     * Gets teacher_number
     * @return string
     */
    public function getTeacherNumber()
    {
        return isset($this->container['teacher_number']) ? $this->container['teacher_number'] : null;
    }

    /**
     * Sets teacher_number
     * @param string $teacher_number The DfES Teacher Reference number. For those who have one this is a unique number.
     * @return $this
     */
    public function setTeacherNumber($teacher_number)
    {
        $this->container['teacher_number'] = $teacher_number;

        return $this;
    }

    /**
     * Gets ni_number
     * @return string
     */
    public function getNiNumber()
    {
        return isset($this->container['ni_number']) ? $this->container['ni_number'] : null;
    }

    /**
     * Sets ni_number
     * @param string $ni_number
     * @return $this
     */
    public function setNiNumber($ni_number)
    {
        $this->container['ni_number'] = $ni_number;

        return $this;
    }

    /**
     * Gets external_workforce_identifier_list
     * @return \DataExchange\SIFUK20\Models\ExternalLearnerIdentifier[]
     */
    public function getExternalWorkforceIdentifierList()
    {
        return isset($this->container['external_workforce_identifier_list']) ? $this->container['external_workforce_identifier_list'] : null;
    }

    /**
     * Sets external_workforce_identifier_list
     * @param \DataExchange\SIFUK20\Models\ExternalLearnerIdentifier[] $external_workforce_identifier_list
     * @return $this
     */
    public function setExternalWorkforceIdentifierList($external_workforce_identifier_list)
    {
        $this->container['external_workforce_identifier_list'] = $external_workforce_identifier_list;

        return $this;
    }

    /**
     * Gets current_assignment_list
     * @return \DataExchange\SIFUK20\Models\CurrentAssignment[]
     */
    public function getCurrentAssignmentList()
    {
        return isset($this->container['current_assignment_list']) ? $this->container['current_assignment_list'] : null;
    }

    /**
     * Sets current_assignment_list
     * @param \DataExchange\SIFUK20\Models\CurrentAssignment[] $current_assignment_list
     * @return $this
     */
    public function setCurrentAssignmentList($current_assignment_list)
    {
        $this->container['current_assignment_list'] = $current_assignment_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


