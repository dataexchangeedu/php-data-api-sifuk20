<?php
/**
 * TermInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * TermInfo Class Doc Comment
 *
 * @category    Class */
 // @description This object provides information about a term; i.e., a reportable period of time. Compare with US/Canada object:
/**
 * @package     DataExchange\SIFUK20
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TermInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TermInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'school_info_ref_id' => 'string',
        'school_year' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'description' => 'string',
        'term_code' => 'string',
        'terms_per_year' => 'int',
        'marking_term' => 'string',
        'scheduling_term' => 'string',
        'attendance_term' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'school_info_ref_id' => '@SchoolInfoRefId',
        'school_year' => 'SchoolYear',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'description' => 'Description',
        'term_code' => 'TermCode',
        'terms_per_year' => 'TermsPerYear',
        'marking_term' => 'MarkingTerm',
        'scheduling_term' => 'SchedulingTerm',
        'attendance_term' => 'AttendanceTerm'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'school_info_ref_id' => 'setSchoolInfoRefId',
        'school_year' => 'setSchoolYear',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'description' => 'setDescription',
        'term_code' => 'setTermCode',
        'terms_per_year' => 'setTermsPerYear',
        'marking_term' => 'setMarkingTerm',
        'scheduling_term' => 'setSchedulingTerm',
        'attendance_term' => 'setAttendanceTerm'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'school_info_ref_id' => 'getSchoolInfoRefId',
        'school_year' => 'getSchoolYear',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'description' => 'getDescription',
        'term_code' => 'getTermCode',
        'terms_per_year' => 'getTermsPerYear',
        'marking_term' => 'getMarkingTerm',
        'scheduling_term' => 'getSchedulingTerm',
        'attendance_term' => 'getAttendanceTerm'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['school_info_ref_id'] = isset($data['school_info_ref_id']) ? $data['school_info_ref_id'] : null;
        $this->container['school_year'] = isset($data['school_year']) ? $data['school_year'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['term_code'] = isset($data['term_code']) ? $data['term_code'] : null;
        $this->container['terms_per_year'] = isset($data['terms_per_year']) ? $data['terms_per_year'] : null;
        $this->container['marking_term'] = isset($data['marking_term']) ? $data['marking_term'] : null;
        $this->container['scheduling_term'] = isset($data['scheduling_term']) ? $data['scheduling_term'] : null;
        $this->container['attendance_term'] = isset($data['attendance_term']) ? $data['attendance_term'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['school_info_ref_id'] === null) {
            $invalid_properties[] = "'school_info_ref_id' can't be null";
        }
        if ($this->container['school_year'] === null) {
            $invalid_properties[] = "'school_year' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['school_info_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_year'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) that uniquely identifies this TermInfo entity.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets school_info_ref_id
     * @return string
     */
    public function getSchoolInfoRefId()
    {
        return $this->container['school_info_ref_id'];
    }

    /**
     * Sets school_info_ref_id
     * @param string $school_info_ref_id The ID (GUID) that identifies the school where the term is used.
     * @return $this
     */
    public function setSchoolInfoRefId($school_info_ref_id)
    {
        $this->container['school_info_ref_id'] = $school_info_ref_id;

        return $this;
    }

    /**
     * Gets school_year
     * @return string
     */
    public function getSchoolYear()
    {
        return $this->container['school_year'];
    }

    /**
     * Sets school_year
     * @param string $school_year
     * @return $this
     */
    public function setSchoolYear($school_year)
    {
        $this->container['school_year'] = $school_year;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Starting date of the term.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Ending date of the term.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Text-based description of the term.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets term_code
     * @return string
     */
    public function getTermCode()
    {
        return $this->container['term_code'];
    }

    /**
     * Sets term_code
     * @param string $term_code Locally-defined code. Use &#039;AUT&#039;, &#039;SPR&#039;, or &#039;SUM&#039; for a 3 term year. Otherwise specify the term number within the year.
     * @return $this
     */
    public function setTermCode($term_code)
    {
        $this->container['term_code'] = $term_code;

        return $this;
    }

    /**
     * Gets terms_per_year
     * @return int
     */
    public function getTermsPerYear()
    {
        return $this->container['terms_per_year'];
    }

    /**
     * Sets terms_per_year
     * @param int $terms_per_year
     * @return $this
     */
    public function setTermsPerYear($terms_per_year)
    {
        $this->container['terms_per_year'] = $terms_per_year;

        return $this;
    }

    /**
     * Gets marking_term
     * @return string
     */
    public function getMarkingTerm()
    {
        return $this->container['marking_term'];
    }

    /**
     * Sets marking_term
     * @param string $marking_term Does this TermInfo represent a marking period?
     * @return $this
     */
    public function setMarkingTerm($marking_term)
    {
        $this->container['marking_term'] = $marking_term;

        return $this;
    }

    /**
     * Gets scheduling_term
     * @return string
     */
    public function getSchedulingTerm()
    {
        return $this->container['scheduling_term'];
    }

    /**
     * Sets scheduling_term
     * @param string $scheduling_term Does this TermInfo represent a scheduling term?
     * @return $this
     */
    public function setSchedulingTerm($scheduling_term)
    {
        $this->container['scheduling_term'] = $scheduling_term;

        return $this;
    }

    /**
     * Gets attendance_term
     * @return string
     */
    public function getAttendanceTerm()
    {
        return $this->container['attendance_term'];
    }

    /**
     * Sets attendance_term
     * @param string $attendance_term Does this TermInfo represent an attendance term?
     * @return $this
     */
    public function setAttendanceTerm($attendance_term)
    {
        $this->container['attendance_term'] = $attendance_term;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }
}
