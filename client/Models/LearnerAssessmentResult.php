<?php
/**
 * LearnerAssessmentResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LearnerAssessmentResult Class Doc Comment
 *
 * @category    Class
 * @description A single result for a learner.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class LearnerAssessmentResult implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnerAssessmentResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'assessment_component_ref_id' => 'string',
        'learner_personal_ref_id' => 'string',
        'school_info_ref_id' => 'string',
        'achievement_date' => '\DateTime',
        'result' => 'string',
        'result_status' => 'string',
        'assessment_session_list' => 'string[]',
        'workforce_personal_ref_id' => 'string',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'assessment_component_ref_id' => null,
        'learner_personal_ref_id' => null,
        'school_info_ref_id' => null,
        'achievement_date' => 'date',
        'result' => null,
        'result_status' => null,
        'assessment_session_list' => null,
        'workforce_personal_ref_id' => null,
        'note' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'assessment_component_ref_id' => '@AssessmentComponentRefId',
        'learner_personal_ref_id' => '@LearnerPersonalRefId',
        'school_info_ref_id' => 'SchoolInfoRefId',
        'achievement_date' => 'AchievementDate',
        'result' => 'Result',
        'result_status' => 'ResultStatus',
        'assessment_session_list' => 'AssessmentSessionList',
        'workforce_personal_ref_id' => 'WorkforcePersonalRefId',
        'note' => 'Note'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'assessment_component_ref_id' => 'setAssessmentComponentRefId',
        'learner_personal_ref_id' => 'setLearnerPersonalRefId',
        'school_info_ref_id' => 'setSchoolInfoRefId',
        'achievement_date' => 'setAchievementDate',
        'result' => 'setResult',
        'result_status' => 'setResultStatus',
        'assessment_session_list' => 'setAssessmentSessionList',
        'workforce_personal_ref_id' => 'setWorkforcePersonalRefId',
        'note' => 'setNote'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'assessment_component_ref_id' => 'getAssessmentComponentRefId',
        'learner_personal_ref_id' => 'getLearnerPersonalRefId',
        'school_info_ref_id' => 'getSchoolInfoRefId',
        'achievement_date' => 'getAchievementDate',
        'result' => 'getResult',
        'result_status' => 'getResultStatus',
        'assessment_session_list' => 'getAssessmentSessionList',
        'workforce_personal_ref_id' => 'getWorkforcePersonalRefId',
        'note' => 'getNote'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['assessment_component_ref_id'] = isset($data['assessment_component_ref_id']) ? $data['assessment_component_ref_id'] : null;
        $this->container['learner_personal_ref_id'] = isset($data['learner_personal_ref_id']) ? $data['learner_personal_ref_id'] : null;
        $this->container['school_info_ref_id'] = isset($data['school_info_ref_id']) ? $data['school_info_ref_id'] : null;
        $this->container['achievement_date'] = isset($data['achievement_date']) ? $data['achievement_date'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['result_status'] = isset($data['result_status']) ? $data['result_status'] : null;
        $this->container['assessment_session_list'] = isset($data['assessment_session_list']) ? $data['assessment_session_list'] : null;
        $this->container['workforce_personal_ref_id'] = isset($data['workforce_personal_ref_id']) ? $data['workforce_personal_ref_id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['assessment_component_ref_id'] === null) {
            $invalid_properties[] = "'assessment_component_ref_id' can't be null";
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            $invalid_properties[] = "'learner_personal_ref_id' can't be null";
        }
        if ($this->container['school_info_ref_id'] === null) {
            $invalid_properties[] = "'school_info_ref_id' can't be null";
        }
        if ($this->container['achievement_date'] === null) {
            $invalid_properties[] = "'achievement_date' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalid_properties[] = "'result' can't be null";
        }
        if ($this->container['result_status'] === null) {
            $invalid_properties[] = "'result_status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['assessment_component_ref_id'] === null) {
            return false;
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_info_ref_id'] === null) {
            return false;
        }
        if ($this->container['achievement_date'] === null) {
            return false;
        }
        if ($this->container['result'] === null) {
            return false;
        }
        if ($this->container['result_status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) of this result.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets assessment_component_ref_id
     * @return string
     */
    public function getAssessmentComponentRefId()
    {
        return isset($this->container['assessment_component_ref_id']) ? $this->container['assessment_component_ref_id'] : null;
    }

    /**
     * Sets assessment_component_ref_id
     * @param string $assessment_component_ref_id The assessment component that the result is for.
     * @return $this
     */
    public function setAssessmentComponentRefId($assessment_component_ref_id)
    {
        $this->container['assessment_component_ref_id'] = $assessment_component_ref_id;

        return $this;
    }

    /**
     * Gets learner_personal_ref_id
     * @return string
     */
    public function getLearnerPersonalRefId()
    {
        return isset($this->container['learner_personal_ref_id']) ? $this->container['learner_personal_ref_id'] : null;
    }

    /**
     * Sets learner_personal_ref_id
     * @param string $learner_personal_ref_id The ID (GUID) of the learner achieving the results.
     * @return $this
     */
    public function setLearnerPersonalRefId($learner_personal_ref_id)
    {
        $this->container['learner_personal_ref_id'] = $learner_personal_ref_id;

        return $this;
    }

    /**
     * Gets school_info_ref_id
     * @return string
     */
    public function getSchoolInfoRefId()
    {
        return isset($this->container['school_info_ref_id']) ? $this->container['school_info_ref_id'] : null;
    }

    /**
     * Sets school_info_ref_id
     * @param string $school_info_ref_id The school at which the assessment was taken.
     * @return $this
     */
    public function setSchoolInfoRefId($school_info_ref_id)
    {
        $this->container['school_info_ref_id'] = $school_info_ref_id;

        return $this;
    }

    /**
     * Gets achievement_date
     * @return \DateTime
     */
    public function getAchievementDate()
    {
        return isset($this->container['achievement_date']) ? $this->container['achievement_date'] : null;
    }

    /**
     * Sets achievement_date
     * @param \DateTime $achievement_date The date the results were achieved.
     * @return $this
     */
    public function setAchievementDate($achievement_date)
    {
        $this->container['achievement_date'] = $achievement_date;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return isset($this->container['result']) ? $this->container['result'] : null;
    }

    /**
     * Sets result
     * @param string $result A grade title, a comment, or a mark (dependent on ComponentType of associated aspect). Marks and grades should be valid in the grade set or mark set on the date the assessment was achieved.
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_status
     * @return string
     */
    public function getResultStatus()
    {
        return isset($this->container['result_status']) ? $this->container['result_status'] : null;
    }

    /**
     * Sets result_status
     * @param string $result_status Indicates whether the result is estimated, an interim result, provisional, actual result or a target.
     * @return $this
     */
    public function setResultStatus($result_status)
    {
        $this->container['result_status'] = $result_status;

        return $this;
    }

    /**
     * Gets assessment_session_list
     * @return string[]
     */
    public function getAssessmentSessionList()
    {
        return isset($this->container['assessment_session_list']) ? $this->container['assessment_session_list'] : null;
    }

    /**
     * Sets assessment_session_list
     * @param string[] $assessment_session_list
     * @return $this
     */
    public function setAssessmentSessionList($assessment_session_list)
    {
        $this->container['assessment_session_list'] = $assessment_session_list;

        return $this;
    }

    /**
     * Gets workforce_personal_ref_id
     * @return string
     */
    public function getWorkforcePersonalRefId()
    {
        return isset($this->container['workforce_personal_ref_id']) ? $this->container['workforce_personal_ref_id'] : null;
    }

    /**
     * Sets workforce_personal_ref_id
     * @param string $workforce_personal_ref_id The ID (GUID) that uniquely identifies the teacher or staff member who created the result.
     * @return $this
     */
    public function setWorkforcePersonalRefId($workforce_personal_ref_id)
    {
        $this->container['workforce_personal_ref_id'] = $workforce_personal_ref_id;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return isset($this->container['note']) ? $this->container['note'] : null;
    }

    /**
     * Sets note
     * @param string $note Explanatory/usage notes for result.
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


