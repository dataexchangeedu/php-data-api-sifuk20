<?php
/**
 * LearnerExclusion
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LearnerExclusion Class Doc Comment
 *
 * @category    Class
 * @description This object contains information related to a learner being excluded from one or more sessions of school.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class LearnerExclusion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnerExclusion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'learner_personal_ref_id' => 'string',
        'category' => 'string',
        'reason' => 'string',
        'start_date' => '\DateTime',
        'start_session' => 'int',
        'end_date' => '\DateTime',
        'actual_sessions' => 'int',
        'appeal' => 'string',
        'appeal_date' => '\DateTime',
        'appeal_result' => 'string',
        'reinstatement_date' => '\DateTime',
        'head_teacher_notification_date' => '\DateTime',
        'governor_meeting_date' => '\DateTime',
        'hearing_notice_of_appeal_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'learner_personal_ref_id' => null,
        'category' => null,
        'reason' => null,
        'start_date' => 'date',
        'start_session' => 'int64',
        'end_date' => 'date',
        'actual_sessions' => 'int64',
        'appeal' => null,
        'appeal_date' => 'date',
        'appeal_result' => null,
        'reinstatement_date' => 'date',
        'head_teacher_notification_date' => 'date',
        'governor_meeting_date' => 'date',
        'hearing_notice_of_appeal_date' => 'date'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'learner_personal_ref_id' => '@LearnerPersonalRefId',
        'category' => 'Category',
        'reason' => 'Reason',
        'start_date' => 'StartDate',
        'start_session' => 'StartSession',
        'end_date' => 'EndDate',
        'actual_sessions' => 'ActualSessions',
        'appeal' => 'Appeal',
        'appeal_date' => 'AppealDate',
        'appeal_result' => 'AppealResult',
        'reinstatement_date' => 'ReinstatementDate',
        'head_teacher_notification_date' => 'HeadTeacherNotificationDate',
        'governor_meeting_date' => 'GovernorMeetingDate',
        'hearing_notice_of_appeal_date' => 'HearingNoticeOfAppealDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'learner_personal_ref_id' => 'setLearnerPersonalRefId',
        'category' => 'setCategory',
        'reason' => 'setReason',
        'start_date' => 'setStartDate',
        'start_session' => 'setStartSession',
        'end_date' => 'setEndDate',
        'actual_sessions' => 'setActualSessions',
        'appeal' => 'setAppeal',
        'appeal_date' => 'setAppealDate',
        'appeal_result' => 'setAppealResult',
        'reinstatement_date' => 'setReinstatementDate',
        'head_teacher_notification_date' => 'setHeadTeacherNotificationDate',
        'governor_meeting_date' => 'setGovernorMeetingDate',
        'hearing_notice_of_appeal_date' => 'setHearingNoticeOfAppealDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'learner_personal_ref_id' => 'getLearnerPersonalRefId',
        'category' => 'getCategory',
        'reason' => 'getReason',
        'start_date' => 'getStartDate',
        'start_session' => 'getStartSession',
        'end_date' => 'getEndDate',
        'actual_sessions' => 'getActualSessions',
        'appeal' => 'getAppeal',
        'appeal_date' => 'getAppealDate',
        'appeal_result' => 'getAppealResult',
        'reinstatement_date' => 'getReinstatementDate',
        'head_teacher_notification_date' => 'getHeadTeacherNotificationDate',
        'governor_meeting_date' => 'getGovernorMeetingDate',
        'hearing_notice_of_appeal_date' => 'getHearingNoticeOfAppealDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['learner_personal_ref_id'] = isset($data['learner_personal_ref_id']) ? $data['learner_personal_ref_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_session'] = isset($data['start_session']) ? $data['start_session'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['actual_sessions'] = isset($data['actual_sessions']) ? $data['actual_sessions'] : null;
        $this->container['appeal'] = isset($data['appeal']) ? $data['appeal'] : null;
        $this->container['appeal_date'] = isset($data['appeal_date']) ? $data['appeal_date'] : null;
        $this->container['appeal_result'] = isset($data['appeal_result']) ? $data['appeal_result'] : null;
        $this->container['reinstatement_date'] = isset($data['reinstatement_date']) ? $data['reinstatement_date'] : null;
        $this->container['head_teacher_notification_date'] = isset($data['head_teacher_notification_date']) ? $data['head_teacher_notification_date'] : null;
        $this->container['governor_meeting_date'] = isset($data['governor_meeting_date']) ? $data['governor_meeting_date'] : null;
        $this->container['hearing_notice_of_appeal_date'] = isset($data['hearing_notice_of_appeal_date']) ? $data['hearing_notice_of_appeal_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            $invalid_properties[] = "'learner_personal_ref_id' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalid_properties[] = "'reason' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['start_session'] === null) {
            $invalid_properties[] = "'start_session' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['reason'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['start_session'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) of this exclusion.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets learner_personal_ref_id
     * @return string
     */
    public function getLearnerPersonalRefId()
    {
        return isset($this->container['learner_personal_ref_id']) ? $this->container['learner_personal_ref_id'] : null;
    }

    /**
     * Sets learner_personal_ref_id
     * @param string $learner_personal_ref_id The ID (GUID) of the excluded learner.
     * @return $this
     */
    public function setLearnerPersonalRefId($learner_personal_ref_id)
    {
        $this->container['learner_personal_ref_id'] = $learner_personal_ref_id;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return isset($this->container['category']) ? $this->container['category'] : null;
    }

    /**
     * Sets category
     * @param string $category Exclusion category.
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return isset($this->container['reason']) ? $this->container['reason'] : null;
    }

    /**
     * Sets reason
     * @param string $reason Reason for exclusion.
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return isset($this->container['start_date']) ? $this->container['start_date'] : null;
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Date exclusion takes effect irrespective of any review or appeal. Normally this will not be the same as Date of Leaving (exitDate) and it should be noted that the learner will remain on the schools&#039;s roll for a period after this start date.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_session
     * @return int
     */
    public function getStartSession()
    {
        return isset($this->container['start_session']) ? $this->container['start_session'] : null;
    }

    /**
     * Sets start_session
     * @param int $start_session
     * @return $this
     */
    public function setStartSession($start_session)
    {
        $this->container['start_session'] = $start_session;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return isset($this->container['end_date']) ? $this->container['end_date'] : null;
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Date exclusion concludes.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets actual_sessions
     * @return int
     */
    public function getActualSessions()
    {
        return isset($this->container['actual_sessions']) ? $this->container['actual_sessions'] : null;
    }

    /**
     * Sets actual_sessions
     * @param int $actual_sessions Total number of sessions for which the exclusion is in effect. For lunchtime exclusions, each lunchtime for which the exclusion applies is one session. For fixed term and permanent exclusions, this is one session during the school day. For exclusions that are followed by reinstatement the actual, not the planned number of sessions should be recorded. (Exclusion sessions are used only to calculate the total allowable in a term or academic year and are not the same as an attendance session.)
     * @return $this
     */
    public function setActualSessions($actual_sessions)
    {
        $this->container['actual_sessions'] = $actual_sessions;

        return $this;
    }

    /**
     * Gets appeal
     * @return string
     */
    public function getAppeal()
    {
        return isset($this->container['appeal']) ? $this->container['appeal'] : null;
    }

    /**
     * Sets appeal
     * @param string $appeal Is there an appeal against permanent exclusion?
     * @return $this
     */
    public function setAppeal($appeal)
    {
        $this->container['appeal'] = $appeal;

        return $this;
    }

    /**
     * Gets appeal_date
     * @return \DateTime
     */
    public function getAppealDate()
    {
        return isset($this->container['appeal_date']) ? $this->container['appeal_date'] : null;
    }

    /**
     * Sets appeal_date
     * @param \DateTime $appeal_date Date for appeal against permanent exclusion.
     * @return $this
     */
    public function setAppealDate($appeal_date)
    {
        $this->container['appeal_date'] = $appeal_date;

        return $this;
    }

    /**
     * Gets appeal_result
     * @return string
     */
    public function getAppealResult()
    {
        return isset($this->container['appeal_result']) ? $this->container['appeal_result'] : null;
    }

    /**
     * Sets appeal_result
     * @param string $appeal_result The result of the appeal against permanent exclusion.
     * @return $this
     */
    public function setAppealResult($appeal_result)
    {
        $this->container['appeal_result'] = $appeal_result;

        return $this;
    }

    /**
     * Gets reinstatement_date
     * @return \DateTime
     */
    public function getReinstatementDate()
    {
        return isset($this->container['reinstatement_date']) ? $this->container['reinstatement_date'] : null;
    }

    /**
     * Sets reinstatement_date
     * @param \DateTime $reinstatement_date Date learner was reinstated, if appropriate.
     * @return $this
     */
    public function setReinstatementDate($reinstatement_date)
    {
        $this->container['reinstatement_date'] = $reinstatement_date;

        return $this;
    }

    /**
     * Gets head_teacher_notification_date
     * @return \DateTime
     */
    public function getHeadTeacherNotificationDate()
    {
        return isset($this->container['head_teacher_notification_date']) ? $this->container['head_teacher_notification_date'] : null;
    }

    /**
     * Sets head_teacher_notification_date
     * @param \DateTime $head_teacher_notification_date Date head teacher notified parents, school LA, and home LA (if different) of exclusion.
     * @return $this
     */
    public function setHeadTeacherNotificationDate($head_teacher_notification_date)
    {
        $this->container['head_teacher_notification_date'] = $head_teacher_notification_date;

        return $this;
    }

    /**
     * Gets governor_meeting_date
     * @return \DateTime
     */
    public function getGovernorMeetingDate()
    {
        return isset($this->container['governor_meeting_date']) ? $this->container['governor_meeting_date'] : null;
    }

    /**
     * Sets governor_meeting_date
     * @param \DateTime $governor_meeting_date Date of Governors&#039; meeting with respect to exclusion.
     * @return $this
     */
    public function setGovernorMeetingDate($governor_meeting_date)
    {
        $this->container['governor_meeting_date'] = $governor_meeting_date;

        return $this;
    }

    /**
     * Gets hearing_notice_of_appeal_date
     * @return \DateTime
     */
    public function getHearingNoticeOfAppealDate()
    {
        return isset($this->container['hearing_notice_of_appeal_date']) ? $this->container['hearing_notice_of_appeal_date'] : null;
    }

    /**
     * Sets hearing_notice_of_appeal_date
     * @param \DateTime $hearing_notice_of_appeal_date Date of exclusion hearing/expiration of notice of appeal.
     * @return $this
     */
    public function setHearingNoticeOfAppealDate($hearing_notice_of_appeal_date)
    {
        $this->container['hearing_notice_of_appeal_date'] = $hearing_notice_of_appeal_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


