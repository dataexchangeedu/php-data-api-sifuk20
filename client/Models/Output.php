<?php
/**
 * Output
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\UK\20\Models;

use \ArrayAccess;

/**
 * Output Class Doc Comment
 *
 * @category    Class */
/**
 * @package     DataExchange\UK\20
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Output implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Output';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'local_type' => 'string',
        'group_local_id' => 'string',
        'teaching_group_ref_id' => 'string',
        'desc' => 'string',
        'short_desc' => 'string',
        'nc_year_list' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'local_type' => 'LocalType',
        'group_local_id' => 'GroupLocalId',
        'teaching_group_ref_id' => 'TeachingGroupRefId',
        'desc' => 'Desc',
        'short_desc' => 'ShortDesc',
        'nc_year_list' => 'NCYearList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'local_type' => 'setLocalType',
        'group_local_id' => 'setGroupLocalId',
        'teaching_group_ref_id' => 'setTeachingGroupRefId',
        'desc' => 'setDesc',
        'short_desc' => 'setShortDesc',
        'nc_year_list' => 'setNcYearList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'local_type' => 'getLocalType',
        'group_local_id' => 'getGroupLocalId',
        'teaching_group_ref_id' => 'getTeachingGroupRefId',
        'desc' => 'getDesc',
        'short_desc' => 'getShortDesc',
        'nc_year_list' => 'getNcYearList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['local_type'] = isset($data['local_type']) ? $data['local_type'] : null;
        $this->container['group_local_id'] = isset($data['group_local_id']) ? $data['group_local_id'] : null;
        $this->container['teaching_group_ref_id'] = isset($data['teaching_group_ref_id']) ? $data['teaching_group_ref_id'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['short_desc'] = isset($data['short_desc']) ? $data['short_desc'] : null;
        $this->container['nc_year_list'] = isset($data['nc_year_list']) ? $data['nc_year_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type &quot;TG&quot; has special meaning â€“ it means this is the bottom of the &quot;tree&quot; and the output is a TeachingGroup. &quot;YR&quot; means a year (or &quot;principal division&quot;) within the school (7,8,9,etc).
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets local_type
     * @return string
     */
    public function getLocalType()
    {
        return $this->container['local_type'];
    }

    /**
     * Sets local_type
     * @param string $local_type
     * @return $this
     */
    public function setLocalType($local_type)
    {
        $this->container['local_type'] = $local_type;

        return $this;
    }

    /**
     * Gets group_local_id
     * @return string
     */
    public function getGroupLocalId()
    {
        return $this->container['group_local_id'];
    }

    /**
     * Sets group_local_id
     * @param string $group_local_id
     * @return $this
     */
    public function setGroupLocalId($group_local_id)
    {
        $this->container['group_local_id'] = $group_local_id;

        return $this;
    }

    /**
     * Gets teaching_group_ref_id
     * @return string
     */
    public function getTeachingGroupRefId()
    {
        return $this->container['teaching_group_ref_id'];
    }

    /**
     * Sets teaching_group_ref_id
     * @param string $teaching_group_ref_id If Type = &quot;TG&quot; then include here the TeachingGroupID (see TeachingGroup)
     * @return $this
     */
    public function setTeachingGroupRefId($teaching_group_ref_id)
    {
        $this->container['teaching_group_ref_id'] = $teaching_group_ref_id;

        return $this;
    }

    /**
     * Gets desc
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     * @param string $desc
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets short_desc
     * @return string
     */
    public function getShortDesc()
    {
        return $this->container['short_desc'];
    }

    /**
     * Sets short_desc
     * @param string $short_desc
     * @return $this
     */
    public function setShortDesc($short_desc)
    {
        $this->container['short_desc'] = $short_desc;

        return $this;
    }

    /**
     * Gets nc_year_list
     * @return string[]
     */
    public function getNcYearList()
    {
        return $this->container['nc_year_list'];
    }

    /**
     * Sets nc_year_list
     * @param string[] $nc_year_list
     * @return $this
     */
    public function setNcYearList($nc_year_list)
    {
        $this->container['nc_year_list'] = $nc_year_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\UK\20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\UK\20\ObjectSerializer::sanitizeForSerialization($this));
    }
}
