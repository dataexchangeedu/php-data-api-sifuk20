<?php
/**
 * LearnerAttendance
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LearnerAttendance Class Doc Comment
 *
 * @category    Class
 * @description This object provides attendance information for a particular learner in a particular school for a particular period of time. The time can be specified as before, during, or after school and may be for any period of time, including lessons.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class LearnerAttendance implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnerAttendance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'learner_personal_ref_id' => 'string',
        'school_info_ref_id' => 'string',
        'attendance_date' => '\DateTime',
        'time_in' => 'string',
        'start_time' => 'string',
        'finish_time' => 'string',
        'session' => 'string',
        'session_label' => 'string',
        'attendance_domain' => 'string',
        'attendance_code' => 'string',
        'attendance_note' => 'string',
        'record_timestamp' => '\DateTime',
        'input_source' => 'string',
        'workforce_personal_ref_id' => 'string',
        'school_group_ref_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'learner_personal_ref_id' => null,
        'school_info_ref_id' => null,
        'attendance_date' => 'date',
        'time_in' => 'time',
        'start_time' => 'time',
        'finish_time' => 'time',
        'session' => null,
        'session_label' => null,
        'attendance_domain' => null,
        'attendance_code' => null,
        'attendance_note' => null,
        'record_timestamp' => 'date-time',
        'input_source' => null,
        'workforce_personal_ref_id' => null,
        'school_group_ref_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'learner_personal_ref_id' => '@LearnerPersonalRefId',
        'school_info_ref_id' => '@SchoolInfoRefId',
        'attendance_date' => 'AttendanceDate',
        'time_in' => 'TimeIn',
        'start_time' => 'StartTime',
        'finish_time' => 'FinishTime',
        'session' => 'Session',
        'session_label' => 'SessionLabel',
        'attendance_domain' => 'AttendanceDomain',
        'attendance_code' => 'AttendanceCode',
        'attendance_note' => 'AttendanceNote',
        'record_timestamp' => 'RecordTimestamp',
        'input_source' => 'InputSource',
        'workforce_personal_ref_id' => 'WorkforcePersonalRefId',
        'school_group_ref_id' => 'SchoolGroupRefId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'learner_personal_ref_id' => 'setLearnerPersonalRefId',
        'school_info_ref_id' => 'setSchoolInfoRefId',
        'attendance_date' => 'setAttendanceDate',
        'time_in' => 'setTimeIn',
        'start_time' => 'setStartTime',
        'finish_time' => 'setFinishTime',
        'session' => 'setSession',
        'session_label' => 'setSessionLabel',
        'attendance_domain' => 'setAttendanceDomain',
        'attendance_code' => 'setAttendanceCode',
        'attendance_note' => 'setAttendanceNote',
        'record_timestamp' => 'setRecordTimestamp',
        'input_source' => 'setInputSource',
        'workforce_personal_ref_id' => 'setWorkforcePersonalRefId',
        'school_group_ref_id' => 'setSchoolGroupRefId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'learner_personal_ref_id' => 'getLearnerPersonalRefId',
        'school_info_ref_id' => 'getSchoolInfoRefId',
        'attendance_date' => 'getAttendanceDate',
        'time_in' => 'getTimeIn',
        'start_time' => 'getStartTime',
        'finish_time' => 'getFinishTime',
        'session' => 'getSession',
        'session_label' => 'getSessionLabel',
        'attendance_domain' => 'getAttendanceDomain',
        'attendance_code' => 'getAttendanceCode',
        'attendance_note' => 'getAttendanceNote',
        'record_timestamp' => 'getRecordTimestamp',
        'input_source' => 'getInputSource',
        'workforce_personal_ref_id' => 'getWorkforcePersonalRefId',
        'school_group_ref_id' => 'getSchoolGroupRefId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['learner_personal_ref_id'] = isset($data['learner_personal_ref_id']) ? $data['learner_personal_ref_id'] : null;
        $this->container['school_info_ref_id'] = isset($data['school_info_ref_id']) ? $data['school_info_ref_id'] : null;
        $this->container['attendance_date'] = isset($data['attendance_date']) ? $data['attendance_date'] : null;
        $this->container['time_in'] = isset($data['time_in']) ? $data['time_in'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['finish_time'] = isset($data['finish_time']) ? $data['finish_time'] : null;
        $this->container['session'] = isset($data['session']) ? $data['session'] : null;
        $this->container['session_label'] = isset($data['session_label']) ? $data['session_label'] : null;
        $this->container['attendance_domain'] = isset($data['attendance_domain']) ? $data['attendance_domain'] : null;
        $this->container['attendance_code'] = isset($data['attendance_code']) ? $data['attendance_code'] : null;
        $this->container['attendance_note'] = isset($data['attendance_note']) ? $data['attendance_note'] : null;
        $this->container['record_timestamp'] = isset($data['record_timestamp']) ? $data['record_timestamp'] : null;
        $this->container['input_source'] = isset($data['input_source']) ? $data['input_source'] : null;
        $this->container['workforce_personal_ref_id'] = isset($data['workforce_personal_ref_id']) ? $data['workforce_personal_ref_id'] : null;
        $this->container['school_group_ref_id'] = isset($data['school_group_ref_id']) ? $data['school_group_ref_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            $invalid_properties[] = "'learner_personal_ref_id' can't be null";
        }
        if ($this->container['school_info_ref_id'] === null) {
            $invalid_properties[] = "'school_info_ref_id' can't be null";
        }
        if ($this->container['attendance_date'] === null) {
            $invalid_properties[] = "'attendance_date' can't be null";
        }
        if ($this->container['attendance_domain'] === null) {
            $invalid_properties[] = "'attendance_domain' can't be null";
        }
        if ($this->container['attendance_code'] === null) {
            $invalid_properties[] = "'attendance_code' can't be null";
        }
        if ($this->container['input_source'] === null) {
            $invalid_properties[] = "'input_source' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_info_ref_id'] === null) {
            return false;
        }
        if ($this->container['attendance_date'] === null) {
            return false;
        }
        if ($this->container['attendance_domain'] === null) {
            return false;
        }
        if ($this->container['attendance_code'] === null) {
            return false;
        }
        if ($this->container['input_source'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) assigned to uniquely identify this attendance record.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets learner_personal_ref_id
     * @return string
     */
    public function getLearnerPersonalRefId()
    {
        return isset($this->container['learner_personal_ref_id']) ? $this->container['learner_personal_ref_id'] : null;
    }

    /**
     * Sets learner_personal_ref_id
     * @param string $learner_personal_ref_id The ID (GUID) of the learner for which this attendance mark is recorded.
     * @return $this
     */
    public function setLearnerPersonalRefId($learner_personal_ref_id)
    {
        $this->container['learner_personal_ref_id'] = $learner_personal_ref_id;

        return $this;
    }

    /**
     * Gets school_info_ref_id
     * @return string
     */
    public function getSchoolInfoRefId()
    {
        return isset($this->container['school_info_ref_id']) ? $this->container['school_info_ref_id'] : null;
    }

    /**
     * Sets school_info_ref_id
     * @param string $school_info_ref_id The school where the attendance mark was taken.
     * @return $this
     */
    public function setSchoolInfoRefId($school_info_ref_id)
    {
        $this->container['school_info_ref_id'] = $school_info_ref_id;

        return $this;
    }

    /**
     * Gets attendance_date
     * @return \DateTime
     */
    public function getAttendanceDate()
    {
        return isset($this->container['attendance_date']) ? $this->container['attendance_date'] : null;
    }

    /**
     * Sets attendance_date
     * @param \DateTime $attendance_date The date of the attendance period.
     * @return $this
     */
    public function setAttendanceDate($attendance_date)
    {
        $this->container['attendance_date'] = $attendance_date;

        return $this;
    }

    /**
     * Gets time_in
     * @return string
     */
    public function getTimeIn()
    {
        return isset($this->container['time_in']) ? $this->container['time_in'] : null;
    }

    /**
     * Sets time_in
     * @param string $time_in The time when the learner began the attendance period.
     * @return $this
     */
    public function setTimeIn($time_in)
    {
        $this->container['time_in'] = $time_in;

        return $this;
    }

    /**
     * Gets start_time
     * @return string
     */
    public function getStartTime()
    {
        return isset($this->container['start_time']) ? $this->container['start_time'] : null;
    }

    /**
     * Sets start_time
     * @param string $start_time The time the attendance period started. StartTime is required when this object represents a lesson
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets finish_time
     * @return string
     */
    public function getFinishTime()
    {
        return isset($this->container['finish_time']) ? $this->container['finish_time'] : null;
    }

    /**
     * Sets finish_time
     * @param string $finish_time The time the attendance period finished.
     * @return $this
     */
    public function setFinishTime($finish_time)
    {
        $this->container['finish_time'] = $finish_time;

        return $this;
    }

    /**
     * Gets session
     * @return string
     */
    public function getSession()
    {
        return isset($this->container['session']) ? $this->container['session'] : null;
    }

    /**
     * Sets session
     * @param string $session The session within which this attendance mark applies (e.g. AM/PM). Session is required when StartTime is not specified and the object refers to a session attendance mark (i.e. AttendanceDomain is session).
     * @return $this
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }

    /**
     * Gets session_label
     * @return string
     */
    public function getSessionLabel()
    {
        return isset($this->container['session_label']) ? $this->container['session_label'] : null;
    }

    /**
     * Sets session_label
     * @param string $session_label A label associated with the session to further describe the session, when applicable.
     * @return $this
     */
    public function setSessionLabel($session_label)
    {
        $this->container['session_label'] = $session_label;

        return $this;
    }

    /**
     * Gets attendance_domain
     * @return string
     */
    public function getAttendanceDomain()
    {
        return isset($this->container['attendance_domain']) ? $this->container['attendance_domain'] : null;
    }

    /**
     * Sets attendance_domain
     * @param string $attendance_domain The attendance type.
     * @return $this
     */
    public function setAttendanceDomain($attendance_domain)
    {
        $this->container['attendance_domain'] = $attendance_domain;

        return $this;
    }

    /**
     * Gets attendance_code
     * @return string
     */
    public function getAttendanceCode()
    {
        return isset($this->container['attendance_code']) ? $this->container['attendance_code'] : null;
    }

    /**
     * Sets attendance_code
     * @param string $attendance_code The attendance mark/code.
     * @return $this
     */
    public function setAttendanceCode($attendance_code)
    {
        $this->container['attendance_code'] = $attendance_code;

        return $this;
    }

    /**
     * Gets attendance_note
     * @return string
     */
    public function getAttendanceNote()
    {
        return isset($this->container['attendance_note']) ? $this->container['attendance_note'] : null;
    }

    /**
     * Sets attendance_note
     * @param string $attendance_note Additional comments. Required when record is specified as a correction.
     * @return $this
     */
    public function setAttendanceNote($attendance_note)
    {
        $this->container['attendance_note'] = $attendance_note;

        return $this;
    }

    /**
     * Gets record_timestamp
     * @return \DateTime
     */
    public function getRecordTimestamp()
    {
        return isset($this->container['record_timestamp']) ? $this->container['record_timestamp'] : null;
    }

    /**
     * Sets record_timestamp
     * @param \DateTime $record_timestamp The date/time when recorded. When more than one record exists using the same RefId, the record with the latest timestamp is assumed to be the most current. This is possible when a record is republished due to corrections.
     * @return $this
     */
    public function setRecordTimestamp($record_timestamp)
    {
        $this->container['record_timestamp'] = $record_timestamp;

        return $this;
    }

    /**
     * Gets input_source
     * @return string
     */
    public function getInputSource()
    {
        return isset($this->container['input_source']) ? $this->container['input_source'] : null;
    }

    /**
     * Sets input_source
     * @param string $input_source The source of the attendance record data. Could be Workforce member, biometric device, or other.
     * @return $this
     */
    public function setInputSource($input_source)
    {
        $this->container['input_source'] = $input_source;

        return $this;
    }

    /**
     * Gets workforce_personal_ref_id
     * @return string
     */
    public function getWorkforcePersonalRefId()
    {
        return isset($this->container['workforce_personal_ref_id']) ? $this->container['workforce_personal_ref_id'] : null;
    }

    /**
     * Sets workforce_personal_ref_id
     * @param string $workforce_personal_ref_id The ID (GUID) of the staff member responsible for recording this attendance information.
     * @return $this
     */
    public function setWorkforcePersonalRefId($workforce_personal_ref_id)
    {
        $this->container['workforce_personal_ref_id'] = $workforce_personal_ref_id;

        return $this;
    }

    /**
     * Gets school_group_ref_id
     * @return string
     */
    public function getSchoolGroupRefId()
    {
        return isset($this->container['school_group_ref_id']) ? $this->container['school_group_ref_id'] : null;
    }

    /**
     * Sets school_group_ref_id
     * @param string $school_group_ref_id The ID (GUID) of the group that this attendance applies to. Useful when the attendance period corresponds to a lesson time.
     * @return $this
     */
    public function setSchoolGroupRefId($school_group_ref_id)
    {
        $this->container['school_group_ref_id'] = $school_group_ref_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


