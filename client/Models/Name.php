<?php
/**
 * Name
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * Name Class Doc Comment
 *
 * @category    Class
 * @description The Name element defines name information for a person and occurs within the PersonalInformation element.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class Name implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Name';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'title' => 'string',
        'family_name' => 'string',
        'given_name' => 'string',
        'middle_names' => 'string',
        'family_name_first' => 'string',
        'preferred_family_name' => 'string',
        'preferred_family_name_first' => 'string',
        'preferred_given_name' => 'string',
        'suffix' => 'string',
        'full_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'title' => null,
        'family_name' => null,
        'given_name' => null,
        'middle_names' => null,
        'family_name_first' => null,
        'preferred_family_name' => null,
        'preferred_family_name_first' => null,
        'preferred_given_name' => null,
        'suffix' => null,
        'full_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => '@Type',
        'title' => 'Title',
        'family_name' => 'FamilyName',
        'given_name' => 'GivenName',
        'middle_names' => 'MiddleNames',
        'family_name_first' => 'FamilyNameFirst',
        'preferred_family_name' => 'PreferredFamilyName',
        'preferred_family_name_first' => 'PreferredFamilyNameFirst',
        'preferred_given_name' => 'PreferredGivenName',
        'suffix' => 'Suffix',
        'full_name' => 'FullName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'title' => 'setTitle',
        'family_name' => 'setFamilyName',
        'given_name' => 'setGivenName',
        'middle_names' => 'setMiddleNames',
        'family_name_first' => 'setFamilyNameFirst',
        'preferred_family_name' => 'setPreferredFamilyName',
        'preferred_family_name_first' => 'setPreferredFamilyNameFirst',
        'preferred_given_name' => 'setPreferredGivenName',
        'suffix' => 'setSuffix',
        'full_name' => 'setFullName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'title' => 'getTitle',
        'family_name' => 'getFamilyName',
        'given_name' => 'getGivenName',
        'middle_names' => 'getMiddleNames',
        'family_name_first' => 'getFamilyNameFirst',
        'preferred_family_name' => 'getPreferredFamilyName',
        'preferred_family_name_first' => 'getPreferredFamilyNameFirst',
        'preferred_given_name' => 'getPreferredGivenName',
        'suffix' => 'getSuffix',
        'full_name' => 'getFullName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['family_name'] = isset($data['family_name']) ? $data['family_name'] : null;
        $this->container['given_name'] = isset($data['given_name']) ? $data['given_name'] : null;
        $this->container['middle_names'] = isset($data['middle_names']) ? $data['middle_names'] : null;
        $this->container['family_name_first'] = isset($data['family_name_first']) ? $data['family_name_first'] : null;
        $this->container['preferred_family_name'] = isset($data['preferred_family_name']) ? $data['preferred_family_name'] : null;
        $this->container['preferred_family_name_first'] = isset($data['preferred_family_name_first']) ? $data['preferred_family_name_first'] : null;
        $this->container['preferred_given_name'] = isset($data['preferred_given_name']) ? $data['preferred_given_name'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return isset($this->container['type']) ? $this->container['type'] : null;
    }

    /**
     * Sets type
     * @param string $type Code that specifies what type of name this is.
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return isset($this->container['title']) ? $this->container['title'] : null;
    }

    /**
     * Sets title
     * @param string $title A title or prefix associated with the name. If any of: Mr, Mrs, Ms, Miss, Rev, Fr, Dr, Prof, Hon, Sir, Lord, Lady - these must be as shown, otherwise free text. Note that title is not applicable to learners.
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets family_name
     * @return string
     */
    public function getFamilyName()
    {
        return isset($this->container['family_name']) ? $this->container['family_name'] : null;
    }

    /**
     * Sets family_name
     * @param string $family_name Full legal family name. That part of the person&#039;s name which is used to describe family, clan, tribal group, or marital association. Note that this element is always required. However, when associated with a contact it may not be possible to know the family name in which case you should add the available information to the FullName element.
     * @return $this
     */
    public function setFamilyName($family_name)
    {
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets given_name
     * @return string
     */
    public function getGivenName()
    {
        return isset($this->container['given_name']) ? $this->container['given_name'] : null;
    }

    /**
     * Sets given_name
     * @param string $given_name Full given name (forename) of the person. Note that this element is always required. However, when associated with a contact it may not be possible to know the given name in which case you should add the available information to the FullName element.
     * @return $this
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets middle_names
     * @return string
     */
    public function getMiddleNames()
    {
        return isset($this->container['middle_names']) ? $this->container['middle_names'] : null;
    }

    /**
     * Sets middle_names
     * @param string $middle_names All other given or middle names, each separated with a single space character.
     * @return $this
     */
    public function setMiddleNames($middle_names)
    {
        $this->container['middle_names'] = $middle_names;

        return $this;
    }

    /**
     * Gets family_name_first
     * @return string
     */
    public function getFamilyNameFirst()
    {
        return isset($this->container['family_name_first']) ? $this->container['family_name_first'] : null;
    }

    /**
     * Sets family_name_first
     * @param string $family_name_first An indicator used to identify the naming conventions used by some predominantly non-European, ethnic or language groups and related to the display nature of a name.
     * @return $this
     */
    public function setFamilyNameFirst($family_name_first)
    {
        $this->container['family_name_first'] = $family_name_first;

        return $this;
    }

    /**
     * Gets preferred_family_name
     * @return string
     */
    public function getPreferredFamilyName()
    {
        return isset($this->container['preferred_family_name']) ? $this->container['preferred_family_name'] : null;
    }

    /**
     * Sets preferred_family_name
     * @param string $preferred_family_name The family name preferred most by the person (as written).
     * @return $this
     */
    public function setPreferredFamilyName($preferred_family_name)
    {
        $this->container['preferred_family_name'] = $preferred_family_name;

        return $this;
    }

    /**
     * Gets preferred_family_name_first
     * @return string
     */
    public function getPreferredFamilyNameFirst()
    {
        return isset($this->container['preferred_family_name_first']) ? $this->container['preferred_family_name_first'] : null;
    }

    /**
     * Sets preferred_family_name_first
     * @param string $preferred_family_name_first An indicator used to identify the naming conventions used by some predominantly non-European, ethnic or language groups and related to the display nature of a name.
     * @return $this
     */
    public function setPreferredFamilyNameFirst($preferred_family_name_first)
    {
        $this->container['preferred_family_name_first'] = $preferred_family_name_first;

        return $this;
    }

    /**
     * Gets preferred_given_name
     * @return string
     */
    public function getPreferredGivenName()
    {
        return isset($this->container['preferred_given_name']) ? $this->container['preferred_given_name'] : null;
    }

    /**
     * Sets preferred_given_name
     * @param string $preferred_given_name The given name preferred most by the person (as written).
     * @return $this
     */
    public function setPreferredGivenName($preferred_given_name)
    {
        $this->container['preferred_given_name'] = $preferred_given_name;

        return $this;
    }

    /**
     * Gets suffix
     * @return string
     */
    public function getSuffix()
    {
        return isset($this->container['suffix']) ? $this->container['suffix'] : null;
    }

    /**
     * Sets suffix
     * @param string $suffix Textual suffix like PHD, JP, BSc.
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets full_name
     * @return string
     */
    public function getFullName()
    {
        return isset($this->container['full_name']) ? $this->container['full_name'] : null;
    }

    /**
     * Sets full_name
     * @param string $full_name A free text field for the complete name for display purposes. If this is associated with a ContactPersonal record and the FamilyName and GivenName are not both specified, then this becomes mandatory.
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


