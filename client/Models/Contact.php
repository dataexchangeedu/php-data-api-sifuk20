<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * Contact Class Doc Comment
 *
 * @category    Class
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class Contact implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sif_ref_id' => 'string',
        'sif_ref_object' => 'string',
        'position_title' => 'string',
        'role' => 'string',
        'publish_in_directory' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sif_ref_id' => null,
        'sif_ref_object' => null,
        'position_title' => null,
        'role' => null,
        'publish_in_directory' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'sif_ref_id' => '@SIF_RefId',
        'sif_ref_object' => '@SIF_RefObject',
        'position_title' => 'PositionTitle',
        'role' => 'Role',
        'publish_in_directory' => 'PublishInDirectory'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'sif_ref_id' => 'setSifRefId',
        'sif_ref_object' => 'setSifRefObject',
        'position_title' => 'setPositionTitle',
        'role' => 'setRole',
        'publish_in_directory' => 'setPublishInDirectory'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'sif_ref_id' => 'getSifRefId',
        'sif_ref_object' => 'getSifRefObject',
        'position_title' => 'getPositionTitle',
        'role' => 'getRole',
        'publish_in_directory' => 'getPublishInDirectory'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sif_ref_id'] = isset($data['sif_ref_id']) ? $data['sif_ref_id'] : null;
        $this->container['sif_ref_object'] = isset($data['sif_ref_object']) ? $data['sif_ref_object'] : null;
        $this->container['position_title'] = isset($data['position_title']) ? $data['position_title'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['publish_in_directory'] = isset($data['publish_in_directory']) ? $data['publish_in_directory'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['sif_ref_id'] === null) {
            $invalid_properties[] = "'sif_ref_id' can't be null";
        }
        if ($this->container['sif_ref_object'] === null) {
            $invalid_properties[] = "'sif_ref_object' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['sif_ref_id'] === null) {
            return false;
        }
        if ($this->container['sif_ref_object'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets sif_ref_id
     * @return string
     */
    public function getSifRefId()
    {
        return isset($this->container['sif_ref_id']) ? $this->container['sif_ref_id'] : null;
    }

    /**
     * Sets sif_ref_id
     * @param string $sif_ref_id The ID (GUID) of the person listed as a contact. Note that this is any person listed as a contact through either a ContactPersonal, WorkforcePersonal, or even a LearnerPersonal record.
     * @return $this
     */
    public function setSifRefId($sif_ref_id)
    {
        $this->container['sif_ref_id'] = $sif_ref_id;

        return $this;
    }

    /**
     * Gets sif_ref_object
     * @return string
     */
    public function getSifRefObject()
    {
        return isset($this->container['sif_ref_object']) ? $this->container['sif_ref_object'] : null;
    }

    /**
     * Sets sif_ref_object
     * @param string $sif_ref_object The object type being referred to.
     * @return $this
     */
    public function setSifRefObject($sif_ref_object)
    {
        $this->container['sif_ref_object'] = $sif_ref_object;

        return $this;
    }

    /**
     * Gets position_title
     * @return string
     */
    public function getPositionTitle()
    {
        return isset($this->container['position_title']) ? $this->container['position_title'] : null;
    }

    /**
     * Sets position_title
     * @param string $position_title The contact person&#039;s position title within the school or LA.
     * @return $this
     */
    public function setPositionTitle($position_title)
    {
        $this->container['position_title'] = $position_title;

        return $this;
    }

    /**
     * Gets role
     * @return string
     */
    public function getRole()
    {
        return isset($this->container['role']) ? $this->container['role'] : null;
    }

    /**
     * Sets role
     * @param string $role Role played by this contact in the school or LA. Any descriptive text is allowed here.
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets publish_in_directory
     * @return string
     */
    public function getPublishInDirectory()
    {
        return isset($this->container['publish_in_directory']) ? $this->container['publish_in_directory'] : null;
    }

    /**
     * Sets publish_in_directory
     * @param string $publish_in_directory Indicates whether or not this contact&#039;s information should be published in a directory of school or LA information.
     * @return $this
     */
    public function setPublishInDirectory($publish_in_directory)
    {
        $this->container['publish_in_directory'] = $publish_in_directory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


