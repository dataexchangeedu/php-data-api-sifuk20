<?php
/**
 * LAInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LAInfo Class Doc Comment
 *
 * @category    Class
 * @description This object contains information about a Local Authority (LA). Compare with US/Canada object:
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class LAInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LAInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'la_id' => 'string',
        'la_name' => 'string',
        'la_full_name' => 'string',
        'laurl' => 'string',
        'la_address' => '\DataExchange\SIFUK20\Models\LAAddress',
        'address_list' => 'string[]',
        'la_phone_number' => '\DataExchange\SIFUK20\Models\LAPhoneNumber',
        'phone_number_list' => 'string[]',
        'la_contact_list' => '\DataExchange\SIFUK20\Models\Contact[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_id' => null,
        'la_id' => null,
        'la_name' => null,
        'la_full_name' => null,
        'laurl' => 'uri',
        'la_address' => null,
        'address_list' => null,
        'la_phone_number' => null,
        'phone_number_list' => null,
        'la_contact_list' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'la_id' => 'LAId',
        'la_name' => 'LAName',
        'la_full_name' => 'LAFullName',
        'laurl' => 'LAURL',
        'la_address' => 'LAAddress',
        'address_list' => 'AddressList',
        'la_phone_number' => 'LAPhoneNumber',
        'phone_number_list' => 'PhoneNumberList',
        'la_contact_list' => 'LAContactList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'la_id' => 'setLaId',
        'la_name' => 'setLaName',
        'la_full_name' => 'setLaFullName',
        'laurl' => 'setLaurl',
        'la_address' => 'setLaAddress',
        'address_list' => 'setAddressList',
        'la_phone_number' => 'setLaPhoneNumber',
        'phone_number_list' => 'setPhoneNumberList',
        'la_contact_list' => 'setLaContactList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'la_id' => 'getLaId',
        'la_name' => 'getLaName',
        'la_full_name' => 'getLaFullName',
        'laurl' => 'getLaurl',
        'la_address' => 'getLaAddress',
        'address_list' => 'getAddressList',
        'la_phone_number' => 'getLaPhoneNumber',
        'phone_number_list' => 'getPhoneNumberList',
        'la_contact_list' => 'getLaContactList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['la_id'] = isset($data['la_id']) ? $data['la_id'] : null;
        $this->container['la_name'] = isset($data['la_name']) ? $data['la_name'] : null;
        $this->container['la_full_name'] = isset($data['la_full_name']) ? $data['la_full_name'] : null;
        $this->container['laurl'] = isset($data['laurl']) ? $data['laurl'] : null;
        $this->container['la_address'] = isset($data['la_address']) ? $data['la_address'] : null;
        $this->container['address_list'] = isset($data['address_list']) ? $data['address_list'] : null;
        $this->container['la_phone_number'] = isset($data['la_phone_number']) ? $data['la_phone_number'] : null;
        $this->container['phone_number_list'] = isset($data['phone_number_list']) ? $data['phone_number_list'] : null;
        $this->container['la_contact_list'] = isset($data['la_contact_list']) ? $data['la_contact_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['la_id'] === null) {
            $invalid_properties[] = "'la_id' can't be null";
        }
        if ($this->container['la_name'] === null) {
            $invalid_properties[] = "'la_name' can't be null";
        }
        if ($this->container['la_full_name'] === null) {
            $invalid_properties[] = "'la_full_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['la_id'] === null) {
            return false;
        }
        if ($this->container['la_name'] === null) {
            return false;
        }
        if ($this->container['la_full_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return isset($this->container['ref_id']) ? $this->container['ref_id'] : null;
    }

    /**
     * Sets ref_id
     * @param string $ref_id The GUID of the LA whose information this is.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets la_id
     * @return string
     */
    public function getLaId()
    {
        return isset($this->container['la_id']) ? $this->container['la_id'] : null;
    }

    /**
     * Sets la_id
     * @param string $la_id
     * @return $this
     */
    public function setLaId($la_id)
    {
        $this->container['la_id'] = $la_id;

        return $this;
    }

    /**
     * Gets la_name
     * @return string
     */
    public function getLaName()
    {
        return isset($this->container['la_name']) ? $this->container['la_name'] : null;
    }

    /**
     * Sets la_name
     * @param string $la_name
     * @return $this
     */
    public function setLaName($la_name)
    {
        $this->container['la_name'] = $la_name;

        return $this;
    }

    /**
     * Gets la_full_name
     * @return string
     */
    public function getLaFullName()
    {
        return isset($this->container['la_full_name']) ? $this->container['la_full_name'] : null;
    }

    /**
     * Sets la_full_name
     * @param string $la_full_name The LA&#039;s full name.
     * @return $this
     */
    public function setLaFullName($la_full_name)
    {
        $this->container['la_full_name'] = $la_full_name;

        return $this;
    }

    /**
     * Gets laurl
     * @return string
     */
    public function getLaurl()
    {
        return isset($this->container['laurl']) ? $this->container['laurl'] : null;
    }

    /**
     * Sets laurl
     * @param string $laurl URL for the main LA website.
     * @return $this
     */
    public function setLaurl($laurl)
    {
        $this->container['laurl'] = $laurl;

        return $this;
    }

    /**
     * Gets la_address
     * @return \DataExchange\SIFUK20\Models\LAAddress
     */
    public function getLaAddress()
    {
        return isset($this->container['la_address']) ? $this->container['la_address'] : null;
    }

    /**
     * Sets la_address
     * @param \DataExchange\SIFUK20\Models\LAAddress $la_address
     * @return $this
     */
    public function setLaAddress($la_address)
    {
        $this->container['la_address'] = $la_address;

        return $this;
    }

    /**
     * Gets address_list
     * @return string[]
     */
    public function getAddressList()
    {
        return isset($this->container['address_list']) ? $this->container['address_list'] : null;
    }

    /**
     * Sets address_list
     * @param string[] $address_list A list of the LA&#039;s other addresses, if any.
     * @return $this
     */
    public function setAddressList($address_list)
    {
        $this->container['address_list'] = $address_list;

        return $this;
    }

    /**
     * Gets la_phone_number
     * @return \DataExchange\SIFUK20\Models\LAPhoneNumber
     */
    public function getLaPhoneNumber()
    {
        return isset($this->container['la_phone_number']) ? $this->container['la_phone_number'] : null;
    }

    /**
     * Sets la_phone_number
     * @param \DataExchange\SIFUK20\Models\LAPhoneNumber $la_phone_number
     * @return $this
     */
    public function setLaPhoneNumber($la_phone_number)
    {
        $this->container['la_phone_number'] = $la_phone_number;

        return $this;
    }

    /**
     * Gets phone_number_list
     * @return string[]
     */
    public function getPhoneNumberList()
    {
        return isset($this->container['phone_number_list']) ? $this->container['phone_number_list'] : null;
    }

    /**
     * Sets phone_number_list
     * @param string[] $phone_number_list A list of the LA&#039;s other phone number(s).
     * @return $this
     */
    public function setPhoneNumberList($phone_number_list)
    {
        $this->container['phone_number_list'] = $phone_number_list;

        return $this;
    }

    /**
     * Gets la_contact_list
     * @return \DataExchange\SIFUK20\Models\Contact[]
     */
    public function getLaContactList()
    {
        return isset($this->container['la_contact_list']) ? $this->container['la_contact_list'] : null;
    }

    /**
     * Sets la_contact_list
     * @param \DataExchange\SIFUK20\Models\Contact[] $la_contact_list A list of contacts within the LA.
     * @return $this
     */
    public function setLaContactList($la_contact_list)
    {
        $this->container['la_contact_list'] = $la_contact_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


