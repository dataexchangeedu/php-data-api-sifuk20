<?php
/**
 * PersonalInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * PersonalInformation Class Doc Comment
 *
 * @category    Class
 * @description This element contains basic personal and demographic information related to a person. This element is part of all &amp;quot;personal&amp;quot; objects, including LearnerPersonal, WorkforcePersonal, and ContactPersonal.
 * @package     DataExchange\SIFUK20
 * @author      DataExchange team
 * @link        https://developer.dataexchange.education
 */
class PersonalInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    const IS_ARRAY = false;
    const ITEMS = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PersonalInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => '\DataExchange\SIFUK20\Models\Name',
        'other_names' => '\DataExchange\SIFUK20\Models\OtherNames',
        'demographics' => '\DataExchange\SIFUK20\Models\Demographics',
        'email' => '\DataExchange\SIFUK20\Models\Email',
        'other_email_list' => '\DataExchange\SIFUK20\Models\Email1[]',
        'address' => '\DataExchange\SIFUK20\Models\Address',
        'other_address_list' => 'string[]',
        'phone_number' => '\DataExchange\SIFUK20\Models\PhoneNumber',
        'other_phone_number_list' => 'string[]',
        'electronic_id_list' => '\DataExchange\SIFUK20\Models\ElectronicId[]',
        'other_id_list' => '\DataExchange\SIFUK20\Models\OtherId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'other_names' => null,
        'demographics' => null,
        'email' => null,
        'other_email_list' => null,
        'address' => null,
        'other_address_list' => null,
        'phone_number' => null,
        'other_phone_number_list' => null,
        'electronic_id_list' => null,
        'other_id_list' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'other_names' => 'OtherNames',
        'demographics' => 'Demographics',
        'email' => 'Email',
        'other_email_list' => 'OtherEmailList',
        'address' => 'Address',
        'other_address_list' => 'OtherAddressList',
        'phone_number' => 'PhoneNumber',
        'other_phone_number_list' => 'OtherPhoneNumberList',
        'electronic_id_list' => 'ElectronicIdList',
        'other_id_list' => 'OtherIdList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'other_names' => 'setOtherNames',
        'demographics' => 'setDemographics',
        'email' => 'setEmail',
        'other_email_list' => 'setOtherEmailList',
        'address' => 'setAddress',
        'other_address_list' => 'setOtherAddressList',
        'phone_number' => 'setPhoneNumber',
        'other_phone_number_list' => 'setOtherPhoneNumberList',
        'electronic_id_list' => 'setElectronicIdList',
        'other_id_list' => 'setOtherIdList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'other_names' => 'getOtherNames',
        'demographics' => 'getDemographics',
        'email' => 'getEmail',
        'other_email_list' => 'getOtherEmailList',
        'address' => 'getAddress',
        'other_address_list' => 'getOtherAddressList',
        'phone_number' => 'getPhoneNumber',
        'other_phone_number_list' => 'getOtherPhoneNumberList',
        'electronic_id_list' => 'getElectronicIdList',
        'other_id_list' => 'getOtherIdList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['other_names'] = isset($data['other_names']) ? $data['other_names'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['other_email_list'] = isset($data['other_email_list']) ? $data['other_email_list'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['other_address_list'] = isset($data['other_address_list']) ? $data['other_address_list'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['other_phone_number_list'] = isset($data['other_phone_number_list']) ? $data['other_phone_number_list'] : null;
        $this->container['electronic_id_list'] = isset($data['electronic_id_list']) ? $data['electronic_id_list'] : null;
        $this->container['other_id_list'] = isset($data['other_id_list']) ? $data['other_id_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     * @return \DataExchange\SIFUK20\Models\Name
     */
    public function getName()
    {
        return isset($this->container['name']) ? $this->container['name'] : null;
    }

    /**
     * Sets name
     * @param \DataExchange\SIFUK20\Models\Name $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets other_names
     * @return \DataExchange\SIFUK20\Models\OtherNames
     */
    public function getOtherNames()
    {
        return isset($this->container['other_names']) ? $this->container['other_names'] : null;
    }

    /**
     * Sets other_names
     * @param \DataExchange\SIFUK20\Models\OtherNames $other_names
     * @return $this
     */
    public function setOtherNames($other_names)
    {
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets demographics
     * @return \DataExchange\SIFUK20\Models\Demographics
     */
    public function getDemographics()
    {
        return isset($this->container['demographics']) ? $this->container['demographics'] : null;
    }

    /**
     * Sets demographics
     * @param \DataExchange\SIFUK20\Models\Demographics $demographics
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets email
     * @return \DataExchange\SIFUK20\Models\Email
     */
    public function getEmail()
    {
        return isset($this->container['email']) ? $this->container['email'] : null;
    }

    /**
     * Sets email
     * @param \DataExchange\SIFUK20\Models\Email $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets other_email_list
     * @return \DataExchange\SIFUK20\Models\Email1[]
     */
    public function getOtherEmailList()
    {
        return isset($this->container['other_email_list']) ? $this->container['other_email_list'] : null;
    }

    /**
     * Sets other_email_list
     * @param \DataExchange\SIFUK20\Models\Email1[] $other_email_list The person&#039;s other e-mail address(es).
     * @return $this
     */
    public function setOtherEmailList($other_email_list)
    {
        $this->container['other_email_list'] = $other_email_list;

        return $this;
    }

    /**
     * Gets address
     * @return \DataExchange\SIFUK20\Models\Address
     */
    public function getAddress()
    {
        return isset($this->container['address']) ? $this->container['address'] : null;
    }

    /**
     * Sets address
     * @param \DataExchange\SIFUK20\Models\Address $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets other_address_list
     * @return string[]
     */
    public function getOtherAddressList()
    {
        return isset($this->container['other_address_list']) ? $this->container['other_address_list'] : null;
    }

    /**
     * Sets other_address_list
     * @param string[] $other_address_list The person&#039;s other address(es).
     * @return $this
     */
    public function setOtherAddressList($other_address_list)
    {
        $this->container['other_address_list'] = $other_address_list;

        return $this;
    }

    /**
     * Gets phone_number
     * @return \DataExchange\SIFUK20\Models\PhoneNumber
     */
    public function getPhoneNumber()
    {
        return isset($this->container['phone_number']) ? $this->container['phone_number'] : null;
    }

    /**
     * Sets phone_number
     * @param \DataExchange\SIFUK20\Models\PhoneNumber $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets other_phone_number_list
     * @return string[]
     */
    public function getOtherPhoneNumberList()
    {
        return isset($this->container['other_phone_number_list']) ? $this->container['other_phone_number_list'] : null;
    }

    /**
     * Sets other_phone_number_list
     * @param string[] $other_phone_number_list The person&#039;s other phone number(s).
     * @return $this
     */
    public function setOtherPhoneNumberList($other_phone_number_list)
    {
        $this->container['other_phone_number_list'] = $other_phone_number_list;

        return $this;
    }

    /**
     * Gets electronic_id_list
     * @return \DataExchange\SIFUK20\Models\ElectronicId[]
     */
    public function getElectronicIdList()
    {
        return isset($this->container['electronic_id_list']) ? $this->container['electronic_id_list'] : null;
    }

    /**
     * Sets electronic_id_list
     * @param \DataExchange\SIFUK20\Models\ElectronicId[] $electronic_id_list Electronic identifier(s) associated with this person.
     * @return $this
     */
    public function setElectronicIdList($electronic_id_list)
    {
        $this->container['electronic_id_list'] = $electronic_id_list;

        return $this;
    }

    /**
     * Gets other_id_list
     * @return \DataExchange\SIFUK20\Models\OtherId[]
     */
    public function getOtherIdList()
    {
        return isset($this->container['other_id_list']) ? $this->container['other_id_list'] : null;
    }

    /**
     * Sets other_id_list
     * @param \DataExchange\SIFUK20\Models\OtherId[] $other_id_list
     * @return $this
     */
    public function setOtherIdList($other_id_list)
    {
        $this->container['other_id_list'] = $other_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object in JSON format
     * @return string
     */
    public function toJson()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataExchange\SIFUK20\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXml()
    {
        $dom = new \DOMDocument();

        $node = $dom->importNode($this->toXmlNode(), true);

        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $xml = $dom->saveXML($node);

        unset($node);
        unset($dom);

        return $xml;
    }

    /**
     * Gets the string presentation of the object in XML format
     * @return string
     */
    public function toXmlNode()
    {
        $dom = new \DOMDocument();
        $elem = $dom->createElement(self::$swaggerModelName);

        foreach (self::attributeMap() as $key => $property) {
            $value = $this->{$this->getters()[$key]}();

            if (is_null($value)) {
                // Do nothing
                continue;
            }

            if ($property[0] === '@') {
                $elem->setAttribute(substr($property, 1), $value);
            } else {
                if (is_scalar($value)) {
                    $elem->appendChild($dom->createElement($property, $value));
                } elseif ($value instanceof \DateTime) {
                    $format = $this->swaggerFormats()[$key];
                    $str = ($format === 'date') ? $value->format('Y-m-d') : $value->format(\DateTime::ATOM);
                    $elem->appendChild($dom->createElement($property, $str));
                } elseif (is_array($value)) {
                    if (is_scalar($value)) {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    } else {
                        // TODO
                        /*
                        foreach ($value as $property => $value) {
                            $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                            // $elem->appendChild($dom->createElement($property, (string) $value));
                        }
                        */
                    }
                } elseif (is_object($value)) {
                    $elem->appendChild($dom->importNode($value->toXmlNode(), true));
                } else {
                    $elem->appendChild($dom->createElement($property, (string) $value));
                }
            }
        }

        if (self::IS_ARRAY) {
            foreach ($this->container as $key => $item) {
                $elem->appendChild($dom->importNode($item->toXmlNode(), true));
            }
        }

        return $elem;
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        return $this->toXml();
    }
}


