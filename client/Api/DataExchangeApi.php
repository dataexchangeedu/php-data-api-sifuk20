<?php
/**
 * DataExchangeApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */

/**
 * SIF (UK), v.2.0
 *
 * OpenAPI specification for the SIF (UK), v.2.0 data model. Generated by DataExchange (dataexchange.educaton) at 2017-08-13 19:14:57
 *
 * OpenAPI spec version: 1.0.0.20170813191457
 * Contact: support@dataexchange.education
 * Generated by: https://developer.dataexchange.education
 *
 */

/**
 * NOTE: This class is auto generated.
 * https://developer.dataexchange.education
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use DataExchange\SIFUK20\ApiException;
use DataExchange\SIFUK20\Configuration;
use DataExchange\SIFUK20\HeaderSelector;
use DataExchange\SIFUK20\ObjectSerializer;

/**
 * DataExchangeApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   DataExchange team
 * @link     https://developer.dataexchange.education
 */
class DataExchangeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAssessmentLearnerSets
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentLearnerSets($zone_id, $body)
    {
        list($response) = $this->createAssessmentLearnerSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentLearnerSetsWithHttpInfo
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentLearnerSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentLearnerSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentLearnerSetsAsync
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentLearnerSetsAsync($zone_id, $body)
    {
        return $this->createAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentLearnerSetsAsyncWithHttpInfo
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentLearnerSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentLearnerSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentLearnerSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentLearnerSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentLearnerSets');
        }

        $resourcePath = '/AssessmentLearnerSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentResponseComponentGroups
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponentGroups($zone_id, $body)
    {
        list($response) = $this->createAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResponseComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponentGroupsAsync
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResponseComponentGroupsAsync($zone_id, $body)
    {
        return $this->createAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentResponseComponentGroupsAsyncWithHttpInfo
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResponseComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentResponseComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentResponseComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentResponseComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponentGroups');
        }

        $resourcePath = '/AssessmentResponseComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentResponseComponents
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponents($zone_id, $body)
    {
        list($response) = $this->createAssessmentResponseComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResponseComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponentsAsync
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResponseComponentsAsync($zone_id, $body)
    {
        return $this->createAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentResponseComponentsAsyncWithHttpInfo
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResponseComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentResponseComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentResponseComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentResponseComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponents');
        }

        $resourcePath = '/AssessmentResponseComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentResultComponentGroups
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponentGroups($zone_id, $body)
    {
        list($response) = $this->createAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponentGroupsAsync
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultComponentGroupsAsync($zone_id, $body)
    {
        return $this->createAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentResultComponentGroupsAsyncWithHttpInfo
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentResultComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentResultComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentResultComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponentGroups');
        }

        $resourcePath = '/AssessmentResultComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentResultComponents
     *
     * Create multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponents($zone_id, $body)
    {
        list($response) = $this->createAssessmentResultComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentsWithHttpInfo
     *
     * Create multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponentsAsync
     *
     * Create multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultComponentsAsync($zone_id, $body)
    {
        return $this->createAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentResultComponentsAsyncWithHttpInfo
     *
     * Create multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentResultComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentResultComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentResultComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponents');
        }

        $resourcePath = '/AssessmentResultComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentResultGradeSets
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultGradeSets($zone_id, $body)
    {
        list($response) = $this->createAssessmentResultGradeSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentResultGradeSetsWithHttpInfo
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultGradeSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultGradeSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultGradeSetsAsync
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultGradeSetsAsync($zone_id, $body)
    {
        return $this->createAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentResultGradeSetsAsyncWithHttpInfo
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentResultGradeSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentResultGradeSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentResultGradeSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentResultGradeSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultGradeSets');
        }

        $resourcePath = '/AssessmentResultGradeSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssessmentSessions
     *
     * Create multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentSessions($zone_id, $body)
    {
        list($response) = $this->createAssessmentSessionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createAssessmentSessionsWithHttpInfo
     *
     * Create multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentSessionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentSessionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssessmentSessionsAsync
     *
     * Create multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentSessionsAsync($zone_id, $body)
    {
        return $this->createAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAssessmentSessionsAsyncWithHttpInfo
     *
     * Create multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createAssessmentSessionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createAssessmentSessions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssessmentSessionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createAssessmentSessions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentSessions');
        }

        $resourcePath = '/AssessmentSessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createContactPersonals
     *
     * Create multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createContactPersonals($zone_id, $body)
    {
        list($response) = $this->createContactPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createContactPersonalsWithHttpInfo
     *
     * Create multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContactPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createContactPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContactPersonalsAsync
     *
     * Create multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContactPersonalsAsync($zone_id, $body)
    {
        return $this->createContactPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createContactPersonalsAsyncWithHttpInfo
     *
     * Create multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContactPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createContactPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createContactPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContactPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createContactPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createContactPersonals');
        }

        $resourcePath = '/ContactPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCycles
     *
     * Create multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createCycles($zone_id, $body)
    {
        list($response) = $this->createCyclesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createCyclesWithHttpInfo
     *
     * Create multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCyclesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createCyclesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCyclesAsync
     *
     * Create multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCyclesAsync($zone_id, $body)
    {
        return $this->createCyclesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCyclesAsyncWithHttpInfo
     *
     * Create multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCyclesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createCyclesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createCycles'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCyclesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createCycles');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createCycles');
        }

        $resourcePath = '/Cycles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIdentitys
     *
     * Create multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createIdentitys($zone_id, $body)
    {
        list($response) = $this->createIdentitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createIdentitysWithHttpInfo
     *
     * Create multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createIdentitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createIdentitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIdentitysAsync
     *
     * Create multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIdentitysAsync($zone_id, $body)
    {
        return $this->createIdentitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createIdentitysAsyncWithHttpInfo
     *
     * Create multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIdentitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createIdentitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createIdentitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createIdentitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createIdentitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createIdentitys');
        }

        $resourcePath = '/Identitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJunctions
     *
     * Create multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createJunctions($zone_id, $body)
    {
        list($response) = $this->createJunctionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createJunctionsWithHttpInfo
     *
     * Create multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJunctionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createJunctionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJunctionsAsync
     *
     * Create multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJunctionsAsync($zone_id, $body)
    {
        return $this->createJunctionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createJunctionsAsyncWithHttpInfo
     *
     * Create multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJunctionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createJunctionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createJunctions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createJunctionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createJunctions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createJunctions');
        }

        $resourcePath = '/Junctions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLAInfos
     *
     * Create multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLAInfos($zone_id, $body)
    {
        list($response) = $this->createLAInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLAInfosWithHttpInfo
     *
     * Create multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLAInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLAInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLAInfosAsync
     *
     * Create multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLAInfosAsync($zone_id, $body)
    {
        return $this->createLAInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLAInfosAsyncWithHttpInfo
     *
     * Create multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLAInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLAInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLAInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLAInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLAInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLAInfos');
        }

        $resourcePath = '/LAInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerAssessmentResponseSets
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResponseSets($zone_id, $body)
    {
        list($response) = $this->createLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAssessmentResponseSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResponseSetsAsync
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAssessmentResponseSetsAsync($zone_id, $body)
    {
        return $this->createLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerAssessmentResponseSetsAsyncWithHttpInfo
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAssessmentResponseSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerAssessmentResponseSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerAssessmentResponseSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerAssessmentResponseSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResponseSets');
        }

        $resourcePath = '/LearnerAssessmentResponseSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerAssessmentResults
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResults($zone_id, $body)
    {
        list($response) = $this->createLearnerAssessmentResultsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResultsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResultsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAssessmentResultsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResultsAsync
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAssessmentResultsAsync($zone_id, $body)
    {
        return $this->createLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerAssessmentResultsAsyncWithHttpInfo
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAssessmentResultsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerAssessmentResults'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerAssessmentResultsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerAssessmentResults');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResults');
        }

        $resourcePath = '/LearnerAssessmentResults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerAttendanceSummarys
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAttendanceSummarys($zone_id, $body)
    {
        list($response) = $this->createLearnerAttendanceSummarysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerAttendanceSummarysWithHttpInfo
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendanceSummarysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAttendanceSummarysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendanceSummarysAsync
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAttendanceSummarysAsync($zone_id, $body)
    {
        return $this->createLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerAttendanceSummarysAsyncWithHttpInfo
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAttendanceSummarysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerAttendanceSummarys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerAttendanceSummarysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerAttendanceSummarys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendanceSummarys');
        }

        $resourcePath = '/LearnerAttendanceSummarys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerAttendances
     *
     * Create multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAttendances($zone_id, $body)
    {
        list($response) = $this->createLearnerAttendancesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerAttendancesWithHttpInfo
     *
     * Create multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendancesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAttendancesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendancesAsync
     *
     * Create multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAttendancesAsync($zone_id, $body)
    {
        return $this->createLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerAttendancesAsyncWithHttpInfo
     *
     * Create multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerAttendancesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerAttendances'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerAttendancesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerAttendances');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendances');
        }

        $resourcePath = '/LearnerAttendances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerBehaviourIncidents
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerBehaviourIncidents($zone_id, $body)
    {
        list($response) = $this->createLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerBehaviourIncidentsWithHttpInfo
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerBehaviourIncidentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerBehaviourIncidentsAsync
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerBehaviourIncidentsAsync($zone_id, $body)
    {
        return $this->createLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerBehaviourIncidentsAsyncWithHttpInfo
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerBehaviourIncidentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerBehaviourIncidents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerBehaviourIncidentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerBehaviourIncidents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerBehaviourIncidents');
        }

        $resourcePath = '/LearnerBehaviourIncidents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerContacts
     *
     * Create multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerContacts($zone_id, $body)
    {
        list($response) = $this->createLearnerContactsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerContactsWithHttpInfo
     *
     * Create multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerContactsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerContactsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerContactsAsync
     *
     * Create multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerContactsAsync($zone_id, $body)
    {
        return $this->createLearnerContactsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerContactsAsyncWithHttpInfo
     *
     * Create multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerContactsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerContactsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerContacts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerContactsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerContacts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerContacts');
        }

        $resourcePath = '/LearnerContacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerEntitlements
     *
     * Create multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerEntitlements($zone_id, $body)
    {
        list($response) = $this->createLearnerEntitlementsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerEntitlementsWithHttpInfo
     *
     * Create multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerEntitlementsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerEntitlementsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerEntitlementsAsync
     *
     * Create multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerEntitlementsAsync($zone_id, $body)
    {
        return $this->createLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerEntitlementsAsyncWithHttpInfo
     *
     * Create multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerEntitlementsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerEntitlements'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerEntitlementsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerEntitlements');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerEntitlements');
        }

        $resourcePath = '/LearnerEntitlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerExclusions
     *
     * Create multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerExclusions($zone_id, $body)
    {
        list($response) = $this->createLearnerExclusionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerExclusionsWithHttpInfo
     *
     * Create multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerExclusionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerExclusionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerExclusionsAsync
     *
     * Create multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerExclusionsAsync($zone_id, $body)
    {
        return $this->createLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerExclusionsAsyncWithHttpInfo
     *
     * Create multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerExclusionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerExclusions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerExclusionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerExclusions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerExclusions');
        }

        $resourcePath = '/LearnerExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerGroupEnrolments
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerGroupEnrolments($zone_id, $body)
    {
        list($response) = $this->createLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerGroupEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerGroupEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerGroupEnrolmentsAsync
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerGroupEnrolmentsAsync($zone_id, $body)
    {
        return $this->createLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerGroupEnrolmentsAsyncWithHttpInfo
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerGroupEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerGroupEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerGroupEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerGroupEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerGroupEnrolments');
        }

        $resourcePath = '/LearnerGroupEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerPersonals
     *
     * Create multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerPersonals($zone_id, $body)
    {
        list($response) = $this->createLearnerPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerPersonalsWithHttpInfo
     *
     * Create multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerPersonalsAsync
     *
     * Create multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerPersonalsAsync($zone_id, $body)
    {
        return $this->createLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerPersonalsAsyncWithHttpInfo
     *
     * Create multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerPersonals');
        }

        $resourcePath = '/LearnerPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerSchoolEnrolments
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerSchoolEnrolments($zone_id, $body)
    {
        list($response) = $this->createLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerSchoolEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerSchoolEnrolmentsAsync
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerSchoolEnrolmentsAsync($zone_id, $body)
    {
        return $this->createLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerSchoolEnrolmentsAsyncWithHttpInfo
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerSchoolEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerSchoolEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerSchoolEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerSchoolEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSchoolEnrolments');
        }

        $resourcePath = '/LearnerSchoolEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLearnerSpecialNeedss
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerSpecialNeedss($zone_id, $body)
    {
        list($response) = $this->createLearnerSpecialNeedssWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLearnerSpecialNeedssWithHttpInfo
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSpecialNeedssWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerSpecialNeedssRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLearnerSpecialNeedssAsync
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerSpecialNeedssAsync($zone_id, $body)
    {
        return $this->createLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLearnerSpecialNeedssAsyncWithHttpInfo
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLearnerSpecialNeedssRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLearnerSpecialNeedss'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLearnerSpecialNeedssRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLearnerSpecialNeedss');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSpecialNeedss');
        }

        $resourcePath = '/LearnerSpecialNeedss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLessons
     *
     * Create multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLessons($zone_id, $body)
    {
        list($response) = $this->createLessonsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createLessonsWithHttpInfo
     *
     * Create multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLessonsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLessonsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLessonsAsync
     *
     * Create multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLessonsAsync($zone_id, $body)
    {
        return $this->createLessonsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLessonsAsyncWithHttpInfo
     *
     * Create multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLessonsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createLessonsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createLessons'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLessonsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createLessons');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLessons');
        }

        $resourcePath = '/Lessons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNonTeachingActivitys
     *
     * Create multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createNonTeachingActivitys($zone_id, $body)
    {
        list($response) = $this->createNonTeachingActivitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createNonTeachingActivitysWithHttpInfo
     *
     * Create multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNonTeachingActivitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createNonTeachingActivitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNonTeachingActivitysAsync
     *
     * Create multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNonTeachingActivitysAsync($zone_id, $body)
    {
        return $this->createNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createNonTeachingActivitysAsyncWithHttpInfo
     *
     * Create multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createNonTeachingActivitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createNonTeachingActivitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNonTeachingActivitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createNonTeachingActivitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createNonTeachingActivitys');
        }

        $resourcePath = '/NonTeachingActivitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPersonDietaryPreferences
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createPersonDietaryPreferences($zone_id, $body)
    {
        list($response) = $this->createPersonDietaryPreferencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createPersonDietaryPreferencesWithHttpInfo
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonDietaryPreferencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createPersonDietaryPreferencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPersonDietaryPreferencesAsync
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPersonDietaryPreferencesAsync($zone_id, $body)
    {
        return $this->createPersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPersonDietaryPreferencesAsyncWithHttpInfo
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createPersonDietaryPreferencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createPersonDietaryPreferences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPersonDietaryPreferencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createPersonDietaryPreferences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonDietaryPreferences');
        }

        $resourcePath = '/PersonDietaryPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPersonPictures
     *
     * Create multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createPersonPictures($zone_id, $body)
    {
        list($response) = $this->createPersonPicturesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createPersonPicturesWithHttpInfo
     *
     * Create multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonPicturesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createPersonPicturesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPersonPicturesAsync
     *
     * Create multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPersonPicturesAsync($zone_id, $body)
    {
        return $this->createPersonPicturesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPersonPicturesAsyncWithHttpInfo
     *
     * Create multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPersonPicturesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createPersonPicturesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createPersonPictures'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPersonPicturesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createPersonPictures');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonPictures');
        }

        $resourcePath = '/PersonPictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSchoolDiaryEntrys
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolDiaryEntrys($zone_id, $body)
    {
        list($response) = $this->createSchoolDiaryEntrysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createSchoolDiaryEntrysWithHttpInfo
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolDiaryEntrysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolDiaryEntrysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSchoolDiaryEntrysAsync
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolDiaryEntrysAsync($zone_id, $body)
    {
        return $this->createSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSchoolDiaryEntrysAsyncWithHttpInfo
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolDiaryEntrysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createSchoolDiaryEntrys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSchoolDiaryEntrysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createSchoolDiaryEntrys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolDiaryEntrys');
        }

        $resourcePath = '/SchoolDiaryEntrys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSchoolGroupTypes
     *
     * Create multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolGroupTypes($zone_id, $body)
    {
        list($response) = $this->createSchoolGroupTypesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createSchoolGroupTypesWithHttpInfo
     *
     * Create multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupTypesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolGroupTypesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSchoolGroupTypesAsync
     *
     * Create multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolGroupTypesAsync($zone_id, $body)
    {
        return $this->createSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSchoolGroupTypesAsyncWithHttpInfo
     *
     * Create multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolGroupTypesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createSchoolGroupTypes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSchoolGroupTypesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createSchoolGroupTypes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroupTypes');
        }

        $resourcePath = '/SchoolGroupTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSchoolGroups
     *
     * Create multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolGroups($zone_id, $body)
    {
        list($response) = $this->createSchoolGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createSchoolGroupsWithHttpInfo
     *
     * Create multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSchoolGroupsAsync
     *
     * Create multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolGroupsAsync($zone_id, $body)
    {
        return $this->createSchoolGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSchoolGroupsAsyncWithHttpInfo
     *
     * Create multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createSchoolGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSchoolGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createSchoolGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroups');
        }

        $resourcePath = '/SchoolGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSchoolInfos
     *
     * Create multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolInfos($zone_id, $body)
    {
        list($response) = $this->createSchoolInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createSchoolInfosWithHttpInfo
     *
     * Create multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSchoolInfosAsync
     *
     * Create multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolInfosAsync($zone_id, $body)
    {
        return $this->createSchoolInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSchoolInfosAsyncWithHttpInfo
     *
     * Create multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchoolInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createSchoolInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createSchoolInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSchoolInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createSchoolInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolInfos');
        }

        $resourcePath = '/SchoolInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createScopes
     *
     * Create multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createScopes($zone_id, $body)
    {
        list($response) = $this->createScopesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createScopesWithHttpInfo
     *
     * Create multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createScopesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createScopesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createScopesAsync
     *
     * Create multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createScopesAsync($zone_id, $body)
    {
        return $this->createScopesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createScopesAsyncWithHttpInfo
     *
     * Create multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createScopesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createScopesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createScopes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createScopesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createScopes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createScopes');
        }

        $resourcePath = '/Scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTTRooms
     *
     * Create multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTRooms($zone_id, $body)
    {
        list($response) = $this->createTTRoomsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTTRoomsWithHttpInfo
     *
     * Create multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTRoomsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTRoomsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTTRoomsAsync
     *
     * Create multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTRoomsAsync($zone_id, $body)
    {
        return $this->createTTRoomsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTTRoomsAsyncWithHttpInfo
     *
     * Create multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTRoomsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTRoomsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTTRooms'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTTRoomsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTTRooms');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTRooms');
        }

        $resourcePath = '/TTRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTTSites
     *
     * Create multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTSites($zone_id, $body)
    {
        list($response) = $this->createTTSitesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTTSitesWithHttpInfo
     *
     * Create multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSitesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTSitesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTTSitesAsync
     *
     * Create multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTSitesAsync($zone_id, $body)
    {
        return $this->createTTSitesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTTSitesAsyncWithHttpInfo
     *
     * Create multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTSitesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTSitesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTTSites'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTTSitesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTTSites');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSites');
        }

        $resourcePath = '/TTSites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTTSubjects
     *
     * Create multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTSubjects($zone_id, $body)
    {
        list($response) = $this->createTTSubjectsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTTSubjectsWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSubjectsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTSubjectsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTTSubjectsAsync
     *
     * Create multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTSubjectsAsync($zone_id, $body)
    {
        return $this->createTTSubjectsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTTSubjectsAsyncWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTSubjectsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTSubjectsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTTSubjects'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTTSubjectsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTTSubjects');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSubjects');
        }

        $resourcePath = '/TTSubjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTTTeachers
     *
     * Create multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTTeachers($zone_id, $body)
    {
        list($response) = $this->createTTTeachersWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTTTeachersWithHttpInfo
     *
     * Create multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTTeachersWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTTeachersRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTTTeachersAsync
     *
     * Create multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTTeachersAsync($zone_id, $body)
    {
        return $this->createTTTeachersAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTTTeachersAsyncWithHttpInfo
     *
     * Create multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTTTeachersAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTTTeachersRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTTTeachers'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTTTeachersRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTTTeachers');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTTeachers');
        }

        $resourcePath = '/TTTeachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTeachingGroups
     *
     * Create multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTeachingGroups($zone_id, $body)
    {
        list($response) = $this->createTeachingGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTeachingGroupsWithHttpInfo
     *
     * Create multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTeachingGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTeachingGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTeachingGroupsAsync
     *
     * Create multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTeachingGroupsAsync($zone_id, $body)
    {
        return $this->createTeachingGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTeachingGroupsAsyncWithHttpInfo
     *
     * Create multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTeachingGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTeachingGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTeachingGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTeachingGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTeachingGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTeachingGroups');
        }

        $resourcePath = '/TeachingGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTermInfos
     *
     * Create multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTermInfos($zone_id, $body)
    {
        list($response) = $this->createTermInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createTermInfosWithHttpInfo
     *
     * Create multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTermInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTermInfosAsync
     *
     * Create multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermInfosAsync($zone_id, $body)
    {
        return $this->createTermInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTermInfosAsyncWithHttpInfo
     *
     * Create multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createTermInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createTermInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTermInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createTermInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTermInfos');
        }

        $resourcePath = '/TermInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkforceAbsences
     *
     * Create multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAbsences($zone_id, $body)
    {
        list($response) = $this->createWorkforceAbsencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createWorkforceAbsencesWithHttpInfo
     *
     * Create multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAbsencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceAbsencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkforceAbsencesAsync
     *
     * Create multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceAbsencesAsync($zone_id, $body)
    {
        return $this->createWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createWorkforceAbsencesAsyncWithHttpInfo
     *
     * Create multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceAbsencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createWorkforceAbsences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWorkforceAbsencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createWorkforceAbsences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAbsences');
        }

        $resourcePath = '/WorkforceAbsences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkforceAssignments
     *
     * Create multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAssignments($zone_id, $body)
    {
        list($response) = $this->createWorkforceAssignmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createWorkforceAssignmentsWithHttpInfo
     *
     * Create multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAssignmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceAssignmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkforceAssignmentsAsync
     *
     * Create multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceAssignmentsAsync($zone_id, $body)
    {
        return $this->createWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createWorkforceAssignmentsAsyncWithHttpInfo
     *
     * Create multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceAssignmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createWorkforceAssignments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWorkforceAssignmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createWorkforceAssignments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAssignments');
        }

        $resourcePath = '/WorkforceAssignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkforceContracts
     *
     * Create multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceContracts($zone_id, $body)
    {
        list($response) = $this->createWorkforceContractsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createWorkforceContractsWithHttpInfo
     *
     * Create multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceContractsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceContractsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkforceContractsAsync
     *
     * Create multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceContractsAsync($zone_id, $body)
    {
        return $this->createWorkforceContractsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createWorkforceContractsAsyncWithHttpInfo
     *
     * Create multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforceContractsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforceContractsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createWorkforceContracts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWorkforceContractsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createWorkforceContracts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceContracts');
        }

        $resourcePath = '/WorkforceContracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWorkforcePersonals
     *
     * Create multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforcePersonals($zone_id, $body)
    {
        list($response) = $this->createWorkforcePersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation createWorkforcePersonalsWithHttpInfo
     *
     * Create multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforcePersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforcePersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkforcePersonalsAsync
     *
     * Create multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforcePersonalsAsync($zone_id, $body)
    {
        return $this->createWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createWorkforcePersonalsAsyncWithHttpInfo
     *
     * Create multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifCreateResponse';
        $request = $this->createWorkforcePersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createWorkforcePersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWorkforcePersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling createWorkforcePersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforcePersonals');
        }

        $resourcePath = '/WorkforcePersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefId
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdAsync
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentLearnerSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentLearnerSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentLearnerSetByRefId');
        }

        $resourcePath = '/AssessmentLearnerSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentLearnerSets
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSets($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentLearnerSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetsWithHttpInfo
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentLearnerSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSetsAsync
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentLearnerSetsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentLearnerSetsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentLearnerSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentLearnerSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentLearnerSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentLearnerSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentLearnerSets');
        }

        $resourcePath = '/AssessmentLearnerSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefId
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefIdAsync
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResponseComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentByRefId');
        }

        $resourcePath = '/AssessmentResponseComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefId
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefIdAsync
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResponseComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResponseComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResponseComponentGroups
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroups($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupsAsync
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentGroupsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResponseComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResponseComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResponseComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponentGroups');
        }

        $resourcePath = '/AssessmentResponseComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResponseComponents
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponents($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentResponseComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentsAsync
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResponseComponentsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResponseComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResponseComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResponseComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResponseComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponents');
        }

        $resourcePath = '/AssessmentResponseComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultComponentByRefId
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentByRefIdAsync
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultComponentByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultComponentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentByRefId');
        }

        $resourcePath = '/AssessmentResultComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefId
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefIdAsync
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResultComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultComponentGroups
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroups($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroupsAsync
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentGroupsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultComponentGroupsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponentGroups');
        }

        $resourcePath = '/AssessmentResultComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultComponents
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponents($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentResultComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentsAsync
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultComponentsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponents');
        }

        $resourcePath = '/AssessmentResultComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefId
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefIdAsync
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultGradeSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultGradeSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultGradeSetByRefId');
        }

        $resourcePath = '/AssessmentResultGradeSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentResultGradeSets
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSets($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentResultGradeSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetsWithHttpInfo
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultGradeSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSetsAsync
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultGradeSetsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentResultGradeSetsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentResultGradeSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentResultGradeSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentResultGradeSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentResultGradeSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultGradeSets');
        }

        $resourcePath = '/AssessmentResultGradeSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentSessionByRefId
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionByRefIdWithHttpInfo
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentSessionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessionByRefIdAsync
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentSessionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentSessionByRefIdAsyncWithHttpInfo
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentSessionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentSessionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentSessionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentSessionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentSessionByRefId');
        }

        $resourcePath = '/AssessmentSessions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssessmentSessions
     *
     * Delete multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessions($zone_id, $body)
    {
        list($response) = $this->deleteAssessmentSessionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionsWithHttpInfo
     *
     * Delete multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentSessionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessionsAsync
     *
     * Delete multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentSessionsAsync($zone_id, $body)
    {
        return $this->deleteAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAssessmentSessionsAsyncWithHttpInfo
     *
     * Delete multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteAssessmentSessionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteAssessmentSessions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssessmentSessionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteAssessmentSessions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentSessions');
        }

        $resourcePath = '/AssessmentSessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContactPersonalByRefId
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteContactPersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteContactPersonalByRefIdWithHttpInfo
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteContactPersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContactPersonalByRefIdAsync
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactPersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteContactPersonalByRefIdAsyncWithHttpInfo
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteContactPersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteContactPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContactPersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteContactPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteContactPersonalByRefId');
        }

        $resourcePath = '/ContactPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContactPersonals
     *
     * Delete multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteContactPersonals($zone_id, $body)
    {
        list($response) = $this->deleteContactPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteContactPersonalsWithHttpInfo
     *
     * Delete multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteContactPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContactPersonalsAsync
     *
     * Delete multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactPersonalsAsync($zone_id, $body)
    {
        return $this->deleteContactPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteContactPersonalsAsyncWithHttpInfo
     *
     * Delete multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteContactPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteContactPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContactPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteContactPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteContactPersonals');
        }

        $resourcePath = '/ContactPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCycleByRefId
     *
     * Delete Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteCycleByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteCycleByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteCycleByRefIdWithHttpInfo
     *
     * Delete Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCycleByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteCycleByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCycleByRefIdAsync
     *
     * Delete Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCycleByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCycleByRefIdAsyncWithHttpInfo
     *
     * Delete Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteCycleByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteCycleByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCycleByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteCycleByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteCycleByRefId');
        }

        $resourcePath = '/Cycles/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCycles
     *
     * Delete multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteCycles($zone_id, $body)
    {
        list($response) = $this->deleteCyclesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteCyclesWithHttpInfo
     *
     * Delete multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCyclesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteCyclesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCyclesAsync
     *
     * Delete multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCyclesAsync($zone_id, $body)
    {
        return $this->deleteCyclesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCyclesAsyncWithHttpInfo
     *
     * Delete multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCyclesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteCyclesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteCycles'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCyclesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteCycles');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteCycles');
        }

        $resourcePath = '/Cycles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIdentityByRefId
     *
     * Delete Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteIdentityByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteIdentityByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteIdentityByRefIdWithHttpInfo
     *
     * Delete Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentityByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteIdentityByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIdentityByRefIdAsync
     *
     * Delete Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIdentityByRefIdAsyncWithHttpInfo
     *
     * Delete Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteIdentityByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteIdentityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIdentityByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteIdentityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteIdentityByRefId');
        }

        $resourcePath = '/Identitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIdentitys
     *
     * Delete multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteIdentitys($zone_id, $body)
    {
        list($response) = $this->deleteIdentitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteIdentitysWithHttpInfo
     *
     * Delete multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteIdentitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIdentitysAsync
     *
     * Delete multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentitysAsync($zone_id, $body)
    {
        return $this->deleteIdentitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIdentitysAsyncWithHttpInfo
     *
     * Delete multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteIdentitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteIdentitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIdentitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteIdentitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteIdentitys');
        }

        $resourcePath = '/Identitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJunctionByRefId
     *
     * Delete Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteJunctionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteJunctionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteJunctionByRefIdWithHttpInfo
     *
     * Delete Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteJunctionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJunctionByRefIdAsync
     *
     * Delete Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJunctionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteJunctionByRefIdAsyncWithHttpInfo
     *
     * Delete Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteJunctionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteJunctionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteJunctionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteJunctionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteJunctionByRefId');
        }

        $resourcePath = '/Junctions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJunctions
     *
     * Delete multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteJunctions($zone_id, $body)
    {
        list($response) = $this->deleteJunctionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteJunctionsWithHttpInfo
     *
     * Delete multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteJunctionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJunctionsAsync
     *
     * Delete multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJunctionsAsync($zone_id, $body)
    {
        return $this->deleteJunctionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteJunctionsAsyncWithHttpInfo
     *
     * Delete multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJunctionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteJunctionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteJunctions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteJunctionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteJunctions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteJunctions');
        }

        $resourcePath = '/Junctions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLAInfoByRefId
     *
     * Delete LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLAInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLAInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLAInfoByRefIdWithHttpInfo
     *
     * Delete LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLAInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLAInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLAInfoByRefIdAsync
     *
     * Delete LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLAInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLAInfoByRefIdAsyncWithHttpInfo
     *
     * Delete LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLAInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLAInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLAInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLAInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLAInfoByRefId');
        }

        $resourcePath = '/LAInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLAInfos
     *
     * Delete multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLAInfos($zone_id, $body)
    {
        list($response) = $this->deleteLAInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLAInfosWithHttpInfo
     *
     * Delete multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLAInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLAInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLAInfosAsync
     *
     * Delete multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLAInfosAsync($zone_id, $body)
    {
        return $this->deleteLAInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLAInfosAsyncWithHttpInfo
     *
     * Delete multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLAInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLAInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLAInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLAInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLAInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLAInfos');
        }

        $resourcePath = '/LAInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefId
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdAsync
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResponseSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAssessmentResponseSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResponseSetByRefId');
        }

        $resourcePath = '/LearnerAssessmentResponseSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAssessmentResponseSets
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSets($zone_id, $body)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResponseSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsAsync
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResponseSetsAsync($zone_id, $body)
    {
        return $this->deleteLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsAsyncWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResponseSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAssessmentResponseSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAssessmentResponseSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAssessmentResponseSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResponseSets');
        }

        $resourcePath = '/LearnerAssessmentResponseSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefId
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResultByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdAsync
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResultByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAssessmentResultByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResultByRefId');
        }

        $resourcePath = '/LearnerAssessmentResults/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAssessmentResults
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResults($zone_id, $body)
    {
        list($response) = $this->deleteLearnerAssessmentResultsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResultsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResultsAsync
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResultsAsync($zone_id, $body)
    {
        return $this->deleteLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAssessmentResultsAsyncWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAssessmentResultsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAssessmentResults'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAssessmentResultsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAssessmentResults');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResults');
        }

        $resourcePath = '/LearnerAssessmentResults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAttendanceByRefId
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceByRefIdWithHttpInfo
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceByRefIdAsync
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAttendanceByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAttendanceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAttendanceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAttendanceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceByRefId');
        }

        $resourcePath = '/LearnerAttendances/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefId
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummaryByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefIdAsync
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceSummaryByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAttendanceSummaryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceSummaryByRefId');
        }

        $resourcePath = '/LearnerAttendanceSummarys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAttendanceSummarys
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummarys($zone_id, $body)
    {
        list($response) = $this->deleteLearnerAttendanceSummarysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummarysWithHttpInfo
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummarysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceSummarysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummarysAsync
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceSummarysAsync($zone_id, $body)
    {
        return $this->deleteLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAttendanceSummarysAsyncWithHttpInfo
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendanceSummarysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAttendanceSummarys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAttendanceSummarysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAttendanceSummarys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendanceSummarys');
        }

        $resourcePath = '/LearnerAttendanceSummarys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerAttendances
     *
     * Delete multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendances($zone_id, $body)
    {
        list($response) = $this->deleteLearnerAttendancesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendancesWithHttpInfo
     *
     * Delete multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendancesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendancesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendancesAsync
     *
     * Delete multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendancesAsync($zone_id, $body)
    {
        return $this->deleteLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerAttendancesAsyncWithHttpInfo
     *
     * Delete multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerAttendancesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerAttendances'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerAttendancesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerAttendances');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendances');
        }

        $resourcePath = '/LearnerAttendances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefId
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdAsync
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerBehaviourIncidentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerBehaviourIncidentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerBehaviourIncidentByRefId');
        }

        $resourcePath = '/LearnerBehaviourIncidents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerBehaviourIncidents
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidents($zone_id, $body)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsWithHttpInfo
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerBehaviourIncidentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsAsync
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerBehaviourIncidentsAsync($zone_id, $body)
    {
        return $this->deleteLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsAsyncWithHttpInfo
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerBehaviourIncidentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerBehaviourIncidents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerBehaviourIncidentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerBehaviourIncidents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerBehaviourIncidents');
        }

        $resourcePath = '/LearnerBehaviourIncidents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerContactByRefId
     *
     * Delete LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerContactByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerContactByRefIdWithHttpInfo
     *
     * Delete LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerContactByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContactByRefIdAsync
     *
     * Delete LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerContactByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerContactByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerContactByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerContactByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerContactByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerContactByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerContactByRefId');
        }

        $resourcePath = '/LearnerContacts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerContacts
     *
     * Delete multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerContacts($zone_id, $body)
    {
        list($response) = $this->deleteLearnerContactsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerContactsWithHttpInfo
     *
     * Delete multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerContactsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContactsAsync
     *
     * Delete multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerContactsAsync($zone_id, $body)
    {
        return $this->deleteLearnerContactsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerContactsAsyncWithHttpInfo
     *
     * Delete multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerContactsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerContactsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerContacts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerContactsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerContacts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerContacts');
        }

        $resourcePath = '/LearnerContacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerEntitlementByLearnerPersonalRefId
     *
     * Delete LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlementByLearnerPersonalRefId($zone_id, $learner_personal_ref_id)
    {
        list($response) = $this->deleteLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo
     *
     * Delete LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementByLearnerPersonalRefIdAsync
     *
     * Delete LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementByLearnerPersonalRefIdAsync($zone_id, $learner_personal_ref_id)
    {
        return $this->deleteLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo
     *
     * Delete LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerEntitlementByLearnerPersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerEntitlementByLearnerPersonalRefId');
        }
        // verify the required parameter 'learner_personal_ref_id' is set
        if ($learner_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $learner_personal_ref_id when calling deleteLearnerEntitlementByLearnerPersonalRefId');
        }

        $resourcePath = '/LearnerEntitlements/{LearnerPersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($learner_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'LearnerPersonalRefId' . '}', ObjectSerializer::toPathValue($learner_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerEntitlementByRefId
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlementByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementByRefIdWithHttpInfo
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementByRefIdAsync
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerEntitlementByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerEntitlementByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerEntitlementByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerEntitlementByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerEntitlementByRefId');
        }

        $resourcePath = '/LearnerEntitlements/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerEntitlementBySchoolInfoRefId
     *
     * Delete LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlementBySchoolInfoRefId($zone_id, $school_info_ref_id)
    {
        list($response) = $this->deleteLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementBySchoolInfoRefIdWithHttpInfo
     *
     * Delete LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementBySchoolInfoRefIdAsync
     *
     * Delete LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementBySchoolInfoRefIdAsync($zone_id, $school_info_ref_id)
    {
        return $this->deleteLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo
     *
     * Delete LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerEntitlementBySchoolInfoRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerEntitlementBySchoolInfoRefId');
        }
        // verify the required parameter 'school_info_ref_id' is set
        if ($school_info_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $school_info_ref_id when calling deleteLearnerEntitlementBySchoolInfoRefId');
        }

        $resourcePath = '/LearnerEntitlements/{SchoolInfoRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($school_info_ref_id !== null) {
            $resourcePath = str_replace('{' . 'SchoolInfoRefId' . '}', ObjectSerializer::toPathValue($school_info_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerEntitlements
     *
     * Delete multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlements($zone_id, $body)
    {
        list($response) = $this->deleteLearnerEntitlementsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementsWithHttpInfo
     *
     * Delete multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementsAsync
     *
     * Delete multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementsAsync($zone_id, $body)
    {
        return $this->deleteLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerEntitlementsAsyncWithHttpInfo
     *
     * Delete multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerEntitlementsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerEntitlements'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerEntitlementsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerEntitlements');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerEntitlements');
        }

        $resourcePath = '/LearnerEntitlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerExclusionByRefId
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionByRefIdWithHttpInfo
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerExclusionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusionByRefIdAsync
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerExclusionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerExclusionByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerExclusionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerExclusionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerExclusionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerExclusionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerExclusionByRefId');
        }

        $resourcePath = '/LearnerExclusions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerExclusions
     *
     * Delete multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusions($zone_id, $body)
    {
        list($response) = $this->deleteLearnerExclusionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionsWithHttpInfo
     *
     * Delete multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerExclusionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusionsAsync
     *
     * Delete multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerExclusionsAsync($zone_id, $body)
    {
        return $this->deleteLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerExclusionsAsyncWithHttpInfo
     *
     * Delete multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerExclusionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerExclusions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerExclusionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerExclusions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerExclusions');
        }

        $resourcePath = '/LearnerExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefId
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdAsync
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerGroupEnrolmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerGroupEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerGroupEnrolmentByRefId');
        }

        $resourcePath = '/LearnerGroupEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerGroupEnrolments
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolments($zone_id, $body)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerGroupEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsAsync
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerGroupEnrolmentsAsync($zone_id, $body)
    {
        return $this->deleteLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsAsyncWithHttpInfo
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerGroupEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerGroupEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerGroupEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerGroupEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerGroupEnrolments');
        }

        $resourcePath = '/LearnerGroupEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerPersonalByRefId
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalByRefIdWithHttpInfo
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerPersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonalByRefIdAsync
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerPersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerPersonalByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerPersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerPersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerPersonalByRefId');
        }

        $resourcePath = '/LearnerPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerPersonals
     *
     * Delete multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonals($zone_id, $body)
    {
        list($response) = $this->deleteLearnerPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalsWithHttpInfo
     *
     * Delete multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonalsAsync
     *
     * Delete multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerPersonalsAsync($zone_id, $body)
    {
        return $this->deleteLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerPersonalsAsyncWithHttpInfo
     *
     * Delete multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerPersonals');
        }

        $resourcePath = '/LearnerPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefId
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdAsync
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSchoolEnrolmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerSchoolEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSchoolEnrolmentByRefId');
        }

        $resourcePath = '/LearnerSchoolEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerSchoolEnrolments
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolments($zone_id, $body)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSchoolEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsAsync
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSchoolEnrolmentsAsync($zone_id, $body)
    {
        return $this->deleteLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsAsyncWithHttpInfo
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSchoolEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerSchoolEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerSchoolEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerSchoolEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSchoolEnrolments');
        }

        $resourcePath = '/LearnerSchoolEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefId
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedsByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefIdAsync
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSpecialNeedsByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefIdAsyncWithHttpInfo
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerSpecialNeedsByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSpecialNeedsByRefId');
        }

        $resourcePath = '/LearnerSpecialNeedss/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLearnerSpecialNeedss
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedss($zone_id, $body)
    {
        list($response) = $this->deleteLearnerSpecialNeedssWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedssWithHttpInfo
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedssWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSpecialNeedssRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedssAsync
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSpecialNeedssAsync($zone_id, $body)
    {
        return $this->deleteLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLearnerSpecialNeedssAsyncWithHttpInfo
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLearnerSpecialNeedssRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLearnerSpecialNeedss'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLearnerSpecialNeedssRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLearnerSpecialNeedss');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSpecialNeedss');
        }

        $resourcePath = '/LearnerSpecialNeedss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLessonByRefId
     *
     * Delete Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLessonByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteLessonByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteLessonByRefIdWithHttpInfo
     *
     * Delete Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLessonByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLessonByRefIdAsync
     *
     * Delete Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLessonByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLessonByRefIdAsyncWithHttpInfo
     *
     * Delete Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLessonByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLessonByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLessonByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLessonByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLessonByRefId');
        }

        $resourcePath = '/Lessons/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLessons
     *
     * Delete multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLessons($zone_id, $body)
    {
        list($response) = $this->deleteLessonsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteLessonsWithHttpInfo
     *
     * Delete multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLessonsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLessonsAsync
     *
     * Delete multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLessonsAsync($zone_id, $body)
    {
        return $this->deleteLessonsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLessonsAsyncWithHttpInfo
     *
     * Delete multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLessonsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteLessonsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteLessons'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLessonsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteLessons');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLessons');
        }

        $resourcePath = '/Lessons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNonTeachingActivityByRefId
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivityByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivityByRefIdWithHttpInfo
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteNonTeachingActivityByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivityByRefIdAsync
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNonTeachingActivityByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteNonTeachingActivityByRefIdAsyncWithHttpInfo
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteNonTeachingActivityByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteNonTeachingActivityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNonTeachingActivityByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteNonTeachingActivityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteNonTeachingActivityByRefId');
        }

        $resourcePath = '/NonTeachingActivitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNonTeachingActivitys
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivitys($zone_id, $body)
    {
        list($response) = $this->deleteNonTeachingActivitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivitysWithHttpInfo
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteNonTeachingActivitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivitysAsync
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNonTeachingActivitysAsync($zone_id, $body)
    {
        return $this->deleteNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteNonTeachingActivitysAsyncWithHttpInfo
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteNonTeachingActivitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteNonTeachingActivitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNonTeachingActivitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteNonTeachingActivitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteNonTeachingActivitys');
        }

        $resourcePath = '/NonTeachingActivitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefId
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferenceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deletePersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdAsync
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonDietaryPreferenceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deletePersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdAsyncWithHttpInfo
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deletePersonDietaryPreferenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deletePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deletePersonDietaryPreferenceByRefId');
        }

        $resourcePath = '/PersonDietaryPreferences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePersonDietaryPreferences
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferences($zone_id, $body)
    {
        list($response) = $this->deletePersonDietaryPreferencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferencesWithHttpInfo
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonDietaryPreferencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferencesAsync
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonDietaryPreferencesAsync($zone_id, $body)
    {
        return $this->deletePersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deletePersonDietaryPreferencesAsyncWithHttpInfo
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonDietaryPreferencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deletePersonDietaryPreferences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePersonDietaryPreferencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deletePersonDietaryPreferences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonDietaryPreferences');
        }

        $resourcePath = '/PersonDietaryPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePersonPictures
     *
     * Delete multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonPictures($zone_id, $body)
    {
        list($response) = $this->deletePersonPicturesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deletePersonPicturesWithHttpInfo
     *
     * Delete multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonPicturesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonPicturesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePersonPicturesAsync
     *
     * Delete multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonPicturesAsync($zone_id, $body)
    {
        return $this->deletePersonPicturesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deletePersonPicturesAsyncWithHttpInfo
     *
     * Delete multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePersonPicturesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deletePersonPicturesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deletePersonPictures'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePersonPicturesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deletePersonPictures');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonPictures');
        }

        $resourcePath = '/PersonPictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefId
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntryByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefIdAsync
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolDiaryEntryByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefIdAsyncWithHttpInfo
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolDiaryEntryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolDiaryEntryByRefId');
        }

        $resourcePath = '/SchoolDiaryEntrys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolDiaryEntrys
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntrys($zone_id, $body)
    {
        list($response) = $this->deleteSchoolDiaryEntrysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntrysWithHttpInfo
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntrysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolDiaryEntrysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntrysAsync
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolDiaryEntrysAsync($zone_id, $body)
    {
        return $this->deleteSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolDiaryEntrysAsyncWithHttpInfo
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolDiaryEntrysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolDiaryEntrys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolDiaryEntrysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolDiaryEntrys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolDiaryEntrys');
        }

        $resourcePath = '/SchoolDiaryEntrys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolGroupByRefId
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupByRefIdWithHttpInfo
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupByRefIdAsync
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolGroupByRefIdAsyncWithHttpInfo
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupByRefId');
        }

        $resourcePath = '/SchoolGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolGroupTypeByRefId
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypeByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupTypeByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypeByRefIdAsync
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupTypeByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolGroupTypeByRefIdAsyncWithHttpInfo
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupTypeByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolGroupTypeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolGroupTypeByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupTypeByRefId');
        }

        $resourcePath = '/SchoolGroupTypes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolGroupTypes
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypes($zone_id, $body)
    {
        list($response) = $this->deleteSchoolGroupTypesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypesWithHttpInfo
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupTypesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypesAsync
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupTypesAsync($zone_id, $body)
    {
        return $this->deleteSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolGroupTypesAsyncWithHttpInfo
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupTypesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolGroupTypes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolGroupTypesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolGroupTypes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroupTypes');
        }

        $resourcePath = '/SchoolGroupTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolGroups
     *
     * Delete multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroups($zone_id, $body)
    {
        list($response) = $this->deleteSchoolGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupsWithHttpInfo
     *
     * Delete multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupsAsync
     *
     * Delete multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupsAsync($zone_id, $body)
    {
        return $this->deleteSchoolGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolGroupsAsyncWithHttpInfo
     *
     * Delete multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroups');
        }

        $resourcePath = '/SchoolGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolInfoByRefId
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolInfoByRefIdWithHttpInfo
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolInfoByRefIdAsync
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolInfoByRefIdAsyncWithHttpInfo
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolInfoByRefId');
        }

        $resourcePath = '/SchoolInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSchoolInfos
     *
     * Delete multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolInfos($zone_id, $body)
    {
        list($response) = $this->deleteSchoolInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteSchoolInfosWithHttpInfo
     *
     * Delete multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSchoolInfosAsync
     *
     * Delete multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolInfosAsync($zone_id, $body)
    {
        return $this->deleteSchoolInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSchoolInfosAsyncWithHttpInfo
     *
     * Delete multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSchoolInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteSchoolInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteSchoolInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSchoolInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteSchoolInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolInfos');
        }

        $resourcePath = '/SchoolInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteScopeByRefId
     *
     * Delete Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteScopeByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteScopeByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteScopeByRefIdWithHttpInfo
     *
     * Delete Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopeByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteScopeByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteScopeByRefIdAsync
     *
     * Delete Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScopeByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteScopeByRefIdAsyncWithHttpInfo
     *
     * Delete Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteScopeByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteScopeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteScopeByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteScopeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteScopeByRefId');
        }

        $resourcePath = '/Scopes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteScopes
     *
     * Delete multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteScopes($zone_id, $body)
    {
        list($response) = $this->deleteScopesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteScopesWithHttpInfo
     *
     * Delete multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteScopesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteScopesAsync
     *
     * Delete multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScopesAsync($zone_id, $body)
    {
        return $this->deleteScopesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteScopesAsyncWithHttpInfo
     *
     * Delete multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScopesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteScopesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteScopes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteScopesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteScopes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteScopes');
        }

        $resourcePath = '/Scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTRoomByRefId
     *
     * Delete TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTRoomByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTTRoomByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTTRoomByRefIdWithHttpInfo
     *
     * Delete TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTRoomByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTRoomByRefIdAsync
     *
     * Delete TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTRoomByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTRoomByRefIdAsyncWithHttpInfo
     *
     * Delete TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTRoomByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTRoomByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTRoomByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTRoomByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTRoomByRefId');
        }

        $resourcePath = '/TTRooms/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTRooms
     *
     * Delete multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTRooms($zone_id, $body)
    {
        list($response) = $this->deleteTTRoomsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTTRoomsWithHttpInfo
     *
     * Delete multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTRoomsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTRoomsAsync
     *
     * Delete multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTRoomsAsync($zone_id, $body)
    {
        return $this->deleteTTRoomsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTRoomsAsyncWithHttpInfo
     *
     * Delete multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTRoomsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTRoomsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTRooms'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTRoomsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTRooms');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTRooms');
        }

        $resourcePath = '/TTRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTSiteByRefId
     *
     * Delete TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSiteByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTTSiteByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSiteByRefIdWithHttpInfo
     *
     * Delete TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSiteByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSiteByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTSiteByRefIdAsync
     *
     * Delete TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSiteByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTSiteByRefIdAsyncWithHttpInfo
     *
     * Delete TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSiteByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTSiteByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTSiteByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTSiteByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSiteByRefId');
        }

        $resourcePath = '/TTSites/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTSites
     *
     * Delete multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSites($zone_id, $body)
    {
        list($response) = $this->deleteTTSitesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTTSitesWithHttpInfo
     *
     * Delete multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSitesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSitesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTSitesAsync
     *
     * Delete multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSitesAsync($zone_id, $body)
    {
        return $this->deleteTTSitesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTSitesAsyncWithHttpInfo
     *
     * Delete multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSitesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSitesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTSites'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTSitesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTSites');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSites');
        }

        $resourcePath = '/TTSites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTSubjectByRefId
     *
     * Delete TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjectByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSubjectByRefIdWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSubjectByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectByRefIdAsync
     *
     * Delete TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSubjectByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTSubjectByRefIdAsyncWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSubjectByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTSubjectByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTSubjectByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTSubjectByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSubjectByRefId');
        }

        $resourcePath = '/TTSubjects/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTSubjects
     *
     * Delete multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjects($zone_id, $body)
    {
        list($response) = $this->deleteTTSubjectsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTTSubjectsWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSubjectsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectsAsync
     *
     * Delete multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSubjectsAsync($zone_id, $body)
    {
        return $this->deleteTTSubjectsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTSubjectsAsyncWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTSubjectsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTSubjectsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTSubjects'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTSubjectsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTSubjects');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSubjects');
        }

        $resourcePath = '/TTSubjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTTeacherByRefId
     *
     * Delete TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeacherByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTTTeacherByRefIdWithHttpInfo
     *
     * Delete TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTTeacherByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTTeacherByRefIdAsync
     *
     * Delete TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTTeacherByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTTeacherByRefIdAsyncWithHttpInfo
     *
     * Delete TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTTeacherByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTTeacherByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTTeacherByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTTeacherByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTTeacherByRefId');
        }

        $resourcePath = '/TTTeachers/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTTTeachers
     *
     * Delete multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeachers($zone_id, $body)
    {
        list($response) = $this->deleteTTTeachersWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTTTeachersWithHttpInfo
     *
     * Delete multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeachersWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTTeachersRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTTTeachersAsync
     *
     * Delete multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTTeachersAsync($zone_id, $body)
    {
        return $this->deleteTTTeachersAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTTTeachersAsyncWithHttpInfo
     *
     * Delete multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTTTeachersAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTTTeachersRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTTTeachers'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTTTeachersRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTTTeachers');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTTeachers');
        }

        $resourcePath = '/TTTeachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTeachingGroupByRefId
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupByRefIdWithHttpInfo
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTeachingGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroupByRefIdAsync
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTeachingGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTeachingGroupByRefIdAsyncWithHttpInfo
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTeachingGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTeachingGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTeachingGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTeachingGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTeachingGroupByRefId');
        }

        $resourcePath = '/TeachingGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTeachingGroups
     *
     * Delete multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroups($zone_id, $body)
    {
        list($response) = $this->deleteTeachingGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupsWithHttpInfo
     *
     * Delete multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTeachingGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroupsAsync
     *
     * Delete multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTeachingGroupsAsync($zone_id, $body)
    {
        return $this->deleteTeachingGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTeachingGroupsAsyncWithHttpInfo
     *
     * Delete multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTeachingGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTeachingGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTeachingGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTeachingGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTeachingGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTeachingGroups');
        }

        $resourcePath = '/TeachingGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTermInfoByRefId
     *
     * Delete TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTermInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteTermInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteTermInfoByRefIdWithHttpInfo
     *
     * Delete TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTermInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTermInfoByRefIdAsync
     *
     * Delete TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTermInfoByRefIdAsyncWithHttpInfo
     *
     * Delete TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTermInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTermInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTermInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTermInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTermInfoByRefId');
        }

        $resourcePath = '/TermInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTermInfos
     *
     * Delete multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTermInfos($zone_id, $body)
    {
        list($response) = $this->deleteTermInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteTermInfosWithHttpInfo
     *
     * Delete multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTermInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTermInfosAsync
     *
     * Delete multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermInfosAsync($zone_id, $body)
    {
        return $this->deleteTermInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTermInfosAsyncWithHttpInfo
     *
     * Delete multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteTermInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteTermInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTermInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteTermInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTermInfos');
        }

        $resourcePath = '/TermInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAbsenceByRefId
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsenceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsenceByRefIdAsync
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAbsenceByRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAbsenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAbsenceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAbsenceByRefId');
        }

        $resourcePath = '/WorkforceAbsences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforceAssignmentRefId
     *
     * Delete WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsenceByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id)
    {
        list($response) = $this->deleteWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Delete WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforceAssignmentRefIdAsync
     *
     * Delete WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id)
    {
        return $this->deleteWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAbsenceByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAbsenceByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling deleteWorkforceAbsenceByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforcePersonalRefId
     *
     * Delete WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsenceByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id)
    {
        list($response) = $this->deleteWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo
     *
     * Delete WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforcePersonalRefIdAsync
     *
     * Delete WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id)
    {
        return $this->deleteWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAbsenceByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAbsenceByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling deleteWorkforceAbsenceByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAbsences
     *
     * Delete multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsences($zone_id, $body)
    {
        list($response) = $this->deleteWorkforceAbsencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsencesWithHttpInfo
     *
     * Delete multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsencesAsync
     *
     * Delete multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsencesAsync($zone_id, $body)
    {
        return $this->deleteWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAbsencesAsyncWithHttpInfo
     *
     * Delete multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAbsencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAbsences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAbsencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAbsences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAbsences');
        }

        $resourcePath = '/WorkforceAbsences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAssignmentByRefId
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignmentByRefIdAsync
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAssignmentByRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAssignmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAssignmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAssignmentByRefId');
        }

        $resourcePath = '/WorkforceAssignments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAssignmentByWorkforcePersonalRefId
     *
     * Delete WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignmentByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id)
    {
        list($response) = $this->deleteWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo
     *
     * Delete WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignmentByWorkforcePersonalRefIdAsync
     *
     * Delete WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id)
    {
        return $this->deleteWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAssignmentByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAssignmentByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling deleteWorkforceAssignmentByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAssignments/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceAssignments
     *
     * Delete multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignments($zone_id, $body)
    {
        list($response) = $this->deleteWorkforceAssignmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentsWithHttpInfo
     *
     * Delete multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignmentsAsync
     *
     * Delete multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentsAsync($zone_id, $body)
    {
        return $this->deleteWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceAssignmentsAsyncWithHttpInfo
     *
     * Delete multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceAssignmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceAssignments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceAssignmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceAssignments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAssignments');
        }

        $resourcePath = '/WorkforceAssignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceContractByRefId
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContractByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractByRefIdWithHttpInfo
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContractByRefIdAsync
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceContractByRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceContractByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceContractByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceContractByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceContractByRefId');
        }

        $resourcePath = '/WorkforceContracts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceContractByWorkforceAssignmentRefId
     *
     * Delete WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContractByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id)
    {
        list($response) = $this->deleteWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Delete WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContractByWorkforceAssignmentRefIdAsync
     *
     * Delete WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id)
    {
        return $this->deleteWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Delete WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceContractByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceContractByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling deleteWorkforceContractByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceContracts/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforceContracts
     *
     * Delete multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContracts($zone_id, $body)
    {
        list($response) = $this->deleteWorkforceContractsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractsWithHttpInfo
     *
     * Delete multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContractsAsync
     *
     * Delete multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractsAsync($zone_id, $body)
    {
        return $this->deleteWorkforceContractsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforceContractsAsyncWithHttpInfo
     *
     * Delete multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforceContractsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforceContractsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforceContracts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforceContractsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforceContracts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceContracts');
        }

        $resourcePath = '/WorkforceContracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforcePersonalByRefId
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->deleteWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalByRefIdWithHttpInfo
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforcePersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonalByRefIdAsync
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforcePersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->deleteWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforcePersonalByRefIdAsyncWithHttpInfo
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforcePersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforcePersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforcePersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforcePersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforcePersonalByRefId');
        }

        $resourcePath = '/WorkforcePersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkforcePersonals
     *
     * Delete multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonals($zone_id, $body)
    {
        list($response) = $this->deleteWorkforcePersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalsWithHttpInfo
     *
     * Delete multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforcePersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonalsAsync
     *
     * Delete multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforcePersonalsAsync($zone_id, $body)
    {
        return $this->deleteWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWorkforcePersonalsAsyncWithHttpInfo
     *
     * Delete multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifDeleteResponse';
        $request = $this->deleteWorkforcePersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteWorkforcePersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkforcePersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling deleteWorkforcePersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforcePersonals');
        }

        $resourcePath = '/WorkforcePersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentLearnerSetByRefId
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentLearnerSets';
        $request = $this->getAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdAsync
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentLearnerSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentLearnerSets';
        $request = $this->getAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentLearnerSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentLearnerSetByRefId');
        }

        $resourcePath = '/AssessmentLearnerSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentLearnerSets
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSets($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentLearnerSetsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetsWithHttpInfo
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentLearnerSets';
        $request = $this->getAssessmentLearnerSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSetsAsync
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentLearnerSetsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentLearnerSetsAsyncWithHttpInfo
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentLearnerSets';
        $request = $this->getAssessmentLearnerSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentLearnerSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentLearnerSetsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentLearnerSets');
        }

        $resourcePath = '/AssessmentLearnerSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResponseComponentByRefId
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponents';
        $request = $this->getAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentByRefIdAsync
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResponseComponentByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponents';
        $request = $this->getAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResponseComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentByRefId');
        }

        $resourcePath = '/AssessmentResponseComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefId
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups';
        $request = $this->getAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefIdAsync
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups';
        $request = $this->getAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResponseComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResponseComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResponseComponentGroups
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroups($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups';
        $request = $this->getAssessmentResponseComponentGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroupsAsync
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentGroupsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResponseComponentGroupsAsyncWithHttpInfo
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups';
        $request = $this->getAssessmentResponseComponentGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResponseComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResponseComponentGroupsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResponseComponentGroups');
        }

        $resourcePath = '/AssessmentResponseComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResponseComponents
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponents($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentResponseComponentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentsWithHttpInfo
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponents';
        $request = $this->getAssessmentResponseComponentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentsAsync
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResponseComponentsAsyncWithHttpInfo
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResponseComponents';
        $request = $this->getAssessmentResponseComponentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResponseComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResponseComponentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResponseComponents');
        }

        $resourcePath = '/AssessmentResponseComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultComponentByRefId
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponents';
        $request = $this->getAssessmentResultComponentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentByRefIdAsync
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultComponentByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponents';
        $request = $this->getAssessmentResultComponentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultComponentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentByRefId');
        }

        $resourcePath = '/AssessmentResultComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefId
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups';
        $request = $this->getAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefIdAsync
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups';
        $request = $this->getAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResultComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultComponentGroups
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroups($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentResultComponentGroupsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups';
        $request = $this->getAssessmentResultComponentGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroupsAsync
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentGroupsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultComponentGroupsAsyncWithHttpInfo
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups';
        $request = $this->getAssessmentResultComponentGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultComponentGroupsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultComponentGroups');
        }

        $resourcePath = '/AssessmentResultComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultComponents
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponents($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentResultComponentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentsWithHttpInfo
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponents';
        $request = $this->getAssessmentResultComponentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentsAsync
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultComponentsAsyncWithHttpInfo
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultComponents';
        $request = $this->getAssessmentResultComponentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultComponentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultComponents');
        }

        $resourcePath = '/AssessmentResultComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultGradeSetByRefId
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets';
        $request = $this->getAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSetByRefIdAsync
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultGradeSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultGradeSetByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets';
        $request = $this->getAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultGradeSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultGradeSetByRefId');
        }

        $resourcePath = '/AssessmentResultGradeSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentResultGradeSets
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSets($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentResultGradeSetsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetsWithHttpInfo
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets';
        $request = $this->getAssessmentResultGradeSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSetsAsync
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultGradeSetsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentResultGradeSetsAsyncWithHttpInfo
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets';
        $request = $this->getAssessmentResultGradeSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentResultGradeSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentResultGradeSetsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentResultGradeSets');
        }

        $resourcePath = '/AssessmentResultGradeSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentSessionByRefId
     *
     * Find AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentSessionByRefIdWithHttpInfo
     *
     * Find AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentSessions';
        $request = $this->getAssessmentSessionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessionByRefIdAsync
     *
     * Find AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentSessionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentSessionByRefIdAsyncWithHttpInfo
     *
     * Find AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentSessions';
        $request = $this->getAssessmentSessionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentSessionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentSessionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentSessionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentSessionByRefId');
        }

        $resourcePath = '/AssessmentSessions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssessmentSessions
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessions($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getAssessmentSessionsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getAssessmentSessionsWithHttpInfo
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentSessions';
        $request = $this->getAssessmentSessionsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessionsAsync
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentSessionsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getAssessmentSessionsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAssessmentSessionsAsyncWithHttpInfo
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssessmentSessionsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\AssessmentSessions';
        $request = $this->getAssessmentSessionsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getAssessmentSessions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssessmentSessionsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getAssessmentSessions');
        }

        $resourcePath = '/AssessmentSessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactPersonalByRefId
     *
     * Find ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\ContactPersonals
     */
    public function getContactPersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getContactPersonalByRefIdWithHttpInfo
     *
     * Find ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\ContactPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\ContactPersonals';
        $request = $this->getContactPersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\ContactPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactPersonalByRefIdAsync
     *
     * Find ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactPersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getContactPersonalByRefIdAsyncWithHttpInfo
     *
     * Find ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\ContactPersonals';
        $request = $this->getContactPersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getContactPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContactPersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getContactPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getContactPersonalByRefId');
        }

        $resourcePath = '/ContactPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactPersonals
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\ContactPersonals
     */
    public function getContactPersonals($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getContactPersonalsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getContactPersonalsWithHttpInfo
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\ContactPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactPersonalsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\ContactPersonals';
        $request = $this->getContactPersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\ContactPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactPersonalsAsync
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactPersonalsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getContactPersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getContactPersonalsAsyncWithHttpInfo
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactPersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\ContactPersonals';
        $request = $this->getContactPersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getContactPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContactPersonalsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getContactPersonals');
        }

        $resourcePath = '/ContactPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCycleByRefId
     *
     * Find Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Cycles
     */
    public function getCycleByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getCycleByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getCycleByRefIdWithHttpInfo
     *
     * Find Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCycleByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Cycles';
        $request = $this->getCycleByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCycleByRefIdAsync
     *
     * Find Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCycleByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCycleByRefIdAsyncWithHttpInfo
     *
     * Find Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Cycles';
        $request = $this->getCycleByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getCycleByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCycleByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getCycleByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getCycleByRefId');
        }

        $resourcePath = '/Cycles/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCycles
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Cycles
     */
    public function getCycles($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getCyclesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getCyclesWithHttpInfo
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCyclesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Cycles';
        $request = $this->getCyclesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCyclesAsync
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCyclesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getCyclesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCyclesAsyncWithHttpInfo
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCyclesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Cycles';
        $request = $this->getCyclesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getCycles'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCyclesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getCycles');
        }

        $resourcePath = '/Cycles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentityByRefId
     *
     * Find Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Identitys
     */
    public function getIdentityByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getIdentityByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getIdentityByRefIdWithHttpInfo
     *
     * Find Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Identitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Identitys';
        $request = $this->getIdentityByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Identitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentityByRefIdAsync
     *
     * Find Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIdentityByRefIdAsyncWithHttpInfo
     *
     * Find Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Identitys';
        $request = $this->getIdentityByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getIdentityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIdentityByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getIdentityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getIdentityByRefId');
        }

        $resourcePath = '/Identitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentitys
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Identitys
     */
    public function getIdentitys($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getIdentitysWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getIdentitysWithHttpInfo
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Identitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentitysWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Identitys';
        $request = $this->getIdentitysRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Identitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentitysAsync
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentitysAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getIdentitysAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIdentitysAsyncWithHttpInfo
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentitysAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Identitys';
        $request = $this->getIdentitysRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getIdentitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIdentitysRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getIdentitys');
        }

        $resourcePath = '/Identitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJunctionByRefId
     *
     * Find Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Junctions
     */
    public function getJunctionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getJunctionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getJunctionByRefIdWithHttpInfo
     *
     * Find Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Junctions';
        $request = $this->getJunctionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJunctionByRefIdAsync
     *
     * Find Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJunctionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getJunctionByRefIdAsyncWithHttpInfo
     *
     * Find Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Junctions';
        $request = $this->getJunctionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getJunctionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJunctionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getJunctionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getJunctionByRefId');
        }

        $resourcePath = '/Junctions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJunctions
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Junctions
     */
    public function getJunctions($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getJunctionsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getJunctionsWithHttpInfo
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Junctions';
        $request = $this->getJunctionsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJunctionsAsync
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJunctionsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getJunctionsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getJunctionsAsyncWithHttpInfo
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJunctionsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Junctions';
        $request = $this->getJunctionsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getJunctions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJunctionsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getJunctions');
        }

        $resourcePath = '/Junctions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLAInfoByRefId
     *
     * Find LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LAInfos
     */
    public function getLAInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLAInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLAInfoByRefIdWithHttpInfo
     *
     * Find LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LAInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLAInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LAInfos';
        $request = $this->getLAInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LAInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLAInfoByRefIdAsync
     *
     * Find LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLAInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLAInfoByRefIdAsyncWithHttpInfo
     *
     * Find LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LAInfos';
        $request = $this->getLAInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLAInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLAInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLAInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLAInfoByRefId');
        }

        $resourcePath = '/LAInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLAInfos
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LAInfos
     */
    public function getLAInfos($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLAInfosWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLAInfosWithHttpInfo
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LAInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLAInfosWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LAInfos';
        $request = $this->getLAInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LAInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLAInfosAsync
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLAInfosAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLAInfosAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLAInfosAsyncWithHttpInfo
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLAInfosAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LAInfos';
        $request = $this->getLAInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLAInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLAInfosRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLAInfos');
        }

        $resourcePath = '/LAInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefId
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSetByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets';
        $request = $this->getLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdAsync
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResponseSetByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets';
        $request = $this->getLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAssessmentResponseSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResponseSetByRefId');
        }

        $resourcePath = '/LearnerAssessmentResponseSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAssessmentResponseSets
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSets($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets';
        $request = $this->getLearnerAssessmentResponseSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSetsAsync
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResponseSetsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAssessmentResponseSetsAsyncWithHttpInfo
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets';
        $request = $this->getLearnerAssessmentResponseSetsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAssessmentResponseSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAssessmentResponseSetsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAssessmentResponseSets');
        }

        $resourcePath = '/LearnerAssessmentResponseSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAssessmentResultByRefId
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResultByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResults';
        $request = $this->getLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdAsync
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResultByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdAsyncWithHttpInfo
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResults';
        $request = $this->getLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAssessmentResultByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResultByRefId');
        }

        $resourcePath = '/LearnerAssessmentResults/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAssessmentResults
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResults($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerAssessmentResultsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultsWithHttpInfo
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResults';
        $request = $this->getLearnerAssessmentResultsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResultsAsync
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResultsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAssessmentResultsAsyncWithHttpInfo
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAssessmentResults';
        $request = $this->getLearnerAssessmentResultsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAssessmentResults'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAssessmentResultsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAssessmentResults');
        }

        $resourcePath = '/LearnerAssessmentResults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAttendanceByRefId
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAttendances
     */
    public function getLearnerAttendanceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceByRefIdWithHttpInfo
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendances';
        $request = $this->getLearnerAttendanceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceByRefIdAsync
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAttendanceByRefIdAsyncWithHttpInfo
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendances';
        $request = $this->getLearnerAttendanceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAttendanceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAttendanceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAttendanceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceByRefId');
        }

        $resourcePath = '/LearnerAttendances/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefId
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummaryByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys';
        $request = $this->getLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefIdAsync
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceSummaryByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys';
        $request = $this->getLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAttendanceSummaryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceSummaryByRefId');
        }

        $resourcePath = '/LearnerAttendanceSummarys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAttendanceSummarys
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummarys($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerAttendanceSummarysWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummarysWithHttpInfo
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummarysWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys';
        $request = $this->getLearnerAttendanceSummarysRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummarysAsync
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceSummarysAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAttendanceSummarysAsyncWithHttpInfo
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys';
        $request = $this->getLearnerAttendanceSummarysRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAttendanceSummarys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAttendanceSummarysRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAttendanceSummarys');
        }

        $resourcePath = '/LearnerAttendanceSummarys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerAttendances
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerAttendances
     */
    public function getLearnerAttendances($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerAttendancesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerAttendancesWithHttpInfo
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendancesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendances';
        $request = $this->getLearnerAttendancesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendancesAsync
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendancesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerAttendancesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerAttendancesAsyncWithHttpInfo
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerAttendancesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerAttendances';
        $request = $this->getLearnerAttendancesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerAttendances'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerAttendancesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerAttendances');
        }

        $resourcePath = '/LearnerAttendances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefId
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents';
        $request = $this->getLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdAsync
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerBehaviourIncidentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents';
        $request = $this->getLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerBehaviourIncidentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerBehaviourIncidentByRefId');
        }

        $resourcePath = '/LearnerBehaviourIncidents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerBehaviourIncidents
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidents($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerBehaviourIncidentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentsWithHttpInfo
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents';
        $request = $this->getLearnerBehaviourIncidentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidentsAsync
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerBehaviourIncidentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerBehaviourIncidentsAsyncWithHttpInfo
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents';
        $request = $this->getLearnerBehaviourIncidentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerBehaviourIncidents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerBehaviourIncidentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerBehaviourIncidents');
        }

        $resourcePath = '/LearnerBehaviourIncidents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerContactByRefId
     *
     * Find LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerContacts
     */
    public function getLearnerContactByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerContactByRefIdWithHttpInfo
     *
     * Find LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerContacts';
        $request = $this->getLearnerContactByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerContactByRefIdAsync
     *
     * Find LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerContactByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerContactByRefIdAsyncWithHttpInfo
     *
     * Find LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerContacts';
        $request = $this->getLearnerContactByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerContactByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerContactByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerContactByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerContactByRefId');
        }

        $resourcePath = '/LearnerContacts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerContacts
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerContacts
     */
    public function getLearnerContacts($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerContactsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerContactsWithHttpInfo
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerContacts';
        $request = $this->getLearnerContactsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerContactsAsync
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerContactsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerContactsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerContactsAsyncWithHttpInfo
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerContactsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerContacts';
        $request = $this->getLearnerContactsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerContacts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerContactsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerContacts');
        }

        $resourcePath = '/LearnerContacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerEntitlementByLearnerPersonalRefId
     *
     * Find LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlementByLearnerPersonalRefId($zone_id, $learner_personal_ref_id)
    {
        list($response) = $this->getLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo
     *
     * Find LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementByLearnerPersonalRefIdAsync
     *
     * Find LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementByLearnerPersonalRefIdAsync($zone_id, $learner_personal_ref_id)
    {
        return $this->getLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo
     *
     * Find LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerEntitlementByLearnerPersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerEntitlementByLearnerPersonalRefId');
        }
        // verify the required parameter 'learner_personal_ref_id' is set
        if ($learner_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $learner_personal_ref_id when calling getLearnerEntitlementByLearnerPersonalRefId');
        }

        $resourcePath = '/LearnerEntitlements/{LearnerPersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($learner_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'LearnerPersonalRefId' . '}', ObjectSerializer::toPathValue($learner_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerEntitlementByRefId
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlementByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementByRefIdWithHttpInfo
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementByRefIdAsync
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerEntitlementByRefIdAsyncWithHttpInfo
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerEntitlementByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerEntitlementByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerEntitlementByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerEntitlementByRefId');
        }

        $resourcePath = '/LearnerEntitlements/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerEntitlementBySchoolInfoRefId
     *
     * Find LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlementBySchoolInfoRefId($zone_id, $school_info_ref_id)
    {
        list($response) = $this->getLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementBySchoolInfoRefIdWithHttpInfo
     *
     * Find LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementBySchoolInfoRefIdAsync
     *
     * Find LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementBySchoolInfoRefIdAsync($zone_id, $school_info_ref_id)
    {
        return $this->getLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo
     *
     * Find LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerEntitlementBySchoolInfoRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerEntitlementBySchoolInfoRefId');
        }
        // verify the required parameter 'school_info_ref_id' is set
        if ($school_info_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $school_info_ref_id when calling getLearnerEntitlementBySchoolInfoRefId');
        }

        $resourcePath = '/LearnerEntitlements/{SchoolInfoRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($school_info_ref_id !== null) {
            $resourcePath = str_replace('{' . 'SchoolInfoRefId' . '}', ObjectSerializer::toPathValue($school_info_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerEntitlements
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlements($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerEntitlementsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementsWithHttpInfo
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementsAsync
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerEntitlementsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerEntitlementsAsyncWithHttpInfo
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerEntitlementsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerEntitlements';
        $request = $this->getLearnerEntitlementsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerEntitlements'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerEntitlementsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerEntitlements');
        }

        $resourcePath = '/LearnerEntitlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerExclusionByRefId
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerExclusions
     */
    public function getLearnerExclusionByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerExclusionByRefIdWithHttpInfo
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerExclusions';
        $request = $this->getLearnerExclusionByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusionByRefIdAsync
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerExclusionByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerExclusionByRefIdAsyncWithHttpInfo
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerExclusions';
        $request = $this->getLearnerExclusionByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerExclusionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerExclusionByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerExclusionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerExclusionByRefId');
        }

        $resourcePath = '/LearnerExclusions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerExclusions
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerExclusions
     */
    public function getLearnerExclusions($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerExclusionsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerExclusionsWithHttpInfo
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerExclusions';
        $request = $this->getLearnerExclusionsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusionsAsync
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerExclusionsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerExclusionsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerExclusionsAsyncWithHttpInfo
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerExclusionsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerExclusions';
        $request = $this->getLearnerExclusionsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerExclusions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerExclusionsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerExclusions');
        }

        $resourcePath = '/LearnerExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefId
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments';
        $request = $this->getLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdAsync
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerGroupEnrolmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments';
        $request = $this->getLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerGroupEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerGroupEnrolmentByRefId');
        }

        $resourcePath = '/LearnerGroupEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerGroupEnrolments
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolments($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerGroupEnrolmentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentsWithHttpInfo
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments';
        $request = $this->getLearnerGroupEnrolmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolmentsAsync
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerGroupEnrolmentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerGroupEnrolmentsAsyncWithHttpInfo
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments';
        $request = $this->getLearnerGroupEnrolmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerGroupEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerGroupEnrolmentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerGroupEnrolments');
        }

        $resourcePath = '/LearnerGroupEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerPersonalByRefId
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerPersonals
     */
    public function getLearnerPersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerPersonalByRefIdWithHttpInfo
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerPersonals';
        $request = $this->getLearnerPersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonalByRefIdAsync
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerPersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerPersonalByRefIdAsyncWithHttpInfo
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerPersonals';
        $request = $this->getLearnerPersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerPersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerPersonalByRefId');
        }

        $resourcePath = '/LearnerPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerPersonals
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerPersonals
     */
    public function getLearnerPersonals($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerPersonalsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerPersonalsWithHttpInfo
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerPersonals';
        $request = $this->getLearnerPersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonalsAsync
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerPersonalsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerPersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerPersonalsAsyncWithHttpInfo
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerPersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerPersonals';
        $request = $this->getLearnerPersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerPersonalsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerPersonals');
        }

        $resourcePath = '/LearnerPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefId
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments';
        $request = $this->getLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdAsync
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSchoolEnrolmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments';
        $request = $this->getLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerSchoolEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSchoolEnrolmentByRefId');
        }

        $resourcePath = '/LearnerSchoolEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerSchoolEnrolments
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolments($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments';
        $request = $this->getLearnerSchoolEnrolmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolmentsAsync
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSchoolEnrolmentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerSchoolEnrolmentsAsyncWithHttpInfo
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments';
        $request = $this->getLearnerSchoolEnrolmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerSchoolEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerSchoolEnrolmentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerSchoolEnrolments');
        }

        $resourcePath = '/LearnerSchoolEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerSpecialNeedsByRefId
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedsByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss';
        $request = $this->getLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedsByRefIdAsync
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSpecialNeedsByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerSpecialNeedsByRefIdAsyncWithHttpInfo
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss';
        $request = $this->getLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerSpecialNeedsByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSpecialNeedsByRefId');
        }

        $resourcePath = '/LearnerSpecialNeedss/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLearnerSpecialNeedss
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedss($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLearnerSpecialNeedssWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedssWithHttpInfo
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedssWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss';
        $request = $this->getLearnerSpecialNeedssRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedssAsync
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSpecialNeedssAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLearnerSpecialNeedssAsyncWithHttpInfo
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss';
        $request = $this->getLearnerSpecialNeedssRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLearnerSpecialNeedss'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLearnerSpecialNeedssRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLearnerSpecialNeedss');
        }

        $resourcePath = '/LearnerSpecialNeedss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLessonByRefId
     *
     * Find Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Lessons
     */
    public function getLessonByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getLessonByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getLessonByRefIdWithHttpInfo
     *
     * Find Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Lessons';
        $request = $this->getLessonByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLessonByRefIdAsync
     *
     * Find Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLessonByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLessonByRefIdAsyncWithHttpInfo
     *
     * Find Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Lessons';
        $request = $this->getLessonByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLessonByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLessonByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLessonByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLessonByRefId');
        }

        $resourcePath = '/Lessons/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLessons
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Lessons
     */
    public function getLessons($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getLessonsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getLessonsWithHttpInfo
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Lessons';
        $request = $this->getLessonsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLessonsAsync
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLessonsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getLessonsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLessonsAsyncWithHttpInfo
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLessonsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Lessons';
        $request = $this->getLessonsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getLessons'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLessonsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getLessons');
        }

        $resourcePath = '/Lessons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNonTeachingActivityByRefId
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivityByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getNonTeachingActivityByRefIdWithHttpInfo
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\NonTeachingActivitys';
        $request = $this->getNonTeachingActivityByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivityByRefIdAsync
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNonTeachingActivityByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getNonTeachingActivityByRefIdAsyncWithHttpInfo
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\NonTeachingActivitys';
        $request = $this->getNonTeachingActivityByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getNonTeachingActivityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNonTeachingActivityByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getNonTeachingActivityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getNonTeachingActivityByRefId');
        }

        $resourcePath = '/NonTeachingActivitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNonTeachingActivitys
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivitys($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getNonTeachingActivitysWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getNonTeachingActivitysWithHttpInfo
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivitysWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\NonTeachingActivitys';
        $request = $this->getNonTeachingActivitysRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivitysAsync
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNonTeachingActivitysAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getNonTeachingActivitysAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getNonTeachingActivitysAsyncWithHttpInfo
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNonTeachingActivitysAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\NonTeachingActivitys';
        $request = $this->getNonTeachingActivitysRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getNonTeachingActivitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNonTeachingActivitysRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getNonTeachingActivitys');
        }

        $resourcePath = '/NonTeachingActivitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonDietaryPreferenceByRefId
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferenceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getPersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonDietaryPreferences';
        $request = $this->getPersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdAsync
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonDietaryPreferenceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getPersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdAsyncWithHttpInfo
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonDietaryPreferences';
        $request = $this->getPersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getPersonDietaryPreferenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getPersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getPersonDietaryPreferenceByRefId');
        }

        $resourcePath = '/PersonDietaryPreferences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonDietaryPreferences
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferences($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getPersonDietaryPreferencesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferencesWithHttpInfo
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferencesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonDietaryPreferences';
        $request = $this->getPersonDietaryPreferencesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferencesAsync
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonDietaryPreferencesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getPersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPersonDietaryPreferencesAsyncWithHttpInfo
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonDietaryPreferences';
        $request = $this->getPersonDietaryPreferencesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getPersonDietaryPreferences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonDietaryPreferencesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getPersonDietaryPreferences');
        }

        $resourcePath = '/PersonDietaryPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonPictures
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\PersonPictures
     */
    public function getPersonPictures($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getPersonPicturesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getPersonPicturesWithHttpInfo
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\PersonPictures, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonPicturesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonPictures';
        $request = $this->getPersonPicturesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonPictures', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonPicturesAsync
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonPicturesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getPersonPicturesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPersonPicturesAsyncWithHttpInfo
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonPicturesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\PersonPictures';
        $request = $this->getPersonPicturesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getPersonPictures'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonPicturesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getPersonPictures');
        }

        $resourcePath = '/PersonPictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolDiaryEntryByRefId
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntryByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys';
        $request = $this->getSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntryByRefIdAsync
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolDiaryEntryByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolDiaryEntryByRefIdAsyncWithHttpInfo
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys';
        $request = $this->getSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolDiaryEntryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolDiaryEntryByRefId');
        }

        $resourcePath = '/SchoolDiaryEntrys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolDiaryEntrys
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntrys($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getSchoolDiaryEntrysWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntrysWithHttpInfo
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntrysWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys';
        $request = $this->getSchoolDiaryEntrysRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntrysAsync
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolDiaryEntrysAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolDiaryEntrysAsyncWithHttpInfo
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys';
        $request = $this->getSchoolDiaryEntrysRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolDiaryEntrys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolDiaryEntrysRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolDiaryEntrys');
        }

        $resourcePath = '/SchoolDiaryEntrys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolGroupByRefId
     *
     * Find SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolGroups
     */
    public function getSchoolGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupByRefIdWithHttpInfo
     *
     * Find SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroups';
        $request = $this->getSchoolGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupByRefIdAsync
     *
     * Find SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolGroupByRefIdAsyncWithHttpInfo
     *
     * Find SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroups';
        $request = $this->getSchoolGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupByRefId');
        }

        $resourcePath = '/SchoolGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolGroupTypeByRefId
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypeByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroupTypes';
        $request = $this->getSchoolGroupTypeByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypeByRefIdAsync
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupTypeByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolGroupTypeByRefIdAsyncWithHttpInfo
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroupTypes';
        $request = $this->getSchoolGroupTypeByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolGroupTypeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolGroupTypeByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupTypeByRefId');
        }

        $resourcePath = '/SchoolGroupTypes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolGroupTypes
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypes($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getSchoolGroupTypesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypesWithHttpInfo
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroupTypes';
        $request = $this->getSchoolGroupTypesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypesAsync
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupTypesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getSchoolGroupTypesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolGroupTypesAsyncWithHttpInfo
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupTypesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroupTypes';
        $request = $this->getSchoolGroupTypesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolGroupTypes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolGroupTypesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolGroupTypes');
        }

        $resourcePath = '/SchoolGroupTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolGroups
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolGroups
     */
    public function getSchoolGroups($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getSchoolGroupsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getSchoolGroupsWithHttpInfo
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroups';
        $request = $this->getSchoolGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupsAsync
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getSchoolGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolGroupsAsyncWithHttpInfo
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolGroups';
        $request = $this->getSchoolGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolGroupsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolGroups');
        }

        $resourcePath = '/SchoolGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolInfoByRefId
     *
     * Find SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolInfos
     */
    public function getSchoolInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getSchoolInfoByRefIdWithHttpInfo
     *
     * Find SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolInfos';
        $request = $this->getSchoolInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolInfoByRefIdAsync
     *
     * Find SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolInfoByRefIdAsyncWithHttpInfo
     *
     * Find SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolInfos';
        $request = $this->getSchoolInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolInfoByRefId');
        }

        $resourcePath = '/SchoolInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSchoolInfos
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SchoolInfos
     */
    public function getSchoolInfos($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getSchoolInfosWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getSchoolInfosWithHttpInfo
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SchoolInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolInfosWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolInfos';
        $request = $this->getSchoolInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSchoolInfosAsync
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolInfosAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getSchoolInfosAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSchoolInfosAsyncWithHttpInfo
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSchoolInfosAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\SchoolInfos';
        $request = $this->getSchoolInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getSchoolInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSchoolInfosRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getSchoolInfos');
        }

        $resourcePath = '/SchoolInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScopeByRefId
     *
     * Find Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Scopes
     */
    public function getScopeByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getScopeByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getScopeByRefIdWithHttpInfo
     *
     * Find Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopeByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Scopes';
        $request = $this->getScopeByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScopeByRefIdAsync
     *
     * Find Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScopeByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getScopeByRefIdAsyncWithHttpInfo
     *
     * Find Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\Scopes';
        $request = $this->getScopeByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getScopeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScopeByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getScopeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getScopeByRefId');
        }

        $resourcePath = '/Scopes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScopes
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\Scopes
     */
    public function getScopes($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getScopesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getScopesWithHttpInfo
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Scopes';
        $request = $this->getScopesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScopesAsync
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScopesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getScopesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getScopesAsyncWithHttpInfo
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScopesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\Scopes';
        $request = $this->getScopesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getScopes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScopesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getScopes');
        }

        $resourcePath = '/Scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTRoomByRefId
     *
     * Find TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTRooms
     */
    public function getTTRoomByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTTRoomByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTTRoomByRefIdWithHttpInfo
     *
     * Find TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTRooms';
        $request = $this->getTTRoomByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTRoomByRefIdAsync
     *
     * Find TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTRoomByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTRoomByRefIdAsyncWithHttpInfo
     *
     * Find TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTRooms';
        $request = $this->getTTRoomByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTRoomByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTRoomByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTRoomByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTRoomByRefId');
        }

        $resourcePath = '/TTRooms/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTRooms
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTRooms
     */
    public function getTTRooms($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTTRoomsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTTRoomsWithHttpInfo
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTRooms';
        $request = $this->getTTRoomsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTRoomsAsync
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTRoomsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTTRoomsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTRoomsAsyncWithHttpInfo
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTRoomsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTRooms';
        $request = $this->getTTRoomsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTRooms'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTRoomsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTRooms');
        }

        $resourcePath = '/TTRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTSiteByRefId
     *
     * Find TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTSites
     */
    public function getTTSiteByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTTSiteByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTTSiteByRefIdWithHttpInfo
     *
     * Find TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSiteByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSites';
        $request = $this->getTTSiteByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTSiteByRefIdAsync
     *
     * Find TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSiteByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTSiteByRefIdAsyncWithHttpInfo
     *
     * Find TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSites';
        $request = $this->getTTSiteByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTSiteByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTSiteByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTSiteByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSiteByRefId');
        }

        $resourcePath = '/TTSites/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTSites
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTSites
     */
    public function getTTSites($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTTSitesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTTSitesWithHttpInfo
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSitesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSites';
        $request = $this->getTTSitesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTSitesAsync
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSitesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTTSitesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTSitesAsyncWithHttpInfo
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSitesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSites';
        $request = $this->getTTSitesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTSites'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTSitesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTSites');
        }

        $resourcePath = '/TTSites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTSubjectByRefId
     *
     * Find TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjectByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTTSubjectByRefIdWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSubjects';
        $request = $this->getTTSubjectByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTSubjectByRefIdAsync
     *
     * Find TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSubjectByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTSubjectByRefIdAsyncWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSubjects';
        $request = $this->getTTSubjectByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTSubjectByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTSubjectByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTSubjectByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSubjectByRefId');
        }

        $resourcePath = '/TTSubjects/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTSubjects
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjects($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTTSubjectsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTTSubjectsWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSubjects';
        $request = $this->getTTSubjectsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTSubjectsAsync
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSubjectsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTTSubjectsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTSubjectsAsyncWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTSubjectsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTSubjects';
        $request = $this->getTTSubjectsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTSubjects'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTSubjectsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTSubjects');
        }

        $resourcePath = '/TTSubjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTTeacherByRefId
     *
     * Find TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeacherByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTTTeacherByRefIdWithHttpInfo
     *
     * Find TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTTeachers';
        $request = $this->getTTTeacherByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTTeacherByRefIdAsync
     *
     * Find TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTTeacherByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTTeacherByRefIdAsyncWithHttpInfo
     *
     * Find TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTTeachers';
        $request = $this->getTTTeacherByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTTeacherByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTTeacherByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTTeacherByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTTeacherByRefId');
        }

        $resourcePath = '/TTTeachers/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTTTeachers
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeachers($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTTTeachersWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTTTeachersWithHttpInfo
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeachersWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTTeachers';
        $request = $this->getTTTeachersRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTTTeachersAsync
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTTeachersAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTTTeachersAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTTTeachersAsyncWithHttpInfo
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTTTeachersAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TTTeachers';
        $request = $this->getTTTeachersRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTTTeachers'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTTTeachersRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTTTeachers');
        }

        $resourcePath = '/TTTeachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeachingGroupByRefId
     *
     * Find TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TeachingGroups
     */
    public function getTeachingGroupByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTeachingGroupByRefIdWithHttpInfo
     *
     * Find TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TeachingGroups';
        $request = $this->getTeachingGroupByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeachingGroupByRefIdAsync
     *
     * Find TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeachingGroupByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTeachingGroupByRefIdAsyncWithHttpInfo
     *
     * Find TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TeachingGroups';
        $request = $this->getTeachingGroupByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTeachingGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeachingGroupByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTeachingGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTeachingGroupByRefId');
        }

        $resourcePath = '/TeachingGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeachingGroups
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TeachingGroups
     */
    public function getTeachingGroups($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTeachingGroupsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTeachingGroupsWithHttpInfo
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TeachingGroups';
        $request = $this->getTeachingGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeachingGroupsAsync
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeachingGroupsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTeachingGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTeachingGroupsAsyncWithHttpInfo
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeachingGroupsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TeachingGroups';
        $request = $this->getTeachingGroupsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTeachingGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeachingGroupsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTeachingGroups');
        }

        $resourcePath = '/TeachingGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTermInfoByRefId
     *
     * Find TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TermInfos
     */
    public function getTermInfoByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getTermInfoByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getTermInfoByRefIdWithHttpInfo
     *
     * Find TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfoByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TermInfos';
        $request = $this->getTermInfoByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTermInfoByRefIdAsync
     *
     * Find TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermInfoByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTermInfoByRefIdAsyncWithHttpInfo
     *
     * Find TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\TermInfos';
        $request = $this->getTermInfoByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTermInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermInfoByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTermInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTermInfoByRefId');
        }

        $resourcePath = '/TermInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTermInfos
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\TermInfos
     */
    public function getTermInfos($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getTermInfosWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getTermInfosWithHttpInfo
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfosWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TermInfos';
        $request = $this->getTermInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTermInfosAsync
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermInfosAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getTermInfosAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTermInfosAsyncWithHttpInfo
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermInfosAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\TermInfos';
        $request = $this->getTermInfosRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getTermInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermInfosRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getTermInfos');
        }

        $resourcePath = '/TermInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAbsenceByRefId
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsenceByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsenceByRefIdAsync
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAbsenceByRefIdAsyncWithHttpInfo
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAbsenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAbsenceByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAbsenceByRefId');
        }

        $resourcePath = '/WorkforceAbsences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAbsenceByWorkforceAssignmentRefId
     *
     * Find WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsenceByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id)
    {
        list($response) = $this->getWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Find WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsenceByWorkforceAssignmentRefIdAsync
     *
     * Find WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id)
    {
        return $this->getWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Find WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAbsenceByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAbsenceByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling getWorkforceAbsenceByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAbsenceByWorkforcePersonalRefId
     *
     * Find WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsenceByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id)
    {
        list($response) = $this->getWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo
     *
     * Find WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsenceByWorkforcePersonalRefIdAsync
     *
     * Find WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id)
    {
        return $this->getWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Find WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAbsenceByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAbsenceByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling getWorkforceAbsenceByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAbsences
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsences($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getWorkforceAbsencesWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getWorkforceAbsencesWithHttpInfo
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsencesWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsencesRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsencesAsync
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsencesAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getWorkforceAbsencesAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAbsencesAsyncWithHttpInfo
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAbsencesAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAbsences';
        $request = $this->getWorkforceAbsencesRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAbsences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAbsencesRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAbsences');
        }

        $resourcePath = '/WorkforceAbsences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAssignmentByRefId
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignmentByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignmentByRefIdAsync
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAssignmentByRefIdAsyncWithHttpInfo
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAssignmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAssignmentByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAssignmentByRefId');
        }

        $resourcePath = '/WorkforceAssignments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAssignmentByWorkforcePersonalRefId
     *
     * Find WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignmentByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id)
    {
        list($response) = $this->getWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo
     *
     * Find WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignmentByWorkforcePersonalRefIdAsync
     *
     * Find WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id)
    {
        return $this->getWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Find WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAssignmentByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAssignmentByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling getWorkforceAssignmentByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAssignments/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceAssignments
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignments($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getWorkforceAssignmentsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentsWithHttpInfo
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignmentsAsync
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceAssignmentsAsyncWithHttpInfo
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceAssignments';
        $request = $this->getWorkforceAssignmentsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceAssignments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceAssignmentsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceAssignments');
        }

        $resourcePath = '/WorkforceAssignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceContractByRefId
     *
     * Find WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContractByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceContractByRefIdWithHttpInfo
     *
     * Find WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceContractByRefIdAsync
     *
     * Find WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceContractByRefIdAsyncWithHttpInfo
     *
     * Find WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceContractByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceContractByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceContractByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceContractByRefId');
        }

        $resourcePath = '/WorkforceContracts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceContractByWorkforceAssignmentRefId
     *
     * Find WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContractByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id)
    {
        list($response) = $this->getWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Find WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceContractByWorkforceAssignmentRefIdAsync
     *
     * Find WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id)
    {
        return $this->getWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Find WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceContractByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceContractByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling getWorkforceContractByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceContracts/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforceContracts
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContracts($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getWorkforceContractsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getWorkforceContractsWithHttpInfo
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforceContractsAsync
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getWorkforceContractsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforceContractsAsyncWithHttpInfo
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforceContractsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforceContracts';
        $request = $this->getWorkforceContractsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforceContracts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforceContractsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforceContracts');
        }

        $resourcePath = '/WorkforceContracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforcePersonalByRefId
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonalByRefId($zone_id, $ref_id)
    {
        list($response) = $this->getWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalByRefIdWithHttpInfo
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforcePersonals';
        $request = $this->getWorkforcePersonalByRefIdRequest($zone_id, $ref_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonalByRefIdAsync
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforcePersonalByRefIdAsync($zone_id, $ref_id)
    {
        return $this->getWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforcePersonalByRefIdAsyncWithHttpInfo
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id)
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforcePersonals';
        $request = $this->getWorkforcePersonalByRefIdRequest($zone_id, $ref_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforcePersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforcePersonalByRefIdRequest($zone_id, $ref_id)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforcePersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforcePersonalByRefId');
        }

        $resourcePath = '/WorkforcePersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkforcePersonals
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonals($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        list($response) = $this->getWorkforcePersonalsWithHttpInfo($zone_id, $navigation_page_size, $navigation_page);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalsWithHttpInfo
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalsWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforcePersonals';
        $request = $this->getWorkforcePersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonalsAsync
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforcePersonalsAsync($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        return $this->getWorkforcePersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size, $navigation_page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWorkforcePersonalsAsyncWithHttpInfo
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkforcePersonalsAsyncWithHttpInfo($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        $returnType = '\DataExchange\SIFUK20\Models\WorkforcePersonals';
        $request = $this->getWorkforcePersonalsRequest($zone_id, $navigation_page_size, $navigation_page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getWorkforcePersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkforcePersonalsRequest($zone_id, $navigation_page_size = '50', $navigation_page = '1')
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling getWorkforcePersonals');
        }

        $resourcePath = '/WorkforcePersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }
        // header params
        if ($navigation_page_size !== null) {
            $headerParams['navigationPageSize'] = ObjectSerializer::toHeaderValue($navigation_page_size);
        }
        // header params
        if ($navigation_page !== null) {
            $headerParams['navigationPage'] = ObjectSerializer::toHeaderValue($navigation_page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentLearnerSetByRefId
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSetByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdAsync
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentLearnerSetByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentLearnerSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentLearnerSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentLearnerSetByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSetByRefId');
        }

        $resourcePath = '/AssessmentLearnerSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentLearnerSets
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSets($zone_id, $body)
    {
        list($response) = $this->updateAssessmentLearnerSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetsWithHttpInfo
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentLearnerSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSetsAsync
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentLearnerSetsAsync($zone_id, $body)
    {
        return $this->updateAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentLearnerSetsAsyncWithHttpInfo
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentLearnerSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentLearnerSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentLearnerSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentLearnerSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentLearnerSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSets');
        }

        $resourcePath = '/AssessmentLearnerSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResponseComponentByRefId
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentByRefIdAsync
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResponseComponentByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResponseComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResponseComponentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentByRefId');
        }

        $resourcePath = '/AssessmentResponseComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefId
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroupByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefIdAsync
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentGroupByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResponseComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResponseComponentGroupByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResponseComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResponseComponentGroups
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroups($zone_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroupsAsync
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentGroupsAsync($zone_id, $body)
    {
        return $this->updateAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResponseComponentGroupsAsyncWithHttpInfo
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResponseComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResponseComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResponseComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroups');
        }

        $resourcePath = '/AssessmentResponseComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResponseComponents
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponents($zone_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentsAsync
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentsAsync($zone_id, $body)
    {
        return $this->updateAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResponseComponentsAsyncWithHttpInfo
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResponseComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResponseComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResponseComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResponseComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResponseComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponents');
        }

        $resourcePath = '/AssessmentResponseComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultComponentByRefId
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentByRefIdAsync
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultComponentByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultComponentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultComponentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentByRefId');
        }

        $resourcePath = '/AssessmentResultComponents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefId
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroupByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefIdAsync
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentGroupByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultComponentGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultComponentGroupByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroupByRefId');
        }

        $resourcePath = '/AssessmentResultComponentGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultComponentGroups
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroups($zone_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroupsAsync
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentGroupsAsync($zone_id, $body)
    {
        return $this->updateAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultComponentGroupsAsyncWithHttpInfo
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultComponentGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultComponentGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultComponentGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroups');
        }

        $resourcePath = '/AssessmentResultComponentGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultComponents
     *
     * Update multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponents($zone_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentsWithHttpInfo
     *
     * Update multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentsAsync
     *
     * Update multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentsAsync($zone_id, $body)
    {
        return $this->updateAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultComponentsAsyncWithHttpInfo
     *
     * Update multiple AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultComponentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultComponentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultComponents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultComponentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultComponents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponents');
        }

        $resourcePath = '/AssessmentResultComponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefId
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSetByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefIdAsync
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultGradeSetByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultGradeSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultGradeSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultGradeSetByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSetByRefId');
        }

        $resourcePath = '/AssessmentResultGradeSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentResultGradeSets
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSets($zone_id, $body)
    {
        list($response) = $this->updateAssessmentResultGradeSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetsWithHttpInfo
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultGradeSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSetsAsync
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultGradeSetsAsync($zone_id, $body)
    {
        return $this->updateAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentResultGradeSetsAsyncWithHttpInfo
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentResultGradeSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentResultGradeSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentResultGradeSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentResultGradeSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentResultGradeSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSets');
        }

        $resourcePath = '/AssessmentResultGradeSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentSessionByRefId
     *
     * Update AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessionByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionByRefIdWithHttpInfo
     *
     * Update AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentSessionByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessionByRefIdAsync
     *
     * Update AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentSessionByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentSessionByRefIdAsyncWithHttpInfo
     *
     * Update AssessmentSession by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentSessionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentSessionByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentSessionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentSessionByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentSessionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentSessionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessionByRefId');
        }

        $resourcePath = '/AssessmentSessions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssessmentSessions
     *
     * Update multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessions($zone_id, $body)
    {
        list($response) = $this->updateAssessmentSessionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionsWithHttpInfo
     *
     * Update multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentSessionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessionsAsync
     *
     * Update multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentSessionsAsync($zone_id, $body)
    {
        return $this->updateAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAssessmentSessionsAsyncWithHttpInfo
     *
     * Update multiple AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssessmentSessionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateAssessmentSessionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateAssessmentSessions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssessmentSessionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateAssessmentSessions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessions');
        }

        $resourcePath = '/AssessmentSessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContactPersonalByRefId
     *
     * Update ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateContactPersonalByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateContactPersonalByRefIdWithHttpInfo
     *
     * Update ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactPersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateContactPersonalByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContactPersonalByRefIdAsync
     *
     * Update ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactPersonalByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateContactPersonalByRefIdAsyncWithHttpInfo
     *
     * Update ContactPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateContactPersonalByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateContactPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContactPersonalByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateContactPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateContactPersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateContactPersonalByRefId');
        }

        $resourcePath = '/ContactPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContactPersonals
     *
     * Update multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateContactPersonals($zone_id, $body)
    {
        list($response) = $this->updateContactPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateContactPersonalsWithHttpInfo
     *
     * Update multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateContactPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContactPersonalsAsync
     *
     * Update multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactPersonalsAsync($zone_id, $body)
    {
        return $this->updateContactPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateContactPersonalsAsyncWithHttpInfo
     *
     * Update multiple ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateContactPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateContactPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContactPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateContactPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateContactPersonals');
        }

        $resourcePath = '/ContactPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCycleByRefId
     *
     * Update Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateCycleByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateCycleByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateCycleByRefIdWithHttpInfo
     *
     * Update Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCycleByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateCycleByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCycleByRefIdAsync
     *
     * Update Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCycleByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCycleByRefIdAsyncWithHttpInfo
     *
     * Update Cycle by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCycleByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateCycleByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateCycleByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCycleByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateCycleByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateCycleByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycleByRefId');
        }

        $resourcePath = '/Cycles/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCycles
     *
     * Update multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateCycles($zone_id, $body)
    {
        list($response) = $this->updateCyclesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateCyclesWithHttpInfo
     *
     * Update multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCyclesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateCyclesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCyclesAsync
     *
     * Update multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCyclesAsync($zone_id, $body)
    {
        return $this->updateCyclesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCyclesAsyncWithHttpInfo
     *
     * Update multiple Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCyclesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateCyclesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateCycles'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCyclesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateCycles');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycles');
        }

        $resourcePath = '/Cycles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIdentityByRefId
     *
     * Update Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateIdentityByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateIdentityByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateIdentityByRefIdWithHttpInfo
     *
     * Update Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIdentityByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateIdentityByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIdentityByRefIdAsync
     *
     * Update Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIdentityByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIdentityByRefIdAsyncWithHttpInfo
     *
     * Update Identity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIdentityByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateIdentityByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateIdentityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateIdentityByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateIdentityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateIdentityByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateIdentityByRefId');
        }

        $resourcePath = '/Identitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIdentitys
     *
     * Update multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateIdentitys($zone_id, $body)
    {
        list($response) = $this->updateIdentitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateIdentitysWithHttpInfo
     *
     * Update multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIdentitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateIdentitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIdentitysAsync
     *
     * Update multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIdentitysAsync($zone_id, $body)
    {
        return $this->updateIdentitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIdentitysAsyncWithHttpInfo
     *
     * Update multiple Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIdentitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateIdentitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateIdentitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateIdentitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateIdentitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateIdentitys');
        }

        $resourcePath = '/Identitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJunctionByRefId
     *
     * Update Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateJunctionByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateJunctionByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateJunctionByRefIdWithHttpInfo
     *
     * Update Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateJunctionByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJunctionByRefIdAsync
     *
     * Update Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJunctionByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateJunctionByRefIdAsyncWithHttpInfo
     *
     * Update Junction by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJunctionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateJunctionByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateJunctionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateJunctionByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateJunctionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateJunctionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctionByRefId');
        }

        $resourcePath = '/Junctions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJunctions
     *
     * Update multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateJunctions($zone_id, $body)
    {
        list($response) = $this->updateJunctionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateJunctionsWithHttpInfo
     *
     * Update multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateJunctionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJunctionsAsync
     *
     * Update multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJunctionsAsync($zone_id, $body)
    {
        return $this->updateJunctionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateJunctionsAsyncWithHttpInfo
     *
     * Update multiple Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJunctionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateJunctionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateJunctions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateJunctionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateJunctions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctions');
        }

        $resourcePath = '/Junctions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLAInfoByRefId
     *
     * Update LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLAInfoByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLAInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLAInfoByRefIdWithHttpInfo
     *
     * Update LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLAInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLAInfoByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLAInfoByRefIdAsync
     *
     * Update LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLAInfoByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLAInfoByRefIdAsyncWithHttpInfo
     *
     * Update LAInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLAInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLAInfoByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLAInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLAInfoByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLAInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLAInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLAInfoByRefId');
        }

        $resourcePath = '/LAInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLAInfos
     *
     * Update multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLAInfos($zone_id, $body)
    {
        list($response) = $this->updateLAInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLAInfosWithHttpInfo
     *
     * Update multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLAInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLAInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLAInfosAsync
     *
     * Update multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLAInfosAsync($zone_id, $body)
    {
        return $this->updateLAInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLAInfosAsyncWithHttpInfo
     *
     * Update multiple LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLAInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLAInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLAInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLAInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLAInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLAInfos');
        }

        $resourcePath = '/LAInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefId
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSetByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdAsync
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResponseSetByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResponseSetByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAssessmentResponseSetByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAssessmentResponseSetByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSetByRefId');
        }

        $resourcePath = '/LearnerAssessmentResponseSets/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAssessmentResponseSets
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSets($zone_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResponseSetsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsAsync
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResponseSetsAsync($zone_id, $body)
    {
        return $this->updateLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsAsyncWithHttpInfo
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResponseSetsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResponseSetsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAssessmentResponseSets'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAssessmentResponseSetsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAssessmentResponseSets');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSets');
        }

        $resourcePath = '/LearnerAssessmentResponseSets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAssessmentResultByRefId
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResultByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdAsync
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResultByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdAsyncWithHttpInfo
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResultByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAssessmentResultByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAssessmentResultByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResultByRefId');
        }

        $resourcePath = '/LearnerAssessmentResults/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAssessmentResults
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResults($zone_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResultsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResultsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResultsAsync
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResultsAsync($zone_id, $body)
    {
        return $this->updateLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAssessmentResultsAsyncWithHttpInfo
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAssessmentResultsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAssessmentResultsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAssessmentResults'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAssessmentResultsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAssessmentResults');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResults');
        }

        $resourcePath = '/LearnerAssessmentResults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAttendanceByRefId
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceByRefIdWithHttpInfo
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceByRefIdAsync
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAttendanceByRefIdAsyncWithHttpInfo
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAttendanceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAttendanceByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAttendanceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceByRefId');
        }

        $resourcePath = '/LearnerAttendances/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefId
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummaryByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummaryByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefIdAsync
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceSummaryByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceSummaryByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAttendanceSummaryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAttendanceSummaryByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummaryByRefId');
        }

        $resourcePath = '/LearnerAttendanceSummarys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAttendanceSummarys
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummarys($zone_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceSummarysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummarysWithHttpInfo
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummarysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceSummarysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummarysAsync
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceSummarysAsync($zone_id, $body)
    {
        return $this->updateLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAttendanceSummarysAsyncWithHttpInfo
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendanceSummarysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendanceSummarysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAttendanceSummarys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAttendanceSummarysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAttendanceSummarys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummarys');
        }

        $resourcePath = '/LearnerAttendanceSummarys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerAttendances
     *
     * Update multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendances($zone_id, $body)
    {
        list($response) = $this->updateLearnerAttendancesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendancesWithHttpInfo
     *
     * Update multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendancesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendancesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendancesAsync
     *
     * Update multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendancesAsync($zone_id, $body)
    {
        return $this->updateLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerAttendancesAsyncWithHttpInfo
     *
     * Update multiple LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerAttendancesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerAttendancesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerAttendances'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerAttendancesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerAttendances');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendances');
        }

        $resourcePath = '/LearnerAttendances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefId
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdAsync
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerBehaviourIncidentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerBehaviourIncidentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerBehaviourIncidentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerBehaviourIncidentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidentByRefId');
        }

        $resourcePath = '/LearnerBehaviourIncidents/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerBehaviourIncidents
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidents($zone_id, $body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentsWithHttpInfo
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerBehaviourIncidentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidentsAsync
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerBehaviourIncidentsAsync($zone_id, $body)
    {
        return $this->updateLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerBehaviourIncidentsAsyncWithHttpInfo
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerBehaviourIncidentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerBehaviourIncidentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerBehaviourIncidents'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerBehaviourIncidentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerBehaviourIncidents');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidents');
        }

        $resourcePath = '/LearnerBehaviourIncidents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerContactByRefId
     *
     * Update LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerContactByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerContactByRefIdWithHttpInfo
     *
     * Update LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerContactByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerContactByRefIdAsync
     *
     * Update LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerContactByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerContactByRefIdAsyncWithHttpInfo
     *
     * Update LearnerContact by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerContactByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerContactByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerContactByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerContactByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerContactByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerContactByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContactByRefId');
        }

        $resourcePath = '/LearnerContacts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerContacts
     *
     * Update multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerContacts($zone_id, $body)
    {
        list($response) = $this->updateLearnerContactsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerContactsWithHttpInfo
     *
     * Update multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerContactsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerContactsAsync
     *
     * Update multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerContactsAsync($zone_id, $body)
    {
        return $this->updateLearnerContactsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerContactsAsyncWithHttpInfo
     *
     * Update multiple LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerContactsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerContactsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerContacts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerContactsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerContacts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContacts');
        }

        $resourcePath = '/LearnerContacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerEntitlementByLearnerPersonalRefId
     *
     * Update LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlementByLearnerPersonalRefId($zone_id, $learner_personal_ref_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo
     *
     * Update LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementByLearnerPersonalRefIdWithHttpInfo($zone_id, $learner_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementByLearnerPersonalRefIdAsync
     *
     * Update LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementByLearnerPersonalRefIdAsync($zone_id, $learner_personal_ref_id, $body)
    {
        return $this->updateLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo
     *
     * Update LearnerEntitlement by LearnerPersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementByLearnerPersonalRefIdAsyncWithHttpInfo($zone_id, $learner_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerEntitlementByLearnerPersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $learner_personal_ref_id LearnerPersonalRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerEntitlementByLearnerPersonalRefIdRequest($zone_id, $learner_personal_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerEntitlementByLearnerPersonalRefId');
        }
        // verify the required parameter 'learner_personal_ref_id' is set
        if ($learner_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $learner_personal_ref_id when calling updateLearnerEntitlementByLearnerPersonalRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlementByLearnerPersonalRefId');
        }

        $resourcePath = '/LearnerEntitlements/{LearnerPersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($learner_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'LearnerPersonalRefId' . '}', ObjectSerializer::toPathValue($learner_personal_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerEntitlementByRefId
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlementByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementByRefIdWithHttpInfo
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementByRefIdAsync
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerEntitlementByRefIdAsyncWithHttpInfo
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerEntitlementByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerEntitlementByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerEntitlementByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerEntitlementByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlementByRefId');
        }

        $resourcePath = '/LearnerEntitlements/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerEntitlementBySchoolInfoRefId
     *
     * Update LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlementBySchoolInfoRefId($zone_id, $school_info_ref_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementBySchoolInfoRefIdWithHttpInfo
     *
     * Update LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementBySchoolInfoRefIdWithHttpInfo($zone_id, $school_info_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementBySchoolInfoRefIdAsync
     *
     * Update LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementBySchoolInfoRefIdAsync($zone_id, $school_info_ref_id, $body)
    {
        return $this->updateLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo
     *
     * Update LearnerEntitlement by SchoolInfoRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementBySchoolInfoRefIdAsyncWithHttpInfo($zone_id, $school_info_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerEntitlementBySchoolInfoRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $school_info_ref_id SchoolInfoRefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerEntitlementBySchoolInfoRefIdRequest($zone_id, $school_info_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerEntitlementBySchoolInfoRefId');
        }
        // verify the required parameter 'school_info_ref_id' is set
        if ($school_info_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $school_info_ref_id when calling updateLearnerEntitlementBySchoolInfoRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlementBySchoolInfoRefId');
        }

        $resourcePath = '/LearnerEntitlements/{SchoolInfoRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($school_info_ref_id !== null) {
            $resourcePath = str_replace('{' . 'SchoolInfoRefId' . '}', ObjectSerializer::toPathValue($school_info_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerEntitlements
     *
     * Update multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlements($zone_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementsWithHttpInfo
     *
     * Update multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementsAsync
     *
     * Update multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementsAsync($zone_id, $body)
    {
        return $this->updateLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerEntitlementsAsyncWithHttpInfo
     *
     * Update multiple LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerEntitlementsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerEntitlementsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerEntitlements'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerEntitlementsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerEntitlements');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlements');
        }

        $resourcePath = '/LearnerEntitlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerExclusionByRefId
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusionByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionByRefIdWithHttpInfo
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerExclusionByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusionByRefIdAsync
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerExclusionByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerExclusionByRefIdAsyncWithHttpInfo
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerExclusionByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerExclusionByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerExclusionByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerExclusionByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerExclusionByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerExclusionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusionByRefId');
        }

        $resourcePath = '/LearnerExclusions/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerExclusions
     *
     * Update multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusions($zone_id, $body)
    {
        list($response) = $this->updateLearnerExclusionsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionsWithHttpInfo
     *
     * Update multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerExclusionsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusionsAsync
     *
     * Update multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerExclusionsAsync($zone_id, $body)
    {
        return $this->updateLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerExclusionsAsyncWithHttpInfo
     *
     * Update multiple LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerExclusionsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerExclusionsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerExclusions'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerExclusionsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerExclusions');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusions');
        }

        $resourcePath = '/LearnerExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefId
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolmentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdAsync
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerGroupEnrolmentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerGroupEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerGroupEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerGroupEnrolmentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolmentByRefId');
        }

        $resourcePath = '/LearnerGroupEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerGroupEnrolments
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolments($zone_id, $body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerGroupEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolmentsAsync
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerGroupEnrolmentsAsync($zone_id, $body)
    {
        return $this->updateLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerGroupEnrolmentsAsyncWithHttpInfo
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerGroupEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerGroupEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerGroupEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerGroupEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerGroupEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolments');
        }

        $resourcePath = '/LearnerGroupEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerPersonalByRefId
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonalByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalByRefIdWithHttpInfo
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerPersonalByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonalByRefIdAsync
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerPersonalByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerPersonalByRefIdAsyncWithHttpInfo
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerPersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerPersonalByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerPersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerPersonalByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerPersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerPersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonalByRefId');
        }

        $resourcePath = '/LearnerPersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerPersonals
     *
     * Update multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonals($zone_id, $body)
    {
        list($response) = $this->updateLearnerPersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalsWithHttpInfo
     *
     * Update multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerPersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonalsAsync
     *
     * Update multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerPersonalsAsync($zone_id, $body)
    {
        return $this->updateLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerPersonalsAsyncWithHttpInfo
     *
     * Update multiple LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerPersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerPersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerPersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerPersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerPersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonals');
        }

        $resourcePath = '/LearnerPersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefId
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolmentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdAsync
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSchoolEnrolmentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSchoolEnrolmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerSchoolEnrolmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerSchoolEnrolmentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolmentByRefId');
        }

        $resourcePath = '/LearnerSchoolEnrolments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerSchoolEnrolments
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolments($zone_id, $body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSchoolEnrolmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsAsync
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSchoolEnrolmentsAsync($zone_id, $body)
    {
        return $this->updateLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsAsyncWithHttpInfo
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSchoolEnrolmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSchoolEnrolmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerSchoolEnrolments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerSchoolEnrolmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerSchoolEnrolments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolments');
        }

        $resourcePath = '/LearnerSchoolEnrolments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefId
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedsByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedsByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefIdAsync
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSpecialNeedsByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefIdAsyncWithHttpInfo
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSpecialNeedsByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerSpecialNeedsByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerSpecialNeedsByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedsByRefId');
        }

        $resourcePath = '/LearnerSpecialNeedss/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLearnerSpecialNeedss
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedss($zone_id, $body)
    {
        list($response) = $this->updateLearnerSpecialNeedssWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedssWithHttpInfo
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedssWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSpecialNeedssRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedssAsync
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSpecialNeedssAsync($zone_id, $body)
    {
        return $this->updateLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLearnerSpecialNeedssAsyncWithHttpInfo
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLearnerSpecialNeedssAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLearnerSpecialNeedssRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLearnerSpecialNeedss'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLearnerSpecialNeedssRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLearnerSpecialNeedss');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedss');
        }

        $resourcePath = '/LearnerSpecialNeedss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLessonByRefId
     *
     * Update Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLessonByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateLessonByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLessonByRefIdWithHttpInfo
     *
     * Update Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLessonByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLessonByRefIdAsync
     *
     * Update Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLessonByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLessonByRefIdAsyncWithHttpInfo
     *
     * Update Lesson by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLessonByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLessonByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLessonByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLessonByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLessonByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLessonByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessonByRefId');
        }

        $resourcePath = '/Lessons/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLessons
     *
     * Update multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLessons($zone_id, $body)
    {
        list($response) = $this->updateLessonsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateLessonsWithHttpInfo
     *
     * Update multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLessonsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLessonsAsync
     *
     * Update multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLessonsAsync($zone_id, $body)
    {
        return $this->updateLessonsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLessonsAsyncWithHttpInfo
     *
     * Update multiple Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLessonsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateLessonsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateLessons'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLessonsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateLessons');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessons');
        }

        $resourcePath = '/Lessons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNonTeachingActivityByRefId
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivityByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivityByRefIdWithHttpInfo
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivityByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateNonTeachingActivityByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivityByRefIdAsync
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNonTeachingActivityByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateNonTeachingActivityByRefIdAsyncWithHttpInfo
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNonTeachingActivityByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateNonTeachingActivityByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateNonTeachingActivityByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNonTeachingActivityByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateNonTeachingActivityByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateNonTeachingActivityByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivityByRefId');
        }

        $resourcePath = '/NonTeachingActivitys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNonTeachingActivitys
     *
     * Update multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivitys($zone_id, $body)
    {
        list($response) = $this->updateNonTeachingActivitysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivitysWithHttpInfo
     *
     * Update multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivitysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateNonTeachingActivitysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivitysAsync
     *
     * Update multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNonTeachingActivitysAsync($zone_id, $body)
    {
        return $this->updateNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateNonTeachingActivitysAsyncWithHttpInfo
     *
     * Update multiple NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNonTeachingActivitysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateNonTeachingActivitysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateNonTeachingActivitys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNonTeachingActivitysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateNonTeachingActivitys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivitys');
        }

        $resourcePath = '/NonTeachingActivitys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefId
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferenceByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updatePersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferenceByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdAsync
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonDietaryPreferenceByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updatePersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdAsyncWithHttpInfo
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonDietaryPreferenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updatePersonDietaryPreferenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePersonDietaryPreferenceByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updatePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updatePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferenceByRefId');
        }

        $resourcePath = '/PersonDietaryPreferences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePersonDietaryPreferences
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferences($zone_id, $body)
    {
        list($response) = $this->updatePersonDietaryPreferencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferencesWithHttpInfo
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonDietaryPreferencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferencesAsync
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonDietaryPreferencesAsync($zone_id, $body)
    {
        return $this->updatePersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updatePersonDietaryPreferencesAsyncWithHttpInfo
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonDietaryPreferencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonDietaryPreferencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updatePersonDietaryPreferences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePersonDietaryPreferencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updatePersonDietaryPreferences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferences');
        }

        $resourcePath = '/PersonDietaryPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePersonPictures
     *
     * Update multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonPictures($zone_id, $body)
    {
        list($response) = $this->updatePersonPicturesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonPicturesWithHttpInfo
     *
     * Update multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonPicturesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonPicturesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePersonPicturesAsync
     *
     * Update multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonPicturesAsync($zone_id, $body)
    {
        return $this->updatePersonPicturesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updatePersonPicturesAsyncWithHttpInfo
     *
     * Update multiple PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonPicturesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updatePersonPicturesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updatePersonPictures'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePersonPicturesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updatePersonPictures');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonPictures');
        }

        $resourcePath = '/PersonPictures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolDiaryEntryByRefId
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntryByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntryByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntryByRefIdAsync
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolDiaryEntryByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolDiaryEntryByRefIdAsyncWithHttpInfo
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolDiaryEntryByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolDiaryEntryByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolDiaryEntryByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntryByRefId');
        }

        $resourcePath = '/SchoolDiaryEntrys/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolDiaryEntrys
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntrys($zone_id, $body)
    {
        list($response) = $this->updateSchoolDiaryEntrysWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntrysWithHttpInfo
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntrysWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolDiaryEntrysRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntrysAsync
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolDiaryEntrysAsync($zone_id, $body)
    {
        return $this->updateSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolDiaryEntrysAsyncWithHttpInfo
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolDiaryEntrysAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolDiaryEntrysRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolDiaryEntrys'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolDiaryEntrysRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolDiaryEntrys');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntrys');
        }

        $resourcePath = '/SchoolDiaryEntrys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolGroupByRefId
     *
     * Update SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupByRefIdWithHttpInfo
     *
     * Update SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupByRefIdAsync
     *
     * Update SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolGroupByRefIdAsyncWithHttpInfo
     *
     * Update SchoolGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolGroupByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupByRefId');
        }

        $resourcePath = '/SchoolGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolGroupTypeByRefId
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypeByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypeByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupTypeByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypeByRefIdAsync
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupTypeByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolGroupTypeByRefIdAsyncWithHttpInfo
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupTypeByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupTypeByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolGroupTypeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolGroupTypeByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypeByRefId');
        }

        $resourcePath = '/SchoolGroupTypes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolGroupTypes
     *
     * Update multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypes($zone_id, $body)
    {
        list($response) = $this->updateSchoolGroupTypesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypesWithHttpInfo
     *
     * Update multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupTypesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypesAsync
     *
     * Update multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupTypesAsync($zone_id, $body)
    {
        return $this->updateSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolGroupTypesAsyncWithHttpInfo
     *
     * Update multiple SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupTypesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupTypesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolGroupTypes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolGroupTypesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolGroupTypes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypes');
        }

        $resourcePath = '/SchoolGroupTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolGroups
     *
     * Update multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroups($zone_id, $body)
    {
        list($response) = $this->updateSchoolGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupsWithHttpInfo
     *
     * Update multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupsAsync
     *
     * Update multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupsAsync($zone_id, $body)
    {
        return $this->updateSchoolGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolGroupsAsyncWithHttpInfo
     *
     * Update multiple SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroups');
        }

        $resourcePath = '/SchoolGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolInfoByRefId
     *
     * Update SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolInfoByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolInfoByRefIdWithHttpInfo
     *
     * Update SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolInfoByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolInfoByRefIdAsync
     *
     * Update SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolInfoByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolInfoByRefIdAsyncWithHttpInfo
     *
     * Update SchoolInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolInfoByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolInfoByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolInfoByRefId');
        }

        $resourcePath = '/SchoolInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchoolInfos
     *
     * Update multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolInfos($zone_id, $body)
    {
        list($response) = $this->updateSchoolInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolInfosWithHttpInfo
     *
     * Update multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSchoolInfosAsync
     *
     * Update multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolInfosAsync($zone_id, $body)
    {
        return $this->updateSchoolInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSchoolInfosAsyncWithHttpInfo
     *
     * Update multiple SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSchoolInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateSchoolInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateSchoolInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSchoolInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateSchoolInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolInfos');
        }

        $resourcePath = '/SchoolInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScopeByRefId
     *
     * Update Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateScopeByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateScopeByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateScopeByRefIdWithHttpInfo
     *
     * Update Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopeByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateScopeByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScopeByRefIdAsync
     *
     * Update Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScopeByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateScopeByRefIdAsyncWithHttpInfo
     *
     * Update Scope by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScopeByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateScopeByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateScopeByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScopeByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateScopeByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateScopeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopeByRefId');
        }

        $resourcePath = '/Scopes/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScopes
     *
     * Update multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateScopes($zone_id, $body)
    {
        list($response) = $this->updateScopesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateScopesWithHttpInfo
     *
     * Update multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateScopesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScopesAsync
     *
     * Update multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScopesAsync($zone_id, $body)
    {
        return $this->updateScopesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateScopesAsyncWithHttpInfo
     *
     * Update multiple Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScopesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateScopesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateScopes'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScopesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateScopes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopes');
        }

        $resourcePath = '/Scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTRoomByRefId
     *
     * Update TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTRoomByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTTRoomByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTRoomByRefIdWithHttpInfo
     *
     * Update TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTRoomByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTRoomByRefIdAsync
     *
     * Update TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTRoomByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTRoomByRefIdAsyncWithHttpInfo
     *
     * Update TTRoom by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTRoomByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTRoomByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTRoomByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTRoomByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTRoomByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTRoomByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRoomByRefId');
        }

        $resourcePath = '/TTRooms/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTRooms
     *
     * Update multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTRooms($zone_id, $body)
    {
        list($response) = $this->updateTTRoomsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTTRoomsWithHttpInfo
     *
     * Update multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTRoomsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTRoomsAsync
     *
     * Update multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTRoomsAsync($zone_id, $body)
    {
        return $this->updateTTRoomsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTRoomsAsyncWithHttpInfo
     *
     * Update multiple TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTRoomsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTRoomsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTRooms'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTRoomsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTRooms');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRooms');
        }

        $resourcePath = '/TTRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTSiteByRefId
     *
     * Update TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSiteByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTTSiteByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSiteByRefIdWithHttpInfo
     *
     * Update TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSiteByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSiteByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTSiteByRefIdAsync
     *
     * Update TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSiteByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTSiteByRefIdAsyncWithHttpInfo
     *
     * Update TTSite by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSiteByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSiteByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTSiteByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTSiteByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTSiteByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSiteByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSiteByRefId');
        }

        $resourcePath = '/TTSites/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTSites
     *
     * Update multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSites($zone_id, $body)
    {
        list($response) = $this->updateTTSitesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSitesWithHttpInfo
     *
     * Update multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSitesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSitesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTSitesAsync
     *
     * Update multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSitesAsync($zone_id, $body)
    {
        return $this->updateTTSitesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTSitesAsyncWithHttpInfo
     *
     * Update multiple TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSitesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSitesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTSites'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTSitesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTSites');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSites');
        }

        $resourcePath = '/TTSites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTSubjectByRefId
     *
     * Update TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjectByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectByRefIdWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSubjectByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectByRefIdAsync
     *
     * Update TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSubjectByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTSubjectByRefIdAsyncWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSubjectByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSubjectByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTSubjectByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTSubjectByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjectByRefId');
        }

        $resourcePath = '/TTSubjects/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTSubjects
     *
     * Update multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjects($zone_id, $body)
    {
        list($response) = $this->updateTTSubjectsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectsWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSubjectsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectsAsync
     *
     * Update multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSubjectsAsync($zone_id, $body)
    {
        return $this->updateTTSubjectsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTSubjectsAsyncWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTSubjectsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTSubjectsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTSubjects'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTSubjectsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTSubjects');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjects');
        }

        $resourcePath = '/TTSubjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTTeacherByRefId
     *
     * Update TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeacherByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTTeacherByRefIdWithHttpInfo
     *
     * Update TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeacherByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTTeacherByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTTeacherByRefIdAsync
     *
     * Update TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTTeacherByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTTeacherByRefIdAsyncWithHttpInfo
     *
     * Update TTTeacher by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTTeacherByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTTeacherByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTTeacherByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTTeacherByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTTeacherByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTTeacherByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeacherByRefId');
        }

        $resourcePath = '/TTTeachers/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTTTeachers
     *
     * Update multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeachers($zone_id, $body)
    {
        list($response) = $this->updateTTTeachersWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTTTeachersWithHttpInfo
     *
     * Update multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeachersWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTTeachersRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTTTeachersAsync
     *
     * Update multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTTeachersAsync($zone_id, $body)
    {
        return $this->updateTTTeachersAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTTTeachersAsyncWithHttpInfo
     *
     * Update multiple TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTTTeachersAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTTTeachersRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTTTeachers'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTTTeachersRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTTTeachers');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeachers');
        }

        $resourcePath = '/TTTeachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTeachingGroupByRefId
     *
     * Update TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTeachingGroupByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupByRefIdWithHttpInfo
     *
     * Update TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTeachingGroupByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroupByRefIdAsync
     *
     * Update TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeachingGroupByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTeachingGroupByRefIdAsyncWithHttpInfo
     *
     * Update TeachingGroup by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeachingGroupByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTeachingGroupByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTeachingGroupByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTeachingGroupByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTeachingGroupByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTeachingGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroupByRefId');
        }

        $resourcePath = '/TeachingGroups/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTeachingGroups
     *
     * Update multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTeachingGroups($zone_id, $body)
    {
        list($response) = $this->updateTeachingGroupsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupsWithHttpInfo
     *
     * Update multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTeachingGroupsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroupsAsync
     *
     * Update multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeachingGroupsAsync($zone_id, $body)
    {
        return $this->updateTeachingGroupsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTeachingGroupsAsyncWithHttpInfo
     *
     * Update multiple TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTeachingGroupsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTeachingGroupsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTeachingGroups'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTeachingGroupsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTeachingGroups');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroups');
        }

        $resourcePath = '/TeachingGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTermInfoByRefId
     *
     * Update TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTermInfoByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateTermInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTermInfoByRefIdWithHttpInfo
     *
     * Update TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfoByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTermInfoByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTermInfoByRefIdAsync
     *
     * Update TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermInfoByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTermInfoByRefIdAsyncWithHttpInfo
     *
     * Update TermInfo by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermInfoByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTermInfoByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTermInfoByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTermInfoByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTermInfoByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTermInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfoByRefId');
        }

        $resourcePath = '/TermInfos/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTermInfos
     *
     * Update multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTermInfos($zone_id, $body)
    {
        list($response) = $this->updateTermInfosWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateTermInfosWithHttpInfo
     *
     * Update multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfosWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTermInfosRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTermInfosAsync
     *
     * Update multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermInfosAsync($zone_id, $body)
    {
        return $this->updateTermInfosAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTermInfosAsyncWithHttpInfo
     *
     * Update multiple TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermInfosAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateTermInfosRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateTermInfos'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTermInfosRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateTermInfos');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfos');
        }

        $resourcePath = '/TermInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAbsenceByRefId
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsenceByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsenceByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsenceByRefIdAsync
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAbsenceByRefIdAsyncWithHttpInfo
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAbsenceByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAbsenceByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsenceByRefId');
        }

        $resourcePath = '/WorkforceAbsences/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforceAssignmentRefId
     *
     * Update WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsenceByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id, $body)
    {
        list($response) = $this->updateWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Update WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsenceByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforceAssignmentRefIdAsync
     *
     * Update WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id, $body)
    {
        return $this->updateWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Update WorkforceAbsence by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAbsenceByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAbsenceByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAbsenceByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling updateWorkforceAbsenceByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsenceByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforcePersonalRefId
     *
     * Update WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsenceByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id, $body)
    {
        list($response) = $this->updateWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo
     *
     * Update WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsenceByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforcePersonalRefIdAsync
     *
     * Update WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id, $body)
    {
        return $this->updateWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Update WorkforceAbsence by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsenceByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAbsenceByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAbsenceByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAbsenceByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling updateWorkforceAbsenceByWorkforcePersonalRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsenceByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAbsences/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAbsences
     *
     * Update multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsences($zone_id, $body)
    {
        list($response) = $this->updateWorkforceAbsencesWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsencesWithHttpInfo
     *
     * Update multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsencesWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsencesRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsencesAsync
     *
     * Update multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsencesAsync($zone_id, $body)
    {
        return $this->updateWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAbsencesAsyncWithHttpInfo
     *
     * Update multiple WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAbsencesAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAbsencesRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAbsences'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAbsencesRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAbsences');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsences');
        }

        $resourcePath = '/WorkforceAbsences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAssignmentByRefId
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignmentByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignmentByRefIdAsync
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAssignmentByRefIdAsyncWithHttpInfo
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAssignmentByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAssignmentByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignmentByRefId');
        }

        $resourcePath = '/WorkforceAssignments/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAssignmentByWorkforcePersonalRefId
     *
     * Update WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignmentByWorkforcePersonalRefId($zone_id, $workforce_personal_ref_id, $body)
    {
        list($response) = $this->updateWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo
     *
     * Update WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentByWorkforcePersonalRefIdWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignmentByWorkforcePersonalRefIdAsync
     *
     * Update WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentByWorkforcePersonalRefIdAsync($zone_id, $workforce_personal_ref_id, $body)
    {
        return $this->updateWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo
     *
     * Update WorkforceAssignment by WorkforcePersonalRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentByWorkforcePersonalRefIdAsyncWithHttpInfo($zone_id, $workforce_personal_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAssignmentByWorkforcePersonalRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_personal_ref_id WorkforcePersonalRefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAssignmentByWorkforcePersonalRefIdRequest($zone_id, $workforce_personal_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAssignmentByWorkforcePersonalRefId');
        }
        // verify the required parameter 'workforce_personal_ref_id' is set
        if ($workforce_personal_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_personal_ref_id when calling updateWorkforceAssignmentByWorkforcePersonalRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignmentByWorkforcePersonalRefId');
        }

        $resourcePath = '/WorkforceAssignments/{WorkforcePersonalRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_personal_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforcePersonalRefId' . '}', ObjectSerializer::toPathValue($workforce_personal_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceAssignments
     *
     * Update multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignments($zone_id, $body)
    {
        list($response) = $this->updateWorkforceAssignmentsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentsWithHttpInfo
     *
     * Update multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignmentsAsync
     *
     * Update multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentsAsync($zone_id, $body)
    {
        return $this->updateWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceAssignmentsAsyncWithHttpInfo
     *
     * Update multiple WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceAssignmentsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceAssignmentsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceAssignments'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceAssignmentsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceAssignments');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignments');
        }

        $resourcePath = '/WorkforceAssignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceContractByRefId
     *
     * Update WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContractByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractByRefIdWithHttpInfo
     *
     * Update WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContractByRefIdAsync
     *
     * Update WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceContractByRefIdAsyncWithHttpInfo
     *
     * Update WorkforceContract by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceContractByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceContractByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceContractByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceContractByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContractByRefId');
        }

        $resourcePath = '/WorkforceContracts/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceContractByWorkforceAssignmentRefId
     *
     * Update WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContractByWorkforceAssignmentRefId($zone_id, $workforce_assignment_ref_id, $body)
    {
        list($response) = $this->updateWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo
     *
     * Update WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractByWorkforceAssignmentRefIdWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContractByWorkforceAssignmentRefIdAsync
     *
     * Update WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractByWorkforceAssignmentRefIdAsync($zone_id, $workforce_assignment_ref_id, $body)
    {
        return $this->updateWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo
     *
     * Update WorkforceContract by WorkforceAssignmentRefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractByWorkforceAssignmentRefIdAsyncWithHttpInfo($zone_id, $workforce_assignment_ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceContractByWorkforceAssignmentRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $workforce_assignment_ref_id WorkforceAssignmentRefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceContractByWorkforceAssignmentRefIdRequest($zone_id, $workforce_assignment_ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceContractByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'workforce_assignment_ref_id' is set
        if ($workforce_assignment_ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workforce_assignment_ref_id when calling updateWorkforceContractByWorkforceAssignmentRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContractByWorkforceAssignmentRefId');
        }

        $resourcePath = '/WorkforceContracts/{WorkforceAssignmentRefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($workforce_assignment_ref_id !== null) {
            $resourcePath = str_replace('{' . 'WorkforceAssignmentRefId' . '}', ObjectSerializer::toPathValue($workforce_assignment_ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforceContracts
     *
     * Update multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContracts($zone_id, $body)
    {
        list($response) = $this->updateWorkforceContractsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractsWithHttpInfo
     *
     * Update multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContractsAsync
     *
     * Update multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractsAsync($zone_id, $body)
    {
        return $this->updateWorkforceContractsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforceContractsAsyncWithHttpInfo
     *
     * Update multiple WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforceContractsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforceContractsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforceContracts'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforceContractsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforceContracts');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContracts');
        }

        $resourcePath = '/WorkforceContracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforcePersonalByRefId
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonalByRefId($zone_id, $ref_id, $body)
    {
        list($response) = $this->updateWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalByRefIdWithHttpInfo
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalByRefIdWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforcePersonalByRefIdRequest($zone_id, $ref_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonalByRefIdAsync
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforcePersonalByRefIdAsync($zone_id, $ref_id, $body)
    {
        return $this->updateWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforcePersonalByRefIdAsyncWithHttpInfo
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforcePersonalByRefIdAsyncWithHttpInfo($zone_id, $ref_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforcePersonalByRefIdRequest($zone_id, $ref_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforcePersonalByRefId'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforcePersonalByRefIdRequest($zone_id, $ref_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforcePersonalByRefId');
        }
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforcePersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonalByRefId');
        }

        $resourcePath = '/WorkforcePersonals/{RefId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace('{' . 'RefId' . '}', ObjectSerializer::toPathValue($ref_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkforcePersonals
     *
     * Update multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonals($zone_id, $body)
    {
        list($response) = $this->updateWorkforcePersonalsWithHttpInfo($zone_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalsWithHttpInfo
     *
     * Update multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalsWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforcePersonalsRequest($zone_id, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonalsAsync
     *
     * Update multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforcePersonalsAsync($zone_id, $body)
    {
        return $this->updateWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWorkforcePersonalsAsyncWithHttpInfo
     *
     * Update multiple WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkforcePersonalsAsyncWithHttpInfo($zone_id, $body)
    {
        $returnType = '\DataExchange\SIFUK20\Models\SifUpdateResponse';
        $request = $this->updateWorkforcePersonalsRequest($zone_id, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    if (isset($response->getHeaders()['Content-Type']) && stripos(implode($response->getHeaders()['Content-Type'], '::'), 'application/xml') !== false) {
                        $content = simplexml_load_string($content);
                    } else {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, $response->getHeaders()),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateWorkforcePersonals'
     *
     * @param string $zone_id The id of the zone to request data from. (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWorkforcePersonalsRequest($zone_id, $body)
    {
        // verify the required parameter 'zone_id' is set
        if ($zone_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_id when calling updateWorkforcePersonals');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonals');
        }

        $resourcePath = '/WorkforcePersonals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = ObjectSerializer::toHeaderValue($zone_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } elseif ($headers['Content-Type'] === 'application/xml') {
                // $httpBody = $formParams->asXML();
                dd($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
