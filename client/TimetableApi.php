<?php
/**
 * TimetableApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\UK\20;

use \DataExchange\UK\20\ApiClient;
use \DataExchange\UK\20\ApiException;
use \DataExchange\UK\20\Configuration;
use \DataExchange\UK\20\ObjectSerializer;

/**
 * TimetableApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimetableApi
{
    /**
     * API Client
     *
     * @var \DataExchange\UK\20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\UK\20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\UK\20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.staging.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\UK\20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\UK\20\ApiClient $apiClient set the API client
     *
     * @return TimetableApi
     */
    public function setApiClient(\DataExchange\UK\20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createCycles
     *
     * Create multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createCycles($body)
    {
        list($response) = $this->createCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createCyclesWithHttpInfo
     *
     * Create multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createJunctions
     *
     * Create multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createJunctions($body)
    {
        list($response) = $this->createJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createJunctionsWithHttpInfo
     *
     * Create multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerGroupEnrolments
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerGroupEnrolments($body)
    {
        list($response) = $this->createLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerGroupEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerSchoolEnrolments
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerSchoolEnrolments($body)
    {
        list($response) = $this->createLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLessons
     *
     * Create multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLessons($body)
    {
        list($response) = $this->createLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLessonsWithHttpInfo
     *
     * Create multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createNonTeachingActivitys
     *
     * Create multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createNonTeachingActivitys($body)
    {
        list($response) = $this->createNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createNonTeachingActivitysWithHttpInfo
     *
     * Create multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolDiaryEntrys
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createSchoolDiaryEntrys($body)
    {
        list($response) = $this->createSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolDiaryEntrysWithHttpInfo
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolGroupTypes
     *
     * Create multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createSchoolGroupTypes($body)
    {
        list($response) = $this->createSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolGroupTypesWithHttpInfo
     *
     * Create multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolGroups
     *
     * Create multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createSchoolGroups($body)
    {
        list($response) = $this->createSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolGroupsWithHttpInfo
     *
     * Create multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createScopes
     *
     * Create multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createScopes($body)
    {
        list($response) = $this->createScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createScopesWithHttpInfo
     *
     * Create multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTRooms
     *
     * Create multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTTRooms($body)
    {
        list($response) = $this->createTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTRoomsWithHttpInfo
     *
     * Create multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSites
     *
     * Create multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTTSites($body)
    {
        list($response) = $this->createTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSitesWithHttpInfo
     *
     * Create multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSubjects
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTTSubjects($body)
    {
        list($response) = $this->createTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSubjectsWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTTeachers
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTTTeachers($body)
    {
        list($response) = $this->createTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTTeachersWithHttpInfo
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTeachingGroups
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTeachingGroups($body)
    {
        list($response) = $this->createTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTeachingGroupsWithHttpInfo
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTermInfos
     *
     * Create multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTermInfos($body)
    {
        list($response) = $this->createTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTermInfosWithHttpInfo
     *
     * Create multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCycleByRefId
     *
     * Delete Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteCycleByRefId($ref_id)
    {
        list($response) = $this->deleteCycleByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteCycleByRefIdWithHttpInfo
     *
     * Delete Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCycleByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCycles
     *
     * Delete multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteCycles($body)
    {
        list($response) = $this->deleteCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteCyclesWithHttpInfo
     *
     * Delete multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJunctionByRefId
     *
     * Delete Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteJunctionByRefId($ref_id)
    {
        list($response) = $this->deleteJunctionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteJunctionByRefIdWithHttpInfo
     *
     * Delete Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJunctions
     *
     * Delete multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteJunctions($body)
    {
        list($response) = $this->deleteJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteJunctionsWithHttpInfo
     *
     * Delete multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefId
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolments
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolments($body)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefId
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolments
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolments($body)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLessonByRefId
     *
     * Delete Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLessonByRefId($ref_id)
    {
        list($response) = $this->deleteLessonByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLessonByRefIdWithHttpInfo
     *
     * Delete Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLessons
     *
     * Delete multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLessons($body)
    {
        list($response) = $this->deleteLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLessonsWithHttpInfo
     *
     * Delete multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivityByRefId
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivityByRefId($ref_id)
    {
        list($response) = $this->deleteNonTeachingActivityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivityByRefIdWithHttpInfo
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivitys
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivitys($body)
    {
        list($response) = $this->deleteNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivitysWithHttpInfo
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefId
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntryByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolDiaryEntryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntrys
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntrys($body)
    {
        list($response) = $this->deleteSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntrysWithHttpInfo
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupByRefId
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupByRefIdWithHttpInfo
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypeByRefId
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypeByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolGroupTypeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypes
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypes($body)
    {
        list($response) = $this->deleteSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypesWithHttpInfo
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroups
     *
     * Delete multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroups($body)
    {
        list($response) = $this->deleteSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupsWithHttpInfo
     *
     * Delete multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteScopeByRefId
     *
     * Delete Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteScopeByRefId($ref_id)
    {
        list($response) = $this->deleteScopeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteScopeByRefIdWithHttpInfo
     *
     * Delete Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteScopes
     *
     * Delete multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteScopes($body)
    {
        list($response) = $this->deleteScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteScopesWithHttpInfo
     *
     * Delete multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTRoomByRefId
     *
     * Delete TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTRoomByRefId($ref_id)
    {
        list($response) = $this->deleteTTRoomByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTRoomByRefIdWithHttpInfo
     *
     * Delete TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTRooms
     *
     * Delete multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTRooms($body)
    {
        list($response) = $this->deleteTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTRoomsWithHttpInfo
     *
     * Delete multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSiteByRefId
     *
     * Delete TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSiteByRefId($ref_id)
    {
        list($response) = $this->deleteTTSiteByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSiteByRefIdWithHttpInfo
     *
     * Delete TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSiteByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSites
     *
     * Delete multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSites($body)
    {
        list($response) = $this->deleteTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSitesWithHttpInfo
     *
     * Delete multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectByRefId
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSubjectByRefId($ref_id)
    {
        list($response) = $this->deleteTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSubjectByRefIdWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjects
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSubjects($body)
    {
        list($response) = $this->deleteTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSubjectsWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeacherByRefId
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTTeacherByRefId($ref_id)
    {
        list($response) = $this->deleteTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTTeacherByRefIdWithHttpInfo
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeachers
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTTeachers($body)
    {
        list($response) = $this->deleteTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTTeachersWithHttpInfo
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroupByRefId
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->deleteTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupByRefIdWithHttpInfo
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroups
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroups($body)
    {
        list($response) = $this->deleteTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupsWithHttpInfo
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTermInfoByRefId
     *
     * Delete TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTermInfoByRefId($ref_id)
    {
        list($response) = $this->deleteTermInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTermInfoByRefIdWithHttpInfo
     *
     * Delete TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTermInfos
     *
     * Delete multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTermInfos($body)
    {
        list($response) = $this->deleteTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTermInfosWithHttpInfo
     *
     * Delete multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCycleByRefId
     *
     * Find Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Cycles
     */
    public function getCycleByRefId($ref_id)
    {
        list($response) = $this->getCycleByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getCycleByRefIdWithHttpInfo
     *
     * Find Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCycleByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Cycles',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Cycles', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCycles
     *
     * Return all Cycles
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Cycles
     */
    public function getCycles($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getCyclesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getCyclesWithHttpInfo
     *
     * Return all Cycles
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCyclesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Cycles',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Cycles', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJunctionByRefId
     *
     * Find Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Junctions
     */
    public function getJunctionByRefId($ref_id)
    {
        list($response) = $this->getJunctionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getJunctionByRefIdWithHttpInfo
     *
     * Find Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Junctions',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Junctions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJunctions
     *
     * Return all Junctions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Junctions
     */
    public function getJunctions($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getJunctionsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getJunctionsWithHttpInfo
     *
     * Return all Junctions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Junctions',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Junctions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefId
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolments
     *
     * Return all LearnerGroupEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolments($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerGroupEnrolmentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentsWithHttpInfo
     *
     * Return all LearnerGroupEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefId
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolments
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolments($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerSchoolEnrolmentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLessonByRefId
     *
     * Find Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Lessons
     */
    public function getLessonByRefId($ref_id)
    {
        list($response) = $this->getLessonByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLessonByRefIdWithHttpInfo
     *
     * Find Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Lessons',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Lessons', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLessons
     *
     * Return all Lessons
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Lessons
     */
    public function getLessons($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLessonsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLessonsWithHttpInfo
     *
     * Return all Lessons
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Lessons',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Lessons', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivityByRefId
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivityByRefId($ref_id)
    {
        list($response) = $this->getNonTeachingActivityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getNonTeachingActivityByRefIdWithHttpInfo
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\NonTeachingActivitys',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\NonTeachingActivitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivitys
     *
     * Return all NonTeachingActivitys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivitys($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getNonTeachingActivitysWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getNonTeachingActivitysWithHttpInfo
     *
     * Return all NonTeachingActivitys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivitysWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\NonTeachingActivitys',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\NonTeachingActivitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntryByRefId
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntryByRefId($ref_id)
    {
        list($response) = $this->getSchoolDiaryEntryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolDiaryEntrys',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolDiaryEntrys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntrys
     *
     * Return all SchoolDiaryEntrys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntrys($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolDiaryEntrysWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntrysWithHttpInfo
     *
     * Return all SchoolDiaryEntrys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntrysWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolDiaryEntrys',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolDiaryEntrys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupByRefId
     *
     * Find SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolGroups
     */
    public function getSchoolGroupByRefId($ref_id)
    {
        list($response) = $this->getSchoolGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupByRefIdWithHttpInfo
     *
     * Find SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolGroups',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypeByRefId
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypeByRefId($ref_id)
    {
        list($response) = $this->getSchoolGroupTypeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolGroupTypes',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolGroupTypes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypes
     *
     * Return all SchoolGroupTypes
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypes($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolGroupTypesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypesWithHttpInfo
     *
     * Return all SchoolGroupTypes
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolGroupTypes',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolGroupTypes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroups
     *
     * Return all SchoolGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SchoolGroups
     */
    public function getSchoolGroups($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolGroupsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolGroupsWithHttpInfo
     *
     * Return all SchoolGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SchoolGroups',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SchoolGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScopeByRefId
     *
     * Find Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Scopes
     */
    public function getScopeByRefId($ref_id)
    {
        list($response) = $this->getScopeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getScopeByRefIdWithHttpInfo
     *
     * Find Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Scopes',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Scopes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScopes
     *
     * Return all Scopes
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\Scopes
     */
    public function getScopes($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getScopesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getScopesWithHttpInfo
     *
     * Return all Scopes
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\Scopes',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\Scopes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTRoomByRefId
     *
     * Find TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTRooms
     */
    public function getTTRoomByRefId($ref_id)
    {
        list($response) = $this->getTTRoomByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTRoomByRefIdWithHttpInfo
     *
     * Find TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTRooms',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTRooms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTRooms
     *
     * Return all TTRooms
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTRooms
     */
    public function getTTRooms($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTRoomsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTRoomsWithHttpInfo
     *
     * Return all TTRooms
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTRooms',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTRooms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSiteByRefId
     *
     * Find TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSites
     */
    public function getTTSiteByRefId($ref_id)
    {
        list($response) = $this->getTTSiteByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSiteByRefIdWithHttpInfo
     *
     * Find TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSiteByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSites',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSites', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSites
     *
     * Return all TTSites
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSites
     */
    public function getTTSites($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSitesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSitesWithHttpInfo
     *
     * Return all TTSites
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSitesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSites',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSites', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjectByRefId
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSubjects
     */
    public function getTTSubjectByRefId($ref_id)
    {
        list($response) = $this->getTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSubjectByRefIdWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSubjects',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjects
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSubjects
     */
    public function getTTSubjects($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSubjectsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSubjectsWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSubjects',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeacherByRefId
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTTeachers
     */
    public function getTTTeacherByRefId($ref_id)
    {
        list($response) = $this->getTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTTeacherByRefIdWithHttpInfo
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTTeachers',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeachers
     *
     * Return all TTTeachers
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTTeachers
     */
    public function getTTTeachers($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTTeachersWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTTeachersWithHttpInfo
     *
     * Return all TTTeachers
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeachersWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTTeachers',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroupByRefId
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TeachingGroups
     */
    public function getTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->getTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTeachingGroupByRefIdWithHttpInfo
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TeachingGroups',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroups
     *
     * Return all TeachingGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TeachingGroups
     */
    public function getTeachingGroups($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTeachingGroupsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTeachingGroupsWithHttpInfo
     *
     * Return all TeachingGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TeachingGroups',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTermInfoByRefId
     *
     * Find TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TermInfos
     */
    public function getTermInfoByRefId($ref_id)
    {
        list($response) = $this->getTermInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTermInfoByRefIdWithHttpInfo
     *
     * Find TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TermInfos',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TermInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTermInfos
     *
     * Return all TermInfos
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TermInfos
     */
    public function getTermInfos($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTermInfosWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTermInfosWithHttpInfo
     *
     * Return all TermInfos
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfosWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TermInfos',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TermInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCycleByRefId
     *
     * Update Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\UK\20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateCycleByRefId($ref_id, $body)
    {
        list($response) = $this->updateCycleByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateCycleByRefIdWithHttpInfo
     *
     * Update Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\UK\20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCycleByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateCycleByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCycles
     *
     * Update multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateCycles($body)
    {
        list($response) = $this->updateCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateCyclesWithHttpInfo
     *
     * Update multiple Cycles
     *
     * @param \DataExchange\UK\20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJunctionByRefId
     *
     * Update Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\UK\20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateJunctionByRefId($ref_id, $body)
    {
        list($response) = $this->updateJunctionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateJunctionByRefIdWithHttpInfo
     *
     * Update Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\UK\20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateJunctionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJunctions
     *
     * Update multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateJunctions($body)
    {
        list($response) = $this->updateJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateJunctionsWithHttpInfo
     *
     * Update multiple Junctions
     *
     * @param \DataExchange\UK\20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefId
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolments
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolments($body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefId
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolments
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolments($body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLessonByRefId
     *
     * Update Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\UK\20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLessonByRefId($ref_id, $body)
    {
        list($response) = $this->updateLessonByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLessonByRefIdWithHttpInfo
     *
     * Update Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\UK\20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLessonByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLessons
     *
     * Update multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLessons($body)
    {
        list($response) = $this->updateLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLessonsWithHttpInfo
     *
     * Update multiple Lessons
     *
     * @param \DataExchange\UK\20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivityByRefId
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\UK\20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivityByRefId($ref_id, $body)
    {
        list($response) = $this->updateNonTeachingActivityByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivityByRefIdWithHttpInfo
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\UK\20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivityByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateNonTeachingActivityByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivitys
     *
     * Update multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivitys($body)
    {
        list($response) = $this->updateNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivitysWithHttpInfo
     *
     * Update multiple NonTeachingActivitys
     *
     * @param \DataExchange\UK\20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntryByRefId
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntryByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolDiaryEntryByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntryByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntrys
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntrys($body)
    {
        list($response) = $this->updateSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntrysWithHttpInfo
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\UK\20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupByRefId
     *
     * Update SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\UK\20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupByRefIdWithHttpInfo
     *
     * Update SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\UK\20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypeByRefId
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\UK\20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypeByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupTypeByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\UK\20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypeByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypes
     *
     * Update multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypes($body)
    {
        list($response) = $this->updateSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypesWithHttpInfo
     *
     * Update multiple SchoolGroupTypes
     *
     * @param \DataExchange\UK\20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroups
     *
     * Update multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateSchoolGroups($body)
    {
        list($response) = $this->updateSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupsWithHttpInfo
     *
     * Update multiple SchoolGroups
     *
     * @param \DataExchange\UK\20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateScopeByRefId
     *
     * Update Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\UK\20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateScopeByRefId($ref_id, $body)
    {
        list($response) = $this->updateScopeByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateScopeByRefIdWithHttpInfo
     *
     * Update Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\UK\20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopeByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateScopeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateScopes
     *
     * Update multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateScopes($body)
    {
        list($response) = $this->updateScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateScopesWithHttpInfo
     *
     * Update multiple Scopes
     *
     * @param \DataExchange\UK\20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTRoomByRefId
     *
     * Update TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\UK\20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTRoomByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTRoomByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTRoomByRefIdWithHttpInfo
     *
     * Update TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\UK\20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTRoomByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTRooms
     *
     * Update multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTRooms($body)
    {
        list($response) = $this->updateTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTRoomsWithHttpInfo
     *
     * Update multiple TTRooms
     *
     * @param \DataExchange\UK\20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSiteByRefId
     *
     * Update TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\UK\20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSiteByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSiteByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSiteByRefIdWithHttpInfo
     *
     * Update TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\UK\20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSiteByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSiteByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSites
     *
     * Update multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSites($body)
    {
        list($response) = $this->updateTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSitesWithHttpInfo
     *
     * Update multiple TTSites
     *
     * @param \DataExchange\UK\20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectByRefId
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\UK\20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSubjectByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSubjectByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectByRefIdWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\UK\20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjects
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSubjects($body)
    {
        list($response) = $this->updateTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSubjectsWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeacherByRefId
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\UK\20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTTeacherByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTTeacherByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTTeacherByRefIdWithHttpInfo
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\UK\20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeacherByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTTeacherByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeachers
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTTeachers($body)
    {
        list($response) = $this->updateTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTTeachersWithHttpInfo
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\UK\20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroupByRefId
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\UK\20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTeachingGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupByRefIdWithHttpInfo
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\UK\20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTeachingGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroups
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTeachingGroups($body)
    {
        list($response) = $this->updateTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupsWithHttpInfo
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTermInfoByRefId
     *
     * Update TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\UK\20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTermInfoByRefId($ref_id, $body)
    {
        list($response) = $this->updateTermInfoByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTermInfoByRefIdWithHttpInfo
     *
     * Update TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\UK\20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfoByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTermInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTermInfos
     *
     * Update multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTermInfos($body)
    {
        list($response) = $this->updateTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTermInfosWithHttpInfo
     *
     * Update multiple TermInfos
     *
     * @param \DataExchange\UK\20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
