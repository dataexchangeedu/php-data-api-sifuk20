<?php
/**
 * AssessmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20;

use \DataExchange\SIFUK20\ApiClient;
use \DataExchange\SIFUK20\ApiException;
use \DataExchange\SIFUK20\Configuration;
use \DataExchange\SIFUK20\ObjectSerializer;

/**
 * AssessmentsApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssessmentsApi
{
    /**
     * API Client
     *
     * @var \DataExchange\SIFUK20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\SIFUK20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\SIFUK20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.staging.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\SIFUK20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\SIFUK20\ApiClient $apiClient set the API client
     *
     * @return AssessmentsApi
     */
    public function setApiClient(\DataExchange\SIFUK20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAssessmentLearnerSets
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentLearnerSets($body)
    {
        list($response) = $this->createAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentLearnerSetsWithHttpInfo
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponentGroups
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->createAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponents
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponents($body)
    {
        list($response) = $this->createAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponentGroups
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponentGroups($body)
    {
        list($response) = $this->createAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponents
     *
     * Create multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponents($body)
    {
        list($response) = $this->createAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentsWithHttpInfo
     *
     * Create multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultGradeSets
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultGradeSets($body)
    {
        list($response) = $this->createAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultGradeSetsWithHttpInfo
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentSessions
     *
     * Create multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentSessions($body)
    {
        list($response) = $this->createAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentSessionsWithHttpInfo
     *
     * Create multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResponseSets
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->createLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResults
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResults($body)
    {
        list($response) = $this->createLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResultsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefId
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSets
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSets($body)
    {
        list($response) = $this->deleteAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetsWithHttpInfo
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefId
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefId
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroupByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroups
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponents
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponents($body)
    {
        list($response) = $this->deleteAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentByRefId
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefId
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroupByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroups
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroups($body)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponents
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponents($body)
    {
        list($response) = $this->deleteAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefId
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSetByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSets
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSets($body)
    {
        list($response) = $this->deleteAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetsWithHttpInfo
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessionByRefId
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessionByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentSessionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionByRefIdWithHttpInfo
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessions
     *
     * Delete multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessions($body)
    {
        list($response) = $this->deleteAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionsWithHttpInfo
     *
     * Delete multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefId
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSets
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefId
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResults
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResults($body)
    {
        list($response) = $this->deleteLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSetByRefId
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSets
     *
     * Return all AssessmentLearnerSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSets($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentLearnerSetsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetsWithHttpInfo
     *
     * Return all AssessmentLearnerSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentByRefId
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponentByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponents',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefId
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroupByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroups
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroups($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResponseComponentGroupsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponents
     *
     * Return all AssessmentResponseComponents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponents($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResponseComponentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentsWithHttpInfo
     *
     * Return all AssessmentResponseComponents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponents',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentByRefId
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponentByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponents',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefId
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroupByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroups
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroups($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultComponentGroupsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponents
     *
     * Return all AssessmentResultComponents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponents($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultComponentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentsWithHttpInfo
     *
     * Return all AssessmentResultComponents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponents',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSetByRefId
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSetByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSets
     *
     * Return all AssessmentResultGradeSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSets($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultGradeSetsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetsWithHttpInfo
     *
     * Return all AssessmentResultGradeSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessionByRefId
     *
     * Find AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessionByRefId($ref_id)
    {
        list($response) = $this->getAssessmentSessionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentSessionByRefIdWithHttpInfo
     *
     * Find AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentSessions',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentSessions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessions
     *
     * Return all AssessmentSessions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessions($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentSessionsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentSessionsWithHttpInfo
     *
     * Return all AssessmentSessions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentSessions',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentSessions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefId
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSets
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSets($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResponseSetsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResultByRefId
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResults
     *
     * Return all LearnerAssessmentResults
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResults($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResultsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultsWithHttpInfo
     *
     * Return all LearnerAssessmentResults
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSetByRefId
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSets
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSets($body)
    {
        list($response) = $this->updateAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetsWithHttpInfo
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentByRefId
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefId
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroups
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponents
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponents($body)
    {
        list($response) = $this->updateAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentByRefId
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefId
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroups
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroups($body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponents
     *
     * Update multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponents($body)
    {
        list($response) = $this->updateAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentsWithHttpInfo
     *
     * Update multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefId
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSets
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSets($body)
    {
        list($response) = $this->updateAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetsWithHttpInfo
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessionByRefId
     *
     * Update AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessionByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentSessionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionByRefIdWithHttpInfo
     *
     * Update AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentSessionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessions
     *
     * Update multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessions($body)
    {
        list($response) = $this->updateAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionsWithHttpInfo
     *
     * Update multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefId
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSets
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResultByRefId
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResultByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResults
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResults($body)
    {
        list($response) = $this->updateLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
