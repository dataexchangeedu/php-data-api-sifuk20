<?php
/**
 * TeachersApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20;

use \DataExchange\SIFUK20\ApiClient;
use \DataExchange\SIFUK20\ApiException;
use \DataExchange\SIFUK20\Configuration;
use \DataExchange\SIFUK20\ObjectSerializer;

/**
 * TeachersApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeachersApi
{
    /**
     * API Client
     *
     * @var \DataExchange\SIFUK20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\SIFUK20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\SIFUK20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.staging.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\SIFUK20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\SIFUK20\ApiClient $apiClient set the API client
     *
     * @return TeachersApi
     */
    public function setApiClient(\DataExchange\SIFUK20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPersonDietaryPreferences
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createPersonDietaryPreferences($body)
    {
        list($response) = $this->createPersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createPersonDietaryPreferencesWithHttpInfo
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSubjects
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTSubjects($body)
    {
        list($response) = $this->createTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSubjectsWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTTeachers
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTTeachers($body)
    {
        list($response) = $this->createTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTTeachersWithHttpInfo
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceAbsences
     *
     * Create multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAbsences($body)
    {
        list($response) = $this->createWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceAbsencesWithHttpInfo
     *
     * Create multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceAssignments
     *
     * Create multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAssignments($body)
    {
        list($response) = $this->createWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceAssignmentsWithHttpInfo
     *
     * Create multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceContracts
     *
     * Create multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceContracts($body)
    {
        list($response) = $this->createWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceContractsWithHttpInfo
     *
     * Create multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforcePersonals
     *
     * Create multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforcePersonals($body)
    {
        list($response) = $this->createWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforcePersonalsWithHttpInfo
     *
     * Create multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefId
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deletePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferences
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferences($body)
    {
        list($response) = $this->deletePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferencesWithHttpInfo
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectByRefId
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjectByRefId($ref_id)
    {
        list($response) = $this->deleteTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSubjectByRefIdWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjects
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjects($body)
    {
        list($response) = $this->deleteTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSubjectsWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeacherByRefId
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeacherByRefId($ref_id)
    {
        list($response) = $this->deleteTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTTeacherByRefIdWithHttpInfo
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeachers
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeachers($body)
    {
        list($response) = $this->deleteTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTTeachersWithHttpInfo
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsenceByRefId
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsenceByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceAbsenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsences
     *
     * Delete multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsences($body)
    {
        list($response) = $this->deleteWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsencesWithHttpInfo
     *
     * Delete multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignmentByRefId
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignmentByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceAssignmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignments
     *
     * Delete multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignments($body)
    {
        list($response) = $this->deleteWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentsWithHttpInfo
     *
     * Delete multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContractByRefId
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContractByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceContractByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractByRefIdWithHttpInfo
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContracts
     *
     * Delete multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContracts($body)
    {
        list($response) = $this->deleteWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractsWithHttpInfo
     *
     * Delete multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonalByRefId
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonalByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforcePersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalByRefIdWithHttpInfo
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonals
     *
     * Delete multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonals($body)
    {
        list($response) = $this->deleteWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalsWithHttpInfo
     *
     * Delete multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferenceByRefId
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getPersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferences
     *
     * Return all PersonDietaryPreferences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferences($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getPersonDietaryPreferencesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferencesWithHttpInfo
     *
     * Return all PersonDietaryPreferences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferencesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjectByRefId
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjectByRefId($ref_id)
    {
        list($response) = $this->getTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSubjectByRefIdWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSubjects',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjects
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjects($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSubjectsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSubjectsWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSubjects',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeacherByRefId
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeacherByRefId($ref_id)
    {
        list($response) = $this->getTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTTeacherByRefIdWithHttpInfo
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTTeachers',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeachers
     *
     * Return all TTTeachers
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeachers($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTTeachersWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTTeachersWithHttpInfo
     *
     * Return all TTTeachers
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeachersWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTTeachers',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsenceByRefId
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsenceByRefId($ref_id)
    {
        list($response) = $this->getWorkforceAbsenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAbsences',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAbsences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsences
     *
     * Return all WorkforceAbsences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsences($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceAbsencesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceAbsencesWithHttpInfo
     *
     * Return all WorkforceAbsences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsencesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAbsences',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAbsences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignmentByRefId
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignmentByRefId($ref_id)
    {
        list($response) = $this->getWorkforceAssignmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAssignments',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAssignments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignments
     *
     * Return all WorkforceAssignments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignments($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceAssignmentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentsWithHttpInfo
     *
     * Return all WorkforceAssignments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAssignments',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAssignments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceContractByRefId
     *
     * Find WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContractByRefId($ref_id)
    {
        list($response) = $this->getWorkforceContractByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceContractByRefIdWithHttpInfo
     *
     * Find WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceContracts',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceContracts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceContracts
     *
     * Return all WorkforceContracts
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContracts($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceContractsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceContractsWithHttpInfo
     *
     * Return all WorkforceContracts
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceContracts',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceContracts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonalByRefId
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonalByRefId($ref_id)
    {
        list($response) = $this->getWorkforcePersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalByRefIdWithHttpInfo
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforcePersonals',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforcePersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonals
     *
     * Return all WorkforcePersonals
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonals($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforcePersonalsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalsWithHttpInfo
     *
     * Return all WorkforcePersonals
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforcePersonals',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforcePersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefId
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferenceByRefId($ref_id, $body)
    {
        list($response) = $this->updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updatePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferences
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferences($body)
    {
        list($response) = $this->updatePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferencesWithHttpInfo
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectByRefId
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjectByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSubjectByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectByRefIdWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjects
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjects($body)
    {
        list($response) = $this->updateTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSubjectsWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeacherByRefId
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeacherByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTTeacherByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTTeacherByRefIdWithHttpInfo
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeacherByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTTeacherByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeachers
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeachers($body)
    {
        list($response) = $this->updateTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTTeachersWithHttpInfo
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsenceByRefId
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsenceByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceAbsenceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsenceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsences
     *
     * Update multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsences($body)
    {
        list($response) = $this->updateWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsencesWithHttpInfo
     *
     * Update multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignmentByRefId
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceAssignmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignments
     *
     * Update multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignments($body)
    {
        list($response) = $this->updateWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentsWithHttpInfo
     *
     * Update multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContractByRefId
     *
     * Update WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContractByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceContractByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractByRefIdWithHttpInfo
     *
     * Update WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceContractByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContracts
     *
     * Update multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContracts($body)
    {
        list($response) = $this->updateWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractsWithHttpInfo
     *
     * Update multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonalByRefId
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonalByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforcePersonalByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalByRefIdWithHttpInfo
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforcePersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonals
     *
     * Update multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonals($body)
    {
        list($response) = $this->updateWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalsWithHttpInfo
     *
     * Update multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
