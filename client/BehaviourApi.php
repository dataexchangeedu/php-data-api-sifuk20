<?php
/**
 * BehaviourApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\UK\20;

use \DataExchange\UK\20\ApiClient;
use \DataExchange\UK\20\ApiException;
use \DataExchange\UK\20\Configuration;
use \DataExchange\UK\20\ObjectSerializer;

/**
 * BehaviourApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BehaviourApi
{
    /**
     * API Client
     *
     * @var \DataExchange\UK\20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\UK\20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\UK\20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.staging.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\UK\20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\UK\20\ApiClient $apiClient set the API client
     *
     * @return BehaviourApi
     */
    public function setApiClient(\DataExchange\UK\20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createLearnerBehaviourIncidents
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerBehaviourIncidents($body)
    {
        list($response) = $this->createLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerBehaviourIncidentsWithHttpInfo
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerExclusions
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerExclusions($body)
    {
        list($response) = $this->createLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerExclusionsWithHttpInfo
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefId
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidents
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidents($body)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsWithHttpInfo
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusionByRefId
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionByRefIdWithHttpInfo
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusions
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusions($body)
    {
        list($response) = $this->deleteLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionsWithHttpInfo
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefId
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidents
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidents($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerBehaviourIncidentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentsWithHttpInfo
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusionByRefId
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerExclusions
     */
    public function getLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->getLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerExclusionByRefIdWithHttpInfo
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerExclusions',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusions
     *
     * Return all LearnerExclusions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerExclusions
     */
    public function getLearnerExclusions($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerExclusionsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerExclusionsWithHttpInfo
     *
     * Return all LearnerExclusions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerExclusions',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefId
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidents
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidents($body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentsWithHttpInfo
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusionByRefId
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\UK\20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusionByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionByRefIdWithHttpInfo
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\UK\20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerExclusionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusions
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusions($body)
    {
        list($response) = $this->updateLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionsWithHttpInfo
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
