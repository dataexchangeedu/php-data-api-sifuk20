<?php
/**
 * LearnersApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@zinethq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\UK\20;

use \DataExchange\UK\20\ApiClient;
use \DataExchange\UK\20\ApiException;
use \DataExchange\UK\20\Configuration;
use \DataExchange\UK\20\ObjectSerializer;

/**
 * LearnersApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\UK\20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LearnersApi
{
    /**
     * API Client
     *
     * @var \DataExchange\UK\20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\UK\20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\UK\20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.staging.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\UK\20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\UK\20\ApiClient $apiClient set the API client
     *
     * @return LearnersApi
     */
    public function setApiClient(\DataExchange\UK\20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAssessmentLearnerSets
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createAssessmentLearnerSets($body)
    {
        list($response) = $this->createAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentLearnerSetsWithHttpInfo
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResponseSets
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->createLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResults
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResults($body)
    {
        list($response) = $this->createLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResultsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendanceSummarys
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerAttendanceSummarys($body)
    {
        list($response) = $this->createLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAttendanceSummarysWithHttpInfo
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendances
     *
     * Create multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerAttendances($body)
    {
        list($response) = $this->createLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAttendancesWithHttpInfo
     *
     * Create multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerBehaviourIncidents
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerBehaviourIncidents($body)
    {
        list($response) = $this->createLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerBehaviourIncidentsWithHttpInfo
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerContacts
     *
     * Create multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerContacts($body)
    {
        list($response) = $this->createLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerContactsWithHttpInfo
     *
     * Create multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerEntitlements
     *
     * Create multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerEntitlements($body)
    {
        list($response) = $this->createLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerEntitlementsWithHttpInfo
     *
     * Create multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerExclusions
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerExclusions($body)
    {
        list($response) = $this->createLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerExclusionsWithHttpInfo
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerGroupEnrolments
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerGroupEnrolments($body)
    {
        list($response) = $this->createLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerGroupEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerPersonals
     *
     * Create multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerPersonals($body)
    {
        list($response) = $this->createLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerPersonalsWithHttpInfo
     *
     * Create multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerSchoolEnrolments
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerSchoolEnrolments($body)
    {
        list($response) = $this->createLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerSpecialNeedss
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createLearnerSpecialNeedss($body)
    {
        list($response) = $this->createLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerSpecialNeedssWithHttpInfo
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPersonDietaryPreferences
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createPersonDietaryPreferences($body)
    {
        list($response) = $this->createPersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createPersonDietaryPreferencesWithHttpInfo
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSubjects
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTTSubjects($body)
    {
        list($response) = $this->createTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSubjectsWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTeachingGroups
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifCreateResponse
     */
    public function createTeachingGroups($body)
    {
        list($response) = $this->createTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTeachingGroupsWithHttpInfo
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifCreateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefId
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSets
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSets($body)
    {
        list($response) = $this->deleteAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetsWithHttpInfo
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefId
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSets
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefId
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResults
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResults($body)
    {
        list($response) = $this->deleteLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceByRefId
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceByRefIdWithHttpInfo
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefId
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummaryByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummarys
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummarys($body)
    {
        list($response) = $this->deleteLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummarysWithHttpInfo
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendances
     *
     * Delete multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendances($body)
    {
        list($response) = $this->deleteLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendancesWithHttpInfo
     *
     * Delete multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefId
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidents
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidents($body)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsWithHttpInfo
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContactByRefId
     *
     * Delete LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerContactByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerContactByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerContactByRefIdWithHttpInfo
     *
     * Delete LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContacts
     *
     * Delete multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerContacts($body)
    {
        list($response) = $this->deleteLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerContactsWithHttpInfo
     *
     * Delete multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementByRefId
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlementByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerEntitlementByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementByRefIdWithHttpInfo
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlements
     *
     * Delete multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlements($body)
    {
        list($response) = $this->deleteLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementsWithHttpInfo
     *
     * Delete multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusionByRefId
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionByRefIdWithHttpInfo
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusions
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusions($body)
    {
        list($response) = $this->deleteLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionsWithHttpInfo
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefId
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolments
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolments($body)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonalByRefId
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonalByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalByRefIdWithHttpInfo
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonals
     *
     * Delete multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonals($body)
    {
        list($response) = $this->deleteLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalsWithHttpInfo
     *
     * Delete multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefId
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolments
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolments($body)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefId
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedsByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedss
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedss($body)
    {
        list($response) = $this->deleteLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedssWithHttpInfo
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefId
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deletePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferences
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferences($body)
    {
        list($response) = $this->deletePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferencesWithHttpInfo
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectByRefId
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSubjectByRefId($ref_id)
    {
        list($response) = $this->deleteTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSubjectByRefIdWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjects
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTTSubjects($body)
    {
        list($response) = $this->deleteTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSubjectsWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroupByRefId
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->deleteTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupByRefIdWithHttpInfo
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroups
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroups($body)
    {
        list($response) = $this->deleteTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupsWithHttpInfo
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifDeleteResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSetByRefId
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSets
     *
     * Return all AssessmentLearnerSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSets($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentLearnerSetsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetsWithHttpInfo
     *
     * Return all AssessmentLearnerSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefId
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSets
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSets($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResponseSetsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResultByRefId
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResults
     *
     * Return all LearnerAssessmentResults
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResults($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResultsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultsWithHttpInfo
     *
     * Return all LearnerAssessmentResults
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceByRefId
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAttendances
     */
    public function getLearnerAttendanceByRefId($ref_id)
    {
        list($response) = $this->getLearnerAttendanceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceByRefIdWithHttpInfo
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAttendances',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAttendances', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefId
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummaryByRefId($ref_id)
    {
        list($response) = $this->getLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAttendanceSummarys',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAttendanceSummarys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummarys
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummarys($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAttendanceSummarysWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummarysWithHttpInfo
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummarysWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAttendanceSummarys',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAttendanceSummarys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendances
     *
     * Return all LearnerAttendances
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerAttendances
     */
    public function getLearnerAttendances($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAttendancesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAttendancesWithHttpInfo
     *
     * Return all LearnerAttendances
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendancesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerAttendances',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerAttendances', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefId
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidents
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidents($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerBehaviourIncidentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentsWithHttpInfo
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerContactByRefId
     *
     * Find LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerContacts
     */
    public function getLearnerContactByRefId($ref_id)
    {
        list($response) = $this->getLearnerContactByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerContactByRefIdWithHttpInfo
     *
     * Find LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerContacts',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerContacts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerContacts
     *
     * Return all LearnerContacts
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerContacts
     */
    public function getLearnerContacts($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerContactsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerContactsWithHttpInfo
     *
     * Return all LearnerContacts
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerContacts',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerContacts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementByRefId
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlementByRefId($ref_id)
    {
        list($response) = $this->getLearnerEntitlementByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementByRefIdWithHttpInfo
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerEntitlements',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerEntitlements', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlements
     *
     * Return all LearnerEntitlements
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlements($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerEntitlementsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementsWithHttpInfo
     *
     * Return all LearnerEntitlements
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerEntitlements',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerEntitlements', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusionByRefId
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerExclusions
     */
    public function getLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->getLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerExclusionByRefIdWithHttpInfo
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerExclusions',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusions
     *
     * Return all LearnerExclusions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerExclusions
     */
    public function getLearnerExclusions($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerExclusionsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerExclusionsWithHttpInfo
     *
     * Return all LearnerExclusions
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerExclusions',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefId
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolments
     *
     * Return all LearnerGroupEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolments($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerGroupEnrolmentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentsWithHttpInfo
     *
     * Return all LearnerGroupEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonalByRefId
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerPersonals
     */
    public function getLearnerPersonalByRefId($ref_id)
    {
        list($response) = $this->getLearnerPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerPersonalByRefIdWithHttpInfo
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerPersonals',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonals
     *
     * Return all LearnerPersonals
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerPersonals
     */
    public function getLearnerPersonals($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerPersonalsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerPersonalsWithHttpInfo
     *
     * Return all LearnerPersonals
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerPersonals',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefId
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolments
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolments($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerSchoolEnrolmentsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedsByRefId
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedsByRefId($ref_id)
    {
        list($response) = $this->getLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSpecialNeedss',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSpecialNeedss', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedss
     *
     * Return all LearnerSpecialNeedss
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedss($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerSpecialNeedssWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedssWithHttpInfo
     *
     * Return all LearnerSpecialNeedss
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedssWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\LearnerSpecialNeedss',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\LearnerSpecialNeedss', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferenceByRefId
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getPersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferences
     *
     * Return all PersonDietaryPreferences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferences($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getPersonDietaryPreferencesWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferencesWithHttpInfo
     *
     * Return all PersonDietaryPreferences
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferencesWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjectByRefId
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSubjects
     */
    public function getTTSubjectByRefId($ref_id)
    {
        list($response) = $this->getTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSubjectByRefIdWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSubjects',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjects
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TTSubjects
     */
    public function getTTSubjects($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSubjectsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSubjectsWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TTSubjects',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroupByRefId
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TeachingGroups
     */
    public function getTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->getTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTeachingGroupByRefIdWithHttpInfo
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TeachingGroups',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroups
     *
     * Return all TeachingGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\TeachingGroups
     */
    public function getTeachingGroups($navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTeachingGroupsWithHttpInfo($navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTeachingGroupsWithHttpInfo
     *
     * Return all TeachingGroups
     *
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupsWithHttpInfo($navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\TeachingGroups',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSetByRefId
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSets
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSets($body)
    {
        list($response) = $this->updateAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetsWithHttpInfo
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\UK\20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefId
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSets
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResultByRefId
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResultByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResults
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResults($body)
    {
        list($response) = $this->updateLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\UK\20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceByRefId
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\UK\20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceByRefIdWithHttpInfo
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\UK\20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefId
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummaryByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummarys
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummarys($body)
    {
        list($response) = $this->updateLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummarysWithHttpInfo
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendances
     *
     * Update multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendances($body)
    {
        list($response) = $this->updateLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendancesWithHttpInfo
     *
     * Update multiple LearnerAttendances
     *
     * @param \DataExchange\UK\20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefId
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidents
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidents($body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentsWithHttpInfo
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\UK\20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerContactByRefId
     *
     * Update LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\UK\20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerContactByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerContactByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerContactByRefIdWithHttpInfo
     *
     * Update LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\UK\20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerContactByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerContacts
     *
     * Update multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerContacts($body)
    {
        list($response) = $this->updateLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerContactsWithHttpInfo
     *
     * Update multiple LearnerContacts
     *
     * @param \DataExchange\UK\20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementByRefId
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\UK\20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlementByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementByRefIdWithHttpInfo
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\UK\20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerEntitlementByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlements
     *
     * Update multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlements($body)
    {
        list($response) = $this->updateLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementsWithHttpInfo
     *
     * Update multiple LearnerEntitlements
     *
     * @param \DataExchange\UK\20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusionByRefId
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\UK\20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusionByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionByRefIdWithHttpInfo
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\UK\20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerExclusionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusions
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusions($body)
    {
        list($response) = $this->updateLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionsWithHttpInfo
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\UK\20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefId
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolments
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolments($body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonalByRefId
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\UK\20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonalByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerPersonalByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalByRefIdWithHttpInfo
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\UK\20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerPersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonals
     *
     * Update multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonals($body)
    {
        list($response) = $this->updateLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalsWithHttpInfo
     *
     * Update multiple LearnerPersonals
     *
     * @param \DataExchange\UK\20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefId
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolments
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolments($body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\UK\20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefId
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedsByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedss
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedss($body)
    {
        list($response) = $this->updateLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedssWithHttpInfo
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\UK\20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefId
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\UK\20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferenceByRefId($ref_id, $body)
    {
        list($response) = $this->updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\UK\20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updatePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferences
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferences($body)
    {
        list($response) = $this->updatePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferencesWithHttpInfo
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\UK\20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectByRefId
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\UK\20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSubjectByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSubjectByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectByRefIdWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\UK\20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjects
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTTSubjects($body)
    {
        list($response) = $this->updateTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSubjectsWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\UK\20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroupByRefId
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\UK\20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTeachingGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupByRefIdWithHttpInfo
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\UK\20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTeachingGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroups
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return \DataExchange\UK\20\Models\SifUpdateResponse
     */
    public function updateTeachingGroups($body)
    {
        list($response) = $this->updateTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupsWithHttpInfo
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\UK\20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\UK\20\ApiException on non-2xx response
     * @return array of \DataExchange\UK\20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\UK\20\Models\SifUpdateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\UK\20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\UK\20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
