<?php
/**
 * DataExchangeApi
 * PHP version 5
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@dataexchange.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20;

use \DataExchange\SIFUK20\ApiClient;
use \DataExchange\SIFUK20\ApiException;
use \DataExchange\SIFUK20\Configuration;
use \DataExchange\SIFUK20\ObjectSerializer;

/**
 * DataExchangeApi Class Doc Comment
 *
 * @category Class
 * @package  DataExchange\SIFUK20
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataExchangeApi
{
    /**
     * API Client
     *
     * @var \DataExchange\SIFUK20\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataExchange\SIFUK20\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataExchange\SIFUK20\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://uk.dataexchange.education/rest/sif/requests');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataExchange\SIFUK20\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataExchange\SIFUK20\ApiClient $apiClient set the API client
     *
     * @return DataExchangeApi
     */
    public function setApiClient(\DataExchange\SIFUK20\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAssessmentLearnerSets
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentLearnerSets($body)
    {
        list($response) = $this->createAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentLearnerSetsWithHttpInfo
     *
     * Create multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponentGroups
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->createAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResponseComponents
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResponseComponents($body)
    {
        list($response) = $this->createAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResponseComponentsWithHttpInfo
     *
     * Create multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponentGroups
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponentGroups($body)
    {
        list($response) = $this->createAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentGroupsWithHttpInfo
     *
     * Create multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultComponents
     *
     * Create multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultComponents($body)
    {
        list($response) = $this->createAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultComponentsWithHttpInfo
     *
     * Create multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentResultGradeSets
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentResultGradeSets($body)
    {
        list($response) = $this->createAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentResultGradeSetsWithHttpInfo
     *
     * Create multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssessmentSessions
     *
     * Create multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createAssessmentSessions($body)
    {
        list($response) = $this->createAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssessmentSessionsWithHttpInfo
     *
     * Create multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createContactPersonals
     *
     * Create multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createContactPersonals($body)
    {
        list($response) = $this->createContactPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createContactPersonalsWithHttpInfo
     *
     * Create multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContactPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createContactPersonals');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/ContactPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCycles
     *
     * Create multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createCycles($body)
    {
        list($response) = $this->createCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createCyclesWithHttpInfo
     *
     * Create multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createIdentitys
     *
     * Create multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createIdentitys($body)
    {
        list($response) = $this->createIdentitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createIdentitysWithHttpInfo
     *
     * Create multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createIdentitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createIdentitys');
        }
        // parse inputs
        $resourcePath = "/Identitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/Identitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createJunctions
     *
     * Create multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createJunctions($body)
    {
        list($response) = $this->createJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createJunctionsWithHttpInfo
     *
     * Create multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLAInfos
     *
     * Create multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLAInfos($body)
    {
        list($response) = $this->createLAInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLAInfosWithHttpInfo
     *
     * Create multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLAInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLAInfos');
        }
        // parse inputs
        $resourcePath = "/LAInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LAInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResponseSets
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->createLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAssessmentResults
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAssessmentResults($body)
    {
        list($response) = $this->createLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAssessmentResultsWithHttpInfo
     *
     * Create multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendanceSummarys
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAttendanceSummarys($body)
    {
        list($response) = $this->createLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAttendanceSummarysWithHttpInfo
     *
     * Create multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerAttendances
     *
     * Create multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerAttendances($body)
    {
        list($response) = $this->createLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerAttendancesWithHttpInfo
     *
     * Create multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerBehaviourIncidents
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerBehaviourIncidents($body)
    {
        list($response) = $this->createLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerBehaviourIncidentsWithHttpInfo
     *
     * Create multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerContacts
     *
     * Create multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerContacts($body)
    {
        list($response) = $this->createLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerContactsWithHttpInfo
     *
     * Create multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerEntitlements
     *
     * Create multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerEntitlements($body)
    {
        list($response) = $this->createLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerEntitlementsWithHttpInfo
     *
     * Create multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerExclusions
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerExclusions($body)
    {
        list($response) = $this->createLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerExclusionsWithHttpInfo
     *
     * Create multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerGroupEnrolments
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerGroupEnrolments($body)
    {
        list($response) = $this->createLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerGroupEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerPersonals
     *
     * Create multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerPersonals($body)
    {
        list($response) = $this->createLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerPersonalsWithHttpInfo
     *
     * Create multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerSchoolEnrolments
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerSchoolEnrolments($body)
    {
        list($response) = $this->createLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Create multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLearnerSpecialNeedss
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLearnerSpecialNeedss($body)
    {
        list($response) = $this->createLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLearnerSpecialNeedssWithHttpInfo
     *
     * Create multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLessons
     *
     * Create multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createLessons($body)
    {
        list($response) = $this->createLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLessonsWithHttpInfo
     *
     * Create multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createNonTeachingActivitys
     *
     * Create multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createNonTeachingActivitys($body)
    {
        list($response) = $this->createNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createNonTeachingActivitysWithHttpInfo
     *
     * Create multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPersonDietaryPreferences
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createPersonDietaryPreferences($body)
    {
        list($response) = $this->createPersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createPersonDietaryPreferencesWithHttpInfo
     *
     * Create multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPersonPictures
     *
     * Create multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createPersonPictures($body)
    {
        list($response) = $this->createPersonPicturesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createPersonPicturesWithHttpInfo
     *
     * Create multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonPicturesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPersonPictures');
        }
        // parse inputs
        $resourcePath = "/PersonPictures";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/PersonPictures'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolDiaryEntrys
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolDiaryEntrys($body)
    {
        list($response) = $this->createSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolDiaryEntrysWithHttpInfo
     *
     * Create multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolGroupTypes
     *
     * Create multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolGroupTypes($body)
    {
        list($response) = $this->createSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolGroupTypesWithHttpInfo
     *
     * Create multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolGroups
     *
     * Create multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolGroups($body)
    {
        list($response) = $this->createSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolGroupsWithHttpInfo
     *
     * Create multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSchoolInfos
     *
     * Create multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createSchoolInfos($body)
    {
        list($response) = $this->createSchoolInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSchoolInfosWithHttpInfo
     *
     * Create multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchoolInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSchoolInfos');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/SchoolInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createScopes
     *
     * Create multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createScopes($body)
    {
        list($response) = $this->createScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createScopesWithHttpInfo
     *
     * Create multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTRooms
     *
     * Create multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTRooms($body)
    {
        list($response) = $this->createTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTRoomsWithHttpInfo
     *
     * Create multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSites
     *
     * Create multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTSites($body)
    {
        list($response) = $this->createTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSitesWithHttpInfo
     *
     * Create multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTSubjects
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTSubjects($body)
    {
        list($response) = $this->createTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTSubjectsWithHttpInfo
     *
     * Create multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTTTeachers
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTTTeachers($body)
    {
        list($response) = $this->createTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTTTeachersWithHttpInfo
     *
     * Create multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTeachingGroups
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTeachingGroups($body)
    {
        list($response) = $this->createTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTeachingGroupsWithHttpInfo
     *
     * Create multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTermInfos
     *
     * Create multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createTermInfos($body)
    {
        list($response) = $this->createTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTermInfosWithHttpInfo
     *
     * Create multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceAbsences
     *
     * Create multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAbsences($body)
    {
        list($response) = $this->createWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceAbsencesWithHttpInfo
     *
     * Create multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceAssignments
     *
     * Create multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceAssignments($body)
    {
        list($response) = $this->createWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceAssignmentsWithHttpInfo
     *
     * Create multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforceContracts
     *
     * Create multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforceContracts($body)
    {
        list($response) = $this->createWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforceContractsWithHttpInfo
     *
     * Create multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkforcePersonals
     *
     * Create multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifCreateResponse
     */
    public function createWorkforcePersonals($body)
    {
        list($response) = $this->createWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWorkforcePersonalsWithHttpInfo
     *
     * Create multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be created (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifCreateResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefId
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Delete AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentLearnerSets
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentLearnerSets($body)
    {
        list($response) = $this->deleteAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentLearnerSetsWithHttpInfo
     *
     * Delete multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefId
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefId
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroupByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponentGroups
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->deleteAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResponseComponents
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResponseComponents($body)
    {
        list($response) = $this->deleteAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResponseComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentByRefId
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefId
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroupByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Delete AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponentGroups
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponentGroups($body)
    {
        list($response) = $this->deleteAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentGroupsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultComponents
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultComponents($body)
    {
        list($response) = $this->deleteAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultComponentsWithHttpInfo
     *
     * Delete multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefId
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSetByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Delete AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentResultGradeSets
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentResultGradeSets($body)
    {
        list($response) = $this->deleteAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentResultGradeSetsWithHttpInfo
     *
     * Delete multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessionByRefId
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessionByRefId($ref_id)
    {
        list($response) = $this->deleteAssessmentSessionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionByRefIdWithHttpInfo
     *
     * Delete AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssessmentSessions
     *
     * Delete multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteAssessmentSessions($body)
    {
        list($response) = $this->deleteAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAssessmentSessionsWithHttpInfo
     *
     * Delete multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContactPersonalByRefId
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteContactPersonalByRefId($ref_id)
    {
        list($response) = $this->deleteContactPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteContactPersonalByRefIdWithHttpInfo
     *
     * Delete ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteContactPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/ContactPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContactPersonals
     *
     * Delete multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteContactPersonals($body)
    {
        list($response) = $this->deleteContactPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteContactPersonalsWithHttpInfo
     *
     * Delete multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteContactPersonals');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/ContactPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCycleByRefId
     *
     * Delete Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteCycleByRefId($ref_id)
    {
        list($response) = $this->deleteCycleByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteCycleByRefIdWithHttpInfo
     *
     * Delete Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCycleByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCycles
     *
     * Delete multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteCycles($body)
    {
        list($response) = $this->deleteCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteCyclesWithHttpInfo
     *
     * Delete multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteIdentityByRefId
     *
     * Delete Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteIdentityByRefId($ref_id)
    {
        list($response) = $this->deleteIdentityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteIdentityByRefIdWithHttpInfo
     *
     * Delete Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteIdentityByRefId');
        }
        // parse inputs
        $resourcePath = "/Identitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Identitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteIdentitys
     *
     * Delete multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteIdentitys($body)
    {
        list($response) = $this->deleteIdentitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteIdentitysWithHttpInfo
     *
     * Delete multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteIdentitys');
        }
        // parse inputs
        $resourcePath = "/Identitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Identitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJunctionByRefId
     *
     * Delete Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteJunctionByRefId($ref_id)
    {
        list($response) = $this->deleteJunctionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteJunctionByRefIdWithHttpInfo
     *
     * Delete Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJunctions
     *
     * Delete multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteJunctions($body)
    {
        list($response) = $this->deleteJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteJunctionsWithHttpInfo
     *
     * Delete multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLAInfoByRefId
     *
     * Delete LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLAInfoByRefId($ref_id)
    {
        list($response) = $this->deleteLAInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLAInfoByRefIdWithHttpInfo
     *
     * Delete LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLAInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLAInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/LAInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LAInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLAInfos
     *
     * Delete multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLAInfos($body)
    {
        list($response) = $this->deleteLAInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLAInfosWithHttpInfo
     *
     * Delete multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLAInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLAInfos');
        }
        // parse inputs
        $resourcePath = "/LAInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LAInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefId
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResponseSets
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->deleteLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefId
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Delete LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAssessmentResults
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAssessmentResults($body)
    {
        list($response) = $this->deleteLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAssessmentResultsWithHttpInfo
     *
     * Delete multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceByRefId
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceByRefIdWithHttpInfo
     *
     * Delete LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefId
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummaryByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Delete LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendanceSummarys
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendanceSummarys($body)
    {
        list($response) = $this->deleteLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendanceSummarysWithHttpInfo
     *
     * Delete multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerAttendances
     *
     * Delete multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerAttendances($body)
    {
        list($response) = $this->deleteLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerAttendancesWithHttpInfo
     *
     * Delete multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefId
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Delete LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerBehaviourIncidents
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerBehaviourIncidents($body)
    {
        list($response) = $this->deleteLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerBehaviourIncidentsWithHttpInfo
     *
     * Delete multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContactByRefId
     *
     * Delete LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerContactByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerContactByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerContactByRefIdWithHttpInfo
     *
     * Delete LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerContacts
     *
     * Delete multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerContacts($body)
    {
        list($response) = $this->deleteLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerContactsWithHttpInfo
     *
     * Delete multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlementByRefId
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlementByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerEntitlementByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementByRefIdWithHttpInfo
     *
     * Delete LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerEntitlements
     *
     * Delete multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerEntitlements($body)
    {
        list($response) = $this->deleteLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerEntitlementsWithHttpInfo
     *
     * Delete multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusionByRefId
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionByRefIdWithHttpInfo
     *
     * Delete LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerExclusions
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerExclusions($body)
    {
        list($response) = $this->deleteLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerExclusionsWithHttpInfo
     *
     * Delete multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefId
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerGroupEnrolments
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerGroupEnrolments($body)
    {
        list($response) = $this->deleteLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerGroupEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonalByRefId
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonalByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalByRefIdWithHttpInfo
     *
     * Delete LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerPersonals
     *
     * Delete multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerPersonals($body)
    {
        list($response) = $this->deleteLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerPersonalsWithHttpInfo
     *
     * Delete multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefId
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Delete LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSchoolEnrolments
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSchoolEnrolments($body)
    {
        list($response) = $this->deleteLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Delete multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefId
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedsByRefId($ref_id)
    {
        list($response) = $this->deleteLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Delete LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLearnerSpecialNeedss
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLearnerSpecialNeedss($body)
    {
        list($response) = $this->deleteLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLearnerSpecialNeedssWithHttpInfo
     *
     * Delete multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLessonByRefId
     *
     * Delete Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLessonByRefId($ref_id)
    {
        list($response) = $this->deleteLessonByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteLessonByRefIdWithHttpInfo
     *
     * Delete Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLessons
     *
     * Delete multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteLessons($body)
    {
        list($response) = $this->deleteLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteLessonsWithHttpInfo
     *
     * Delete multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivityByRefId
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivityByRefId($ref_id)
    {
        list($response) = $this->deleteNonTeachingActivityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivityByRefIdWithHttpInfo
     *
     * Delete NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteNonTeachingActivitys
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteNonTeachingActivitys($body)
    {
        list($response) = $this->deleteNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteNonTeachingActivitysWithHttpInfo
     *
     * Delete multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefId
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Delete PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deletePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonDietaryPreferences
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonDietaryPreferences($body)
    {
        list($response) = $this->deletePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deletePersonDietaryPreferencesWithHttpInfo
     *
     * Delete multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePersonPictures
     *
     * Delete multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deletePersonPictures($body)
    {
        list($response) = $this->deletePersonPicturesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deletePersonPicturesWithHttpInfo
     *
     * Delete multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonPicturesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deletePersonPictures');
        }
        // parse inputs
        $resourcePath = "/PersonPictures";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/PersonPictures'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefId
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntryByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolDiaryEntryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Delete SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolDiaryEntrys
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolDiaryEntrys($body)
    {
        list($response) = $this->deleteSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolDiaryEntrysWithHttpInfo
     *
     * Delete multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupByRefId
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupByRefIdWithHttpInfo
     *
     * Delete SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypeByRefId
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypeByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolGroupTypeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Delete SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroupTypes
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroupTypes($body)
    {
        list($response) = $this->deleteSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupTypesWithHttpInfo
     *
     * Delete multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolGroups
     *
     * Delete multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolGroups($body)
    {
        list($response) = $this->deleteSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolGroupsWithHttpInfo
     *
     * Delete multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolInfoByRefId
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolInfoByRefId($ref_id)
    {
        list($response) = $this->deleteSchoolInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteSchoolInfoByRefIdWithHttpInfo
     *
     * Delete SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteSchoolInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSchoolInfos
     *
     * Delete multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteSchoolInfos($body)
    {
        list($response) = $this->deleteSchoolInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteSchoolInfosWithHttpInfo
     *
     * Delete multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSchoolInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteSchoolInfos');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/SchoolInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteScopeByRefId
     *
     * Delete Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteScopeByRefId($ref_id)
    {
        list($response) = $this->deleteScopeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteScopeByRefIdWithHttpInfo
     *
     * Delete Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteScopes
     *
     * Delete multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteScopes($body)
    {
        list($response) = $this->deleteScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteScopesWithHttpInfo
     *
     * Delete multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTRoomByRefId
     *
     * Delete TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTRoomByRefId($ref_id)
    {
        list($response) = $this->deleteTTRoomByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTRoomByRefIdWithHttpInfo
     *
     * Delete TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTRooms
     *
     * Delete multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTRooms($body)
    {
        list($response) = $this->deleteTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTRoomsWithHttpInfo
     *
     * Delete multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSiteByRefId
     *
     * Delete TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSiteByRefId($ref_id)
    {
        list($response) = $this->deleteTTSiteByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSiteByRefIdWithHttpInfo
     *
     * Delete TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSiteByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSites
     *
     * Delete multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSites($body)
    {
        list($response) = $this->deleteTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSitesWithHttpInfo
     *
     * Delete multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjectByRefId
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjectByRefId($ref_id)
    {
        list($response) = $this->deleteTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTSubjectByRefIdWithHttpInfo
     *
     * Delete TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTSubjects
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTSubjects($body)
    {
        list($response) = $this->deleteTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTSubjectsWithHttpInfo
     *
     * Delete multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeacherByRefId
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeacherByRefId($ref_id)
    {
        list($response) = $this->deleteTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTTTeacherByRefIdWithHttpInfo
     *
     * Delete TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTTTeachers
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTTTeachers($body)
    {
        list($response) = $this->deleteTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTTTeachersWithHttpInfo
     *
     * Delete multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroupByRefId
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->deleteTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupByRefIdWithHttpInfo
     *
     * Delete TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTeachingGroups
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTeachingGroups($body)
    {
        list($response) = $this->deleteTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTeachingGroupsWithHttpInfo
     *
     * Delete multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTermInfoByRefId
     *
     * Delete TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTermInfoByRefId($ref_id)
    {
        list($response) = $this->deleteTermInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteTermInfoByRefIdWithHttpInfo
     *
     * Delete TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTermInfos
     *
     * Delete multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteTermInfos($body)
    {
        list($response) = $this->deleteTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteTermInfosWithHttpInfo
     *
     * Delete multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsenceByRefId
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsenceByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceAbsenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Delete WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAbsences
     *
     * Delete multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAbsences($body)
    {
        list($response) = $this->deleteWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAbsencesWithHttpInfo
     *
     * Delete multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignmentByRefId
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignmentByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceAssignmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Delete WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceAssignments
     *
     * Delete multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceAssignments($body)
    {
        list($response) = $this->deleteWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceAssignmentsWithHttpInfo
     *
     * Delete multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContractByRefId
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContractByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforceContractByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractByRefIdWithHttpInfo
     *
     * Delete WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforceContracts
     *
     * Delete multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforceContracts($body)
    {
        list($response) = $this->deleteWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforceContractsWithHttpInfo
     *
     * Delete multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonalByRefId
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonalByRefId($ref_id)
    {
        list($response) = $this->deleteWorkforcePersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalByRefIdWithHttpInfo
     *
     * Delete WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling deleteWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteWorkforcePersonals
     *
     * Delete multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifDeleteResponse
     */
    public function deleteWorkforcePersonals($body)
    {
        list($response) = $this->deleteWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteWorkforcePersonalsWithHttpInfo
     *
     * Delete multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\SifDeleteRequest $body  (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifDeleteResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSetByRefId
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSetByRefId($ref_id)
    {
        list($response) = $this->getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Find AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentLearnerSets
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentLearnerSets
     */
    public function getAssessmentLearnerSets($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentLearnerSetsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentLearnerSetsWithHttpInfo
     *
     * Return all AssessmentLearnerSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentLearnerSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentLearnerSetsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentLearnerSets',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentLearnerSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentByRefId
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponentByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponents',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefId
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroupByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponentGroups
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups
     */
    public function getAssessmentResponseComponentGroups($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResponseComponentGroupsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResponseComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentGroupsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResponseComponents
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResponseComponents
     */
    public function getAssessmentResponseComponents($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResponseComponentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResponseComponentsWithHttpInfo
     *
     * Return all AssessmentResponseComponents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResponseComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResponseComponentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResponseComponents',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResponseComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentByRefId
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponentByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultComponentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponents',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefId
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroupByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Find AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponentGroups
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups
     */
    public function getAssessmentResultComponentGroups($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultComponentGroupsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentGroupsWithHttpInfo
     *
     * Return all AssessmentResultComponentGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentGroupsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponentGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultComponents
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultComponents
     */
    public function getAssessmentResultComponents($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultComponentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultComponentsWithHttpInfo
     *
     * Return all AssessmentResultComponents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultComponents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultComponentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultComponents',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultComponents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSetByRefId
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSetByRefId($ref_id)
    {
        list($response) = $this->getAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Find AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentResultGradeSets
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentResultGradeSets
     */
    public function getAssessmentResultGradeSets($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentResultGradeSetsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentResultGradeSetsWithHttpInfo
     *
     * Return all AssessmentResultGradeSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentResultGradeSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentResultGradeSetsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentResultGradeSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessionByRefId
     *
     * Find AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessionByRefId($ref_id)
    {
        list($response) = $this->getAssessmentSessionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getAssessmentSessionByRefIdWithHttpInfo
     *
     * Find AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentSessions',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentSessions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssessmentSessions
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\AssessmentSessions
     */
    public function getAssessmentSessions($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getAssessmentSessionsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getAssessmentSessionsWithHttpInfo
     *
     * Return all AssessmentSessions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\AssessmentSessions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssessmentSessionsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\AssessmentSessions',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\AssessmentSessions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\AssessmentSessions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactPersonalByRefId
     *
     * Find ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\ContactPersonals
     */
    public function getContactPersonalByRefId($ref_id)
    {
        list($response) = $this->getContactPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getContactPersonalByRefIdWithHttpInfo
     *
     * Find ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\ContactPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getContactPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\ContactPersonals',
                '/ContactPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\ContactPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\ContactPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactPersonals
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\ContactPersonals
     */
    public function getContactPersonals($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getContactPersonalsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getContactPersonalsWithHttpInfo
     *
     * Return all ContactPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\ContactPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactPersonalsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/ContactPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\ContactPersonals',
                '/ContactPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\ContactPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\ContactPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCycleByRefId
     *
     * Find Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Cycles
     */
    public function getCycleByRefId($ref_id)
    {
        list($response) = $this->getCycleByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getCycleByRefIdWithHttpInfo
     *
     * Find Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCycleByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Cycles',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Cycles', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCycles
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Cycles
     */
    public function getCycles($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getCyclesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getCyclesWithHttpInfo
     *
     * Return all Cycles
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Cycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCyclesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Cycles',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Cycles', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Cycles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIdentityByRefId
     *
     * Find Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Identitys
     */
    public function getIdentityByRefId($ref_id)
    {
        list($response) = $this->getIdentityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getIdentityByRefIdWithHttpInfo
     *
     * Find Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Identitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getIdentityByRefId');
        }
        // parse inputs
        $resourcePath = "/Identitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Identitys',
                '/Identitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Identitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Identitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIdentitys
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Identitys
     */
    public function getIdentitys($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getIdentitysWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getIdentitysWithHttpInfo
     *
     * Return all Identitys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Identitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentitysWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Identitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Identitys',
                '/Identitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Identitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Identitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJunctionByRefId
     *
     * Find Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Junctions
     */
    public function getJunctionByRefId($ref_id)
    {
        list($response) = $this->getJunctionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getJunctionByRefIdWithHttpInfo
     *
     * Find Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Junctions',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Junctions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJunctions
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Junctions
     */
    public function getJunctions($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getJunctionsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getJunctionsWithHttpInfo
     *
     * Return all Junctions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Junctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJunctionsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Junctions',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Junctions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Junctions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLAInfoByRefId
     *
     * Find LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LAInfos
     */
    public function getLAInfoByRefId($ref_id)
    {
        list($response) = $this->getLAInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLAInfoByRefIdWithHttpInfo
     *
     * Find LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LAInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLAInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLAInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/LAInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LAInfos',
                '/LAInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LAInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LAInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLAInfos
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LAInfos
     */
    public function getLAInfos($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLAInfosWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLAInfosWithHttpInfo
     *
     * Return all LAInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LAInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLAInfosWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LAInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LAInfos',
                '/LAInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LAInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LAInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefId
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSetByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResponseSets
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets
     */
    public function getLearnerAssessmentResponseSets($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResponseSetsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Return all LearnerAssessmentResponseSets
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResponseSetsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResultByRefId
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResultByRefId($ref_id)
    {
        list($response) = $this->getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Find LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAssessmentResults
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAssessmentResults
     */
    public function getLearnerAssessmentResults($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAssessmentResultsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAssessmentResultsWithHttpInfo
     *
     * Return all LearnerAssessmentResults
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAssessmentResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAssessmentResultsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAssessmentResults',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAssessmentResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceByRefId
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAttendances
     */
    public function getLearnerAttendanceByRefId($ref_id)
    {
        list($response) = $this->getLearnerAttendanceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceByRefIdWithHttpInfo
     *
     * Find LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAttendances',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAttendances', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefId
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummaryByRefId($ref_id)
    {
        list($response) = $this->getLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Find LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendanceSummarys
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys
     */
    public function getLearnerAttendanceSummarys($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAttendanceSummarysWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAttendanceSummarysWithHttpInfo
     *
     * Return all LearnerAttendanceSummarys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendanceSummarysWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendanceSummarys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerAttendances
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerAttendances
     */
    public function getLearnerAttendances($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerAttendancesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerAttendancesWithHttpInfo
     *
     * Return all LearnerAttendances
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerAttendances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerAttendancesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerAttendances',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerAttendances', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerAttendances', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefId
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidentByRefId($ref_id)
    {
        list($response) = $this->getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Find LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerBehaviourIncidents
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents
     */
    public function getLearnerBehaviourIncidents($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerBehaviourIncidentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerBehaviourIncidentsWithHttpInfo
     *
     * Return all LearnerBehaviourIncidents
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerBehaviourIncidentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerBehaviourIncidents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerContactByRefId
     *
     * Find LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerContacts
     */
    public function getLearnerContactByRefId($ref_id)
    {
        list($response) = $this->getLearnerContactByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerContactByRefIdWithHttpInfo
     *
     * Find LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerContacts',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerContacts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerContacts
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerContacts
     */
    public function getLearnerContacts($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerContactsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerContactsWithHttpInfo
     *
     * Return all LearnerContacts
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerContactsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerContacts',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerContacts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerContacts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlementByRefId
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlementByRefId($ref_id)
    {
        list($response) = $this->getLearnerEntitlementByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementByRefIdWithHttpInfo
     *
     * Find LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerEntitlements',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerEntitlements', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerEntitlements
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerEntitlements
     */
    public function getLearnerEntitlements($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerEntitlementsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerEntitlementsWithHttpInfo
     *
     * Return all LearnerEntitlements
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerEntitlements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerEntitlementsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerEntitlements',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerEntitlements', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerEntitlements', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusionByRefId
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerExclusions
     */
    public function getLearnerExclusionByRefId($ref_id)
    {
        list($response) = $this->getLearnerExclusionByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerExclusionByRefIdWithHttpInfo
     *
     * Find LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerExclusions',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerExclusions
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerExclusions
     */
    public function getLearnerExclusions($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerExclusionsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerExclusionsWithHttpInfo
     *
     * Return all LearnerExclusions
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerExclusions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerExclusionsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerExclusions',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerExclusions', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerExclusions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefId
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerGroupEnrolments
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerGroupEnrolments
     */
    public function getLearnerGroupEnrolments($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerGroupEnrolmentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerGroupEnrolmentsWithHttpInfo
     *
     * Return all LearnerGroupEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerGroupEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerGroupEnrolmentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerGroupEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonalByRefId
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerPersonals
     */
    public function getLearnerPersonalByRefId($ref_id)
    {
        list($response) = $this->getLearnerPersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerPersonalByRefIdWithHttpInfo
     *
     * Find LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerPersonals',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerPersonals
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerPersonals
     */
    public function getLearnerPersonals($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerPersonalsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerPersonalsWithHttpInfo
     *
     * Return all LearnerPersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerPersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerPersonalsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerPersonals',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerPersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerPersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefId
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolmentByRefId($ref_id)
    {
        list($response) = $this->getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Find LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSchoolEnrolments
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments
     */
    public function getLearnerSchoolEnrolments($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerSchoolEnrolmentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Return all LearnerSchoolEnrolments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSchoolEnrolmentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSchoolEnrolments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedsByRefId
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedsByRefId($ref_id)
    {
        list($response) = $this->getLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Find LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLearnerSpecialNeedss
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\LearnerSpecialNeedss
     */
    public function getLearnerSpecialNeedss($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLearnerSpecialNeedssWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLearnerSpecialNeedssWithHttpInfo
     *
     * Return all LearnerSpecialNeedss
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\LearnerSpecialNeedss, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLearnerSpecialNeedssWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\LearnerSpecialNeedss', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLessonByRefId
     *
     * Find Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Lessons
     */
    public function getLessonByRefId($ref_id)
    {
        list($response) = $this->getLessonByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getLessonByRefIdWithHttpInfo
     *
     * Find Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Lessons',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Lessons', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLessons
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Lessons
     */
    public function getLessons($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getLessonsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getLessonsWithHttpInfo
     *
     * Return all Lessons
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Lessons, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLessonsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Lessons',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Lessons', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Lessons', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivityByRefId
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivityByRefId($ref_id)
    {
        list($response) = $this->getNonTeachingActivityByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getNonTeachingActivityByRefIdWithHttpInfo
     *
     * Find NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivityByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\NonTeachingActivitys',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNonTeachingActivitys
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\NonTeachingActivitys
     */
    public function getNonTeachingActivitys($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getNonTeachingActivitysWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getNonTeachingActivitysWithHttpInfo
     *
     * Return all NonTeachingActivitys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\NonTeachingActivitys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNonTeachingActivitysWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\NonTeachingActivitys',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\NonTeachingActivitys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferenceByRefId
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferenceByRefId($ref_id)
    {
        list($response) = $this->getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Find PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getPersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonDietaryPreferences
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\PersonDietaryPreferences
     */
    public function getPersonDietaryPreferences($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getPersonDietaryPreferencesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getPersonDietaryPreferencesWithHttpInfo
     *
     * Return all PersonDietaryPreferences
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\PersonDietaryPreferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonDietaryPreferencesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\PersonDietaryPreferences',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonDietaryPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonPictures
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\PersonPictures
     */
    public function getPersonPictures($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getPersonPicturesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getPersonPicturesWithHttpInfo
     *
     * Return all PersonPictures
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\PersonPictures, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonPicturesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/PersonPictures";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\PersonPictures',
                '/PersonPictures'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\PersonPictures', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\PersonPictures', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntryByRefId
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntryByRefId($ref_id)
    {
        list($response) = $this->getSchoolDiaryEntryByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Find SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntryByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolDiaryEntrys
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolDiaryEntrys
     */
    public function getSchoolDiaryEntrys($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolDiaryEntrysWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolDiaryEntrysWithHttpInfo
     *
     * Return all SchoolDiaryEntrys
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolDiaryEntrys, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolDiaryEntrysWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolDiaryEntrys', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupByRefId
     *
     * Find SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolGroups
     */
    public function getSchoolGroupByRefId($ref_id)
    {
        list($response) = $this->getSchoolGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupByRefIdWithHttpInfo
     *
     * Find SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolGroups',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypeByRefId
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypeByRefId($ref_id)
    {
        list($response) = $this->getSchoolGroupTypeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Find SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolGroupTypes',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroupTypes
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolGroupTypes
     */
    public function getSchoolGroupTypes($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolGroupTypesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolGroupTypesWithHttpInfo
     *
     * Return all SchoolGroupTypes
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroupTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupTypesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolGroupTypes',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroupTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolGroups
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolGroups
     */
    public function getSchoolGroups($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolGroupsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolGroupsWithHttpInfo
     *
     * Return all SchoolGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolGroupsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolGroups',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolInfoByRefId
     *
     * Find SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolInfos
     */
    public function getSchoolInfoByRefId($ref_id)
    {
        list($response) = $this->getSchoolInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getSchoolInfoByRefIdWithHttpInfo
     *
     * Find SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getSchoolInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolInfos',
                '/SchoolInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSchoolInfos
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SchoolInfos
     */
    public function getSchoolInfos($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getSchoolInfosWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getSchoolInfosWithHttpInfo
     *
     * Return all SchoolInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SchoolInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSchoolInfosWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/SchoolInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SchoolInfos',
                '/SchoolInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SchoolInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SchoolInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScopeByRefId
     *
     * Find Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Scopes
     */
    public function getScopeByRefId($ref_id)
    {
        list($response) = $this->getScopeByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getScopeByRefIdWithHttpInfo
     *
     * Find Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopeByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Scopes',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Scopes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScopes
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\Scopes
     */
    public function getScopes($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getScopesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getScopesWithHttpInfo
     *
     * Return all Scopes
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\Scopes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScopesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\Scopes',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\Scopes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\Scopes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTRoomByRefId
     *
     * Find TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTRooms
     */
    public function getTTRoomByRefId($ref_id)
    {
        list($response) = $this->getTTRoomByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTRoomByRefIdWithHttpInfo
     *
     * Find TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTRooms',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTRooms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTRooms
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTRooms
     */
    public function getTTRooms($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTRoomsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTRoomsWithHttpInfo
     *
     * Return all TTRooms
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTRooms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTRoomsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTRooms',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTRooms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTRooms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSiteByRefId
     *
     * Find TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSites
     */
    public function getTTSiteByRefId($ref_id)
    {
        list($response) = $this->getTTSiteByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSiteByRefIdWithHttpInfo
     *
     * Find TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSiteByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSites',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSites', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSites
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSites
     */
    public function getTTSites($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSitesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSitesWithHttpInfo
     *
     * Return all TTSites
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSitesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSites',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSites', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjectByRefId
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjectByRefId($ref_id)
    {
        list($response) = $this->getTTSubjectByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTSubjectByRefIdWithHttpInfo
     *
     * Find TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSubjects',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTSubjects
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTSubjects
     */
    public function getTTSubjects($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTSubjectsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTSubjectsWithHttpInfo
     *
     * Return all TTSubjects
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTSubjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTSubjectsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTSubjects',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTSubjects', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTSubjects', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeacherByRefId
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeacherByRefId($ref_id)
    {
        list($response) = $this->getTTTeacherByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTTTeacherByRefIdWithHttpInfo
     *
     * Find TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeacherByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTTeachers',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTTTeachers
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TTTeachers
     */
    public function getTTTeachers($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTTTeachersWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTTTeachersWithHttpInfo
     *
     * Return all TTTeachers
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TTTeachers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTTTeachersWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TTTeachers',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TTTeachers', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TTTeachers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroupByRefId
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TeachingGroups
     */
    public function getTeachingGroupByRefId($ref_id)
    {
        list($response) = $this->getTeachingGroupByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTeachingGroupByRefIdWithHttpInfo
     *
     * Find TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TeachingGroups',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTeachingGroups
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TeachingGroups
     */
    public function getTeachingGroups($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTeachingGroupsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTeachingGroupsWithHttpInfo
     *
     * Return all TeachingGroups
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TeachingGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeachingGroupsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TeachingGroups',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TeachingGroups', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TeachingGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTermInfoByRefId
     *
     * Find TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TermInfos
     */
    public function getTermInfoByRefId($ref_id)
    {
        list($response) = $this->getTermInfoByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getTermInfoByRefIdWithHttpInfo
     *
     * Find TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfoByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TermInfos',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TermInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTermInfos
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\TermInfos
     */
    public function getTermInfos($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getTermInfosWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getTermInfosWithHttpInfo
     *
     * Return all TermInfos
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\TermInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermInfosWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\TermInfos',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\TermInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\TermInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsenceByRefId
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsenceByRefId($ref_id)
    {
        list($response) = $this->getWorkforceAbsenceByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Find WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsenceByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAbsences',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAbsences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAbsences
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAbsences
     */
    public function getWorkforceAbsences($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceAbsencesWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceAbsencesWithHttpInfo
     *
     * Return all WorkforceAbsences
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAbsences, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAbsencesWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAbsences',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAbsences', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAbsences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignmentByRefId
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignmentByRefId($ref_id)
    {
        list($response) = $this->getWorkforceAssignmentByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Find WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAssignments',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAssignments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceAssignments
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceAssignments
     */
    public function getWorkforceAssignments($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceAssignmentsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceAssignmentsWithHttpInfo
     *
     * Return all WorkforceAssignments
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceAssignments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceAssignmentsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceAssignments',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceAssignments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceAssignments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceContractByRefId
     *
     * Find WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContractByRefId($ref_id)
    {
        list($response) = $this->getWorkforceContractByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforceContractByRefIdWithHttpInfo
     *
     * Find WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceContracts',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceContracts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforceContracts
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforceContracts
     */
    public function getWorkforceContracts($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforceContractsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforceContractsWithHttpInfo
     *
     * Return all WorkforceContracts
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforceContracts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforceContractsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforceContracts',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforceContracts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforceContracts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonalByRefId
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonalByRefId($ref_id)
    {
        list($response) = $this->getWorkforcePersonalByRefIdWithHttpInfo($ref_id);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalByRefIdWithHttpInfo
     *
     * Find WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalByRefIdWithHttpInfo($ref_id)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling getWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforcePersonals',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforcePersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWorkforcePersonals
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\WorkforcePersonals
     */
    public function getWorkforcePersonals($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        list($response) = $this->getWorkforcePersonalsWithHttpInfo($zone_id, $navigation_page, $navigation_page_size);
        return $response;
    }

    /**
     * Operation getWorkforcePersonalsWithHttpInfo
     *
     * Return all WorkforcePersonals
     *
     * @param string $zone_id The id of the zone to request data from. (optional)
     * @param int $navigation_page Page to retrieve. (optional, default to 1)
     * @param int $navigation_page_size Number of resources to retrieve. (optional, default to 50)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\WorkforcePersonals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkforcePersonalsWithHttpInfo($zone_id = null, $navigation_page = null, $navigation_page_size = null)
    {
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // query params
        if ($navigation_page !== null) {
            $queryParams['navigationPage'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page);
        }
        // query params
        if ($navigation_page_size !== null) {
            $queryParams['navigationPageSize'] = $this->apiClient->getSerializer()->toQueryValue($navigation_page_size);
        }
        // header params
        if ($zone_id !== null) {
            $headerParams['zoneId'] = $this->apiClient->getSerializer()->toHeaderValue($zone_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\WorkforcePersonals',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\WorkforcePersonals', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\WorkforcePersonals', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSetByRefId
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetByRefIdWithHttpInfo
     *
     * Update AssessmentLearnerSet by RefId
     *
     * @param string $ref_id RefId of AssessmentLearnerSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSet $body AssessmentLearnerSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentLearnerSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentLearnerSets
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentLearnerSets($body)
    {
        list($response) = $this->updateAssessmentLearnerSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentLearnerSetsWithHttpInfo
     *
     * Update multiple AssessmentLearnerSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentLearnerSets $body AssessmentLearnerSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentLearnerSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentLearnerSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentLearnerSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentLearnerSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentByRefId
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponent $body AssessmentResponseComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefId
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResponseComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResponseComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroup $body AssessmentResponseComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponentGroups
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponentGroups($body)
    {
        list($response) = $this->updateAssessmentResponseComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponentGroups $body AssessmentResponseComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResponseComponents
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResponseComponents($body)
    {
        list($response) = $this->updateAssessmentResponseComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResponseComponentsWithHttpInfo
     *
     * Update multiple AssessmentResponseComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResponseComponents $body AssessmentResponseComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResponseComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResponseComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResponseComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResponseComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentByRefId
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponent by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponent (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponent $body AssessmentResultComponent to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefId
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupByRefIdWithHttpInfo
     *
     * Update AssessmentResultComponentGroup by RefId
     *
     * @param string $ref_id RefId of AssessmentResultComponentGroup (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroup $body AssessmentResultComponentGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultComponentGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponentGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponentGroups
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponentGroups($body)
    {
        list($response) = $this->updateAssessmentResultComponentGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentGroupsWithHttpInfo
     *
     * Update multiple AssessmentResultComponentGroups
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponentGroups $body AssessmentResultComponentGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponentGroups');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponentGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponentGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultComponents
     *
     * Update multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultComponents($body)
    {
        list($response) = $this->updateAssessmentResultComponentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultComponentsWithHttpInfo
     *
     * Update multiple AssessmentResultComponents
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultComponents $body AssessmentResultComponents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultComponentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultComponents');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultComponents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultComponents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefId
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetByRefIdWithHttpInfo
     *
     * Update AssessmentResultGradeSet by RefId
     *
     * @param string $ref_id RefId of AssessmentResultGradeSet (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSet $body AssessmentResultGradeSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentResultGradeSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSetByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultGradeSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentResultGradeSets
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentResultGradeSets($body)
    {
        list($response) = $this->updateAssessmentResultGradeSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentResultGradeSetsWithHttpInfo
     *
     * Update multiple AssessmentResultGradeSets
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentResultGradeSets $body AssessmentResultGradeSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentResultGradeSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentResultGradeSets');
        }
        // parse inputs
        $resourcePath = "/AssessmentResultGradeSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentResultGradeSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessionByRefId
     *
     * Update AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessionByRefId($ref_id, $body)
    {
        list($response) = $this->updateAssessmentSessionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionByRefIdWithHttpInfo
     *
     * Update AssessmentSession by RefId
     *
     * @param string $ref_id RefId of AssessmentSession (required)
     * @param \DataExchange\SIFUK20\Models\AssessmentSession $body AssessmentSession to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateAssessmentSessionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessionByRefId');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentSessions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAssessmentSessions
     *
     * Update multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateAssessmentSessions($body)
    {
        list($response) = $this->updateAssessmentSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAssessmentSessionsWithHttpInfo
     *
     * Update multiple AssessmentSessions
     *
     * @param \DataExchange\SIFUK20\Models\AssessmentSessions $body AssessmentSessions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssessmentSessionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateAssessmentSessions');
        }
        // parse inputs
        $resourcePath = "/AssessmentSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/AssessmentSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateContactPersonalByRefId
     *
     * Update ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateContactPersonalByRefId($ref_id, $body)
    {
        list($response) = $this->updateContactPersonalByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateContactPersonalByRefIdWithHttpInfo
     *
     * Update ContactPersonal by RefId
     *
     * @param string $ref_id RefId of ContactPersonal (required)
     * @param \DataExchange\SIFUK20\Models\ContactPersonal $body ContactPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactPersonalByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateContactPersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateContactPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/ContactPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateContactPersonals
     *
     * Update multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateContactPersonals($body)
    {
        list($response) = $this->updateContactPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateContactPersonalsWithHttpInfo
     *
     * Update multiple ContactPersonals
     *
     * @param \DataExchange\SIFUK20\Models\ContactPersonals $body ContactPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateContactPersonals');
        }
        // parse inputs
        $resourcePath = "/ContactPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/ContactPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCycleByRefId
     *
     * Update Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateCycleByRefId($ref_id, $body)
    {
        list($response) = $this->updateCycleByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateCycleByRefIdWithHttpInfo
     *
     * Update Cycle by RefId
     *
     * @param string $ref_id RefId of Cycle (required)
     * @param \DataExchange\SIFUK20\Models\Cycle $body Cycle to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCycleByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateCycleByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycleByRefId');
        }
        // parse inputs
        $resourcePath = "/Cycles/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Cycles/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCycles
     *
     * Update multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateCycles($body)
    {
        list($response) = $this->updateCyclesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateCyclesWithHttpInfo
     *
     * Update multiple Cycles
     *
     * @param \DataExchange\SIFUK20\Models\Cycles $body Cycles to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCyclesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCycles');
        }
        // parse inputs
        $resourcePath = "/Cycles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Cycles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateIdentityByRefId
     *
     * Update Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateIdentityByRefId($ref_id, $body)
    {
        list($response) = $this->updateIdentityByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateIdentityByRefIdWithHttpInfo
     *
     * Update Identity by RefId
     *
     * @param string $ref_id RefId of Identity (required)
     * @param \DataExchange\SIFUK20\Models\Identity $body Identity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIdentityByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateIdentityByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateIdentityByRefId');
        }
        // parse inputs
        $resourcePath = "/Identitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Identitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateIdentitys
     *
     * Update multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateIdentitys($body)
    {
        list($response) = $this->updateIdentitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateIdentitysWithHttpInfo
     *
     * Update multiple Identitys
     *
     * @param \DataExchange\SIFUK20\Models\Identitys $body Identitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIdentitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateIdentitys');
        }
        // parse inputs
        $resourcePath = "/Identitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Identitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJunctionByRefId
     *
     * Update Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateJunctionByRefId($ref_id, $body)
    {
        list($response) = $this->updateJunctionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateJunctionByRefIdWithHttpInfo
     *
     * Update Junction by RefId
     *
     * @param string $ref_id RefId of Junction (required)
     * @param \DataExchange\SIFUK20\Models\Junction $body Junction to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateJunctionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctionByRefId');
        }
        // parse inputs
        $resourcePath = "/Junctions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Junctions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJunctions
     *
     * Update multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateJunctions($body)
    {
        list($response) = $this->updateJunctionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateJunctionsWithHttpInfo
     *
     * Update multiple Junctions
     *
     * @param \DataExchange\SIFUK20\Models\Junctions $body Junctions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJunctionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateJunctions');
        }
        // parse inputs
        $resourcePath = "/Junctions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Junctions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLAInfoByRefId
     *
     * Update LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLAInfoByRefId($ref_id, $body)
    {
        list($response) = $this->updateLAInfoByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLAInfoByRefIdWithHttpInfo
     *
     * Update LAInfo by RefId
     *
     * @param string $ref_id RefId of LAInfo (required)
     * @param \DataExchange\SIFUK20\Models\LAInfo $body LAInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLAInfoByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLAInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLAInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/LAInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LAInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLAInfos
     *
     * Update multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLAInfos($body)
    {
        list($response) = $this->updateLAInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLAInfosWithHttpInfo
     *
     * Update multiple LAInfos
     *
     * @param \DataExchange\SIFUK20\Models\LAInfos $body LAInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLAInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLAInfos');
        }
        // parse inputs
        $resourcePath = "/LAInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LAInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefId
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSetByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResponseSet by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResponseSet (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSet $body LearnerAssessmentResponseSet to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSetByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResponseSets
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResponseSets($body)
    {
        list($response) = $this->updateLearnerAssessmentResponseSetsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResponseSetsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResponseSets
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResponseSets $body LearnerAssessmentResponseSets to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResponseSetsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResponseSets');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResponseSets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResponseSets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResultByRefId
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResultByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultByRefIdWithHttpInfo
     *
     * Update LearnerAssessmentResult by RefId
     *
     * @param string $ref_id RefId of LearnerAssessmentResult (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResult $body LearnerAssessmentResult to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAssessmentResultByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResultByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAssessmentResults
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAssessmentResults($body)
    {
        list($response) = $this->updateLearnerAssessmentResultsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAssessmentResultsWithHttpInfo
     *
     * Update multiple LearnerAssessmentResults
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAssessmentResults $body LearnerAssessmentResults to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAssessmentResultsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAssessmentResults');
        }
        // parse inputs
        $resourcePath = "/LearnerAssessmentResults";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAssessmentResults'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceByRefId
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceByRefIdWithHttpInfo
     *
     * Update LearnerAttendance by RefId
     *
     * @param string $ref_id RefId of LearnerAttendance (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendance $body LearnerAttendance to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAttendances/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefId
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummaryByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummaryByRefIdWithHttpInfo
     *
     * Update LearnerAttendanceSummary by RefId
     *
     * @param string $ref_id RefId of LearnerAttendanceSummary (required)
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummary $body LearnerAttendanceSummary to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummaryByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerAttendanceSummaryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummaryByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAttendanceSummarys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendanceSummarys
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendanceSummarys($body)
    {
        list($response) = $this->updateLearnerAttendanceSummarysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendanceSummarysWithHttpInfo
     *
     * Update multiple LearnerAttendanceSummarys
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendanceSummarys $body LearnerAttendanceSummarys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendanceSummarysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendanceSummarys');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendanceSummarys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAttendanceSummarys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerAttendances
     *
     * Update multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerAttendances($body)
    {
        list($response) = $this->updateLearnerAttendancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerAttendancesWithHttpInfo
     *
     * Update multiple LearnerAttendances
     *
     * @param \DataExchange\SIFUK20\Models\LearnerAttendances $body LearnerAttendances to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerAttendancesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerAttendances');
        }
        // parse inputs
        $resourcePath = "/LearnerAttendances";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerAttendances'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefId
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentByRefIdWithHttpInfo
     *
     * Update LearnerBehaviourIncident by RefId
     *
     * @param string $ref_id RefId of LearnerBehaviourIncident (required)
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncident $body LearnerBehaviourIncident to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerBehaviourIncidentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerBehaviourIncidents
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerBehaviourIncidents($body)
    {
        list($response) = $this->updateLearnerBehaviourIncidentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerBehaviourIncidentsWithHttpInfo
     *
     * Update multiple LearnerBehaviourIncidents
     *
     * @param \DataExchange\SIFUK20\Models\LearnerBehaviourIncidents $body LearnerBehaviourIncidents to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerBehaviourIncidentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerBehaviourIncidents');
        }
        // parse inputs
        $resourcePath = "/LearnerBehaviourIncidents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerBehaviourIncidents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerContactByRefId
     *
     * Update LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerContactByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerContactByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerContactByRefIdWithHttpInfo
     *
     * Update LearnerContact by RefId
     *
     * @param string $ref_id RefId of LearnerContact (required)
     * @param \DataExchange\SIFUK20\Models\LearnerContact $body LearnerContact to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerContactByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContactByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerContacts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerContacts
     *
     * Update multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerContacts($body)
    {
        list($response) = $this->updateLearnerContactsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerContactsWithHttpInfo
     *
     * Update multiple LearnerContacts
     *
     * @param \DataExchange\SIFUK20\Models\LearnerContacts $body LearnerContacts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerContactsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerContacts');
        }
        // parse inputs
        $resourcePath = "/LearnerContacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerContacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlementByRefId
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlementByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerEntitlementByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementByRefIdWithHttpInfo
     *
     * Update LearnerEntitlement by RefId
     *
     * @param string $ref_id RefId of LearnerEntitlement (required)
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlement $body LearnerEntitlement to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerEntitlementByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlementByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerEntitlements/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerEntitlements
     *
     * Update multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerEntitlements($body)
    {
        list($response) = $this->updateLearnerEntitlementsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerEntitlementsWithHttpInfo
     *
     * Update multiple LearnerEntitlements
     *
     * @param \DataExchange\SIFUK20\Models\LearnerEntitlements $body LearnerEntitlements to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerEntitlementsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerEntitlements');
        }
        // parse inputs
        $resourcePath = "/LearnerEntitlements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerEntitlements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusionByRefId
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusionByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionByRefIdWithHttpInfo
     *
     * Update LearnerExclusion by RefId
     *
     * @param string $ref_id RefId of LearnerExclusion (required)
     * @param \DataExchange\SIFUK20\Models\LearnerExclusion $body LearnerExclusion to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerExclusionByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusionByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerExclusions/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerExclusions
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerExclusions($body)
    {
        list($response) = $this->updateLearnerExclusionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerExclusionsWithHttpInfo
     *
     * Update multiple LearnerExclusions
     *
     * @param \DataExchange\SIFUK20\Models\LearnerExclusions $body LearnerExclusions to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerExclusionsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerExclusions');
        }
        // parse inputs
        $resourcePath = "/LearnerExclusions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerExclusions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefId
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerGroupEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerGroupEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolment $body LearnerGroupEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerGroupEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerGroupEnrolments
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerGroupEnrolments($body)
    {
        list($response) = $this->updateLearnerGroupEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerGroupEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerGroupEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerGroupEnrolments $body LearnerGroupEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerGroupEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerGroupEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerGroupEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerGroupEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonalByRefId
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonalByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerPersonalByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalByRefIdWithHttpInfo
     *
     * Update LearnerPersonal by RefId
     *
     * @param string $ref_id RefId of LearnerPersonal (required)
     * @param \DataExchange\SIFUK20\Models\LearnerPersonal $body LearnerPersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerPersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerPersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerPersonals
     *
     * Update multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerPersonals($body)
    {
        list($response) = $this->updateLearnerPersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerPersonalsWithHttpInfo
     *
     * Update multiple LearnerPersonals
     *
     * @param \DataExchange\SIFUK20\Models\LearnerPersonals $body LearnerPersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerPersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerPersonals');
        }
        // parse inputs
        $resourcePath = "/LearnerPersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerPersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefId
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentByRefIdWithHttpInfo
     *
     * Update LearnerSchoolEnrolment by RefId
     *
     * @param string $ref_id RefId of LearnerSchoolEnrolment (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolment $body LearnerSchoolEnrolment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolmentByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSchoolEnrolments
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSchoolEnrolments($body)
    {
        list($response) = $this->updateLearnerSchoolEnrolmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerSchoolEnrolmentsWithHttpInfo
     *
     * Update multiple LearnerSchoolEnrolments
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSchoolEnrolments $body LearnerSchoolEnrolments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSchoolEnrolmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSchoolEnrolments');
        }
        // parse inputs
        $resourcePath = "/LearnerSchoolEnrolments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerSchoolEnrolments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefId
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedsByRefId($ref_id, $body)
    {
        list($response) = $this->updateLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedsByRefIdWithHttpInfo
     *
     * Update LearnerSpecialNeeds by RefId
     *
     * @param string $ref_id RefId of LearnerSpecialNeeds (required)
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeeds $body LearnerSpecialNeeds to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedsByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLearnerSpecialNeedsByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedsByRefId');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerSpecialNeedss/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLearnerSpecialNeedss
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLearnerSpecialNeedss($body)
    {
        list($response) = $this->updateLearnerSpecialNeedssWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLearnerSpecialNeedssWithHttpInfo
     *
     * Update multiple LearnerSpecialNeedss
     *
     * @param \DataExchange\SIFUK20\Models\LearnerSpecialNeedss $body LearnerSpecialNeedss to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLearnerSpecialNeedssWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLearnerSpecialNeedss');
        }
        // parse inputs
        $resourcePath = "/LearnerSpecialNeedss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/LearnerSpecialNeedss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLessonByRefId
     *
     * Update Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLessonByRefId($ref_id, $body)
    {
        list($response) = $this->updateLessonByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateLessonByRefIdWithHttpInfo
     *
     * Update Lesson by RefId
     *
     * @param string $ref_id RefId of Lesson (required)
     * @param \DataExchange\SIFUK20\Models\Lesson $body Lesson to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateLessonByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessonByRefId');
        }
        // parse inputs
        $resourcePath = "/Lessons/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Lessons/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLessons
     *
     * Update multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateLessons($body)
    {
        list($response) = $this->updateLessonsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateLessonsWithHttpInfo
     *
     * Update multiple Lessons
     *
     * @param \DataExchange\SIFUK20\Models\Lessons $body Lessons to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLessonsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLessons');
        }
        // parse inputs
        $resourcePath = "/Lessons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Lessons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivityByRefId
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivityByRefId($ref_id, $body)
    {
        list($response) = $this->updateNonTeachingActivityByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivityByRefIdWithHttpInfo
     *
     * Update NonTeachingActivity by RefId
     *
     * @param string $ref_id RefId of NonTeachingActivity (required)
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivity $body NonTeachingActivity to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivityByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateNonTeachingActivityByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivityByRefId');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/NonTeachingActivitys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNonTeachingActivitys
     *
     * Update multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateNonTeachingActivitys($body)
    {
        list($response) = $this->updateNonTeachingActivitysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateNonTeachingActivitysWithHttpInfo
     *
     * Update multiple NonTeachingActivitys
     *
     * @param \DataExchange\SIFUK20\Models\NonTeachingActivitys $body NonTeachingActivitys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNonTeachingActivitysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNonTeachingActivitys');
        }
        // parse inputs
        $resourcePath = "/NonTeachingActivitys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/NonTeachingActivitys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefId
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferenceByRefId($ref_id, $body)
    {
        list($response) = $this->updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferenceByRefIdWithHttpInfo
     *
     * Update PersonDietaryPreference by RefId
     *
     * @param string $ref_id RefId of PersonDietaryPreference (required)
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreference $body PersonDietaryPreference to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferenceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updatePersonDietaryPreferenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferenceByRefId');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonDietaryPreferences
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonDietaryPreferences($body)
    {
        list($response) = $this->updatePersonDietaryPreferencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updatePersonDietaryPreferencesWithHttpInfo
     *
     * Update multiple PersonDietaryPreferences
     *
     * @param \DataExchange\SIFUK20\Models\PersonDietaryPreferences $body PersonDietaryPreferences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonDietaryPreferencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonDietaryPreferences');
        }
        // parse inputs
        $resourcePath = "/PersonDietaryPreferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/PersonDietaryPreferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePersonPictures
     *
     * Update multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updatePersonPictures($body)
    {
        list($response) = $this->updatePersonPicturesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updatePersonPicturesWithHttpInfo
     *
     * Update multiple PersonPictures
     *
     * @param \DataExchange\SIFUK20\Models\PersonPictures $body PersonPictures to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonPicturesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePersonPictures');
        }
        // parse inputs
        $resourcePath = "/PersonPictures";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/PersonPictures'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntryByRefId
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntryByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolDiaryEntryByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntryByRefIdWithHttpInfo
     *
     * Update SchoolDiaryEntry by RefId
     *
     * @param string $ref_id RefId of SchoolDiaryEntry (required)
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntry $body SchoolDiaryEntry to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntryByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolDiaryEntryByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntryByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolDiaryEntrys/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolDiaryEntrys
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolDiaryEntrys($body)
    {
        list($response) = $this->updateSchoolDiaryEntrysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolDiaryEntrysWithHttpInfo
     *
     * Update multiple SchoolDiaryEntrys
     *
     * @param \DataExchange\SIFUK20\Models\SchoolDiaryEntrys $body SchoolDiaryEntrys to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolDiaryEntrysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolDiaryEntrys');
        }
        // parse inputs
        $resourcePath = "/SchoolDiaryEntrys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolDiaryEntrys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupByRefId
     *
     * Update SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupByRefIdWithHttpInfo
     *
     * Update SchoolGroup by RefId
     *
     * @param string $ref_id RefId of SchoolGroup (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroup $body SchoolGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypeByRefId
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypeByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolGroupTypeByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypeByRefIdWithHttpInfo
     *
     * Update SchoolGroupType by RefId
     *
     * @param string $ref_id RefId of SchoolGroupType (required)
     * @param \DataExchange\SIFUK20\Models\SchoolGroupType $body SchoolGroupType to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypeByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolGroupTypeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypeByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolGroupTypes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroupTypes
     *
     * Update multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroupTypes($body)
    {
        list($response) = $this->updateSchoolGroupTypesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupTypesWithHttpInfo
     *
     * Update multiple SchoolGroupTypes
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroupTypes $body SchoolGroupTypes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupTypesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroupTypes');
        }
        // parse inputs
        $resourcePath = "/SchoolGroupTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolGroupTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolGroups
     *
     * Update multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolGroups($body)
    {
        list($response) = $this->updateSchoolGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolGroupsWithHttpInfo
     *
     * Update multiple SchoolGroups
     *
     * @param \DataExchange\SIFUK20\Models\SchoolGroups $body SchoolGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolGroups');
        }
        // parse inputs
        $resourcePath = "/SchoolGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolInfoByRefId
     *
     * Update SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolInfoByRefId($ref_id, $body)
    {
        list($response) = $this->updateSchoolInfoByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateSchoolInfoByRefIdWithHttpInfo
     *
     * Update SchoolInfo by RefId
     *
     * @param string $ref_id RefId of SchoolInfo (required)
     * @param \DataExchange\SIFUK20\Models\SchoolInfo $body SchoolInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolInfoByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateSchoolInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSchoolInfos
     *
     * Update multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateSchoolInfos($body)
    {
        list($response) = $this->updateSchoolInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSchoolInfosWithHttpInfo
     *
     * Update multiple SchoolInfos
     *
     * @param \DataExchange\SIFUK20\Models\SchoolInfos $body SchoolInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSchoolInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSchoolInfos');
        }
        // parse inputs
        $resourcePath = "/SchoolInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/SchoolInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateScopeByRefId
     *
     * Update Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateScopeByRefId($ref_id, $body)
    {
        list($response) = $this->updateScopeByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateScopeByRefIdWithHttpInfo
     *
     * Update Scope by RefId
     *
     * @param string $ref_id RefId of Scope (required)
     * @param \DataExchange\SIFUK20\Models\Scope $body Scope to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopeByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateScopeByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopeByRefId');
        }
        // parse inputs
        $resourcePath = "/Scopes/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Scopes/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateScopes
     *
     * Update multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateScopes($body)
    {
        list($response) = $this->updateScopesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateScopesWithHttpInfo
     *
     * Update multiple Scopes
     *
     * @param \DataExchange\SIFUK20\Models\Scopes $body Scopes to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScopesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateScopes');
        }
        // parse inputs
        $resourcePath = "/Scopes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/Scopes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTRoomByRefId
     *
     * Update TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTRoomByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTRoomByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTRoomByRefIdWithHttpInfo
     *
     * Update TTRoom by RefId
     *
     * @param string $ref_id RefId of TTRoom (required)
     * @param \DataExchange\SIFUK20\Models\TTRoom $body TTRoom to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTRoomByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRoomByRefId');
        }
        // parse inputs
        $resourcePath = "/TTRooms/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTRooms/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTRooms
     *
     * Update multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTRooms($body)
    {
        list($response) = $this->updateTTRoomsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTRoomsWithHttpInfo
     *
     * Update multiple TTRooms
     *
     * @param \DataExchange\SIFUK20\Models\TTRooms $body TTRooms to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTRoomsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTRooms');
        }
        // parse inputs
        $resourcePath = "/TTRooms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTRooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSiteByRefId
     *
     * Update TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSiteByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSiteByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSiteByRefIdWithHttpInfo
     *
     * Update TTSite by RefId
     *
     * @param string $ref_id RefId of TTSite (required)
     * @param \DataExchange\SIFUK20\Models\TTSite $body TTSite to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSiteByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSiteByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSiteByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSites/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSites/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSites
     *
     * Update multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSites($body)
    {
        list($response) = $this->updateTTSitesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSitesWithHttpInfo
     *
     * Update multiple TTSites
     *
     * @param \DataExchange\SIFUK20\Models\TTSites $body TTSites to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSitesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSites');
        }
        // parse inputs
        $resourcePath = "/TTSites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjectByRefId
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjectByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTSubjectByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTSubjectByRefIdWithHttpInfo
     *
     * Update TTSubject by RefId
     *
     * @param string $ref_id RefId of TTSubject (required)
     * @param \DataExchange\SIFUK20\Models\TTSubject $body TTSubject to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTSubjectByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjectByRefId');
        }
        // parse inputs
        $resourcePath = "/TTSubjects/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSubjects/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTSubjects
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTSubjects($body)
    {
        list($response) = $this->updateTTSubjectsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTSubjectsWithHttpInfo
     *
     * Update multiple TTSubjects
     *
     * @param \DataExchange\SIFUK20\Models\TTSubjects $body TTSubjects to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTSubjectsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTSubjects');
        }
        // parse inputs
        $resourcePath = "/TTSubjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTSubjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeacherByRefId
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeacherByRefId($ref_id, $body)
    {
        list($response) = $this->updateTTTeacherByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTTTeacherByRefIdWithHttpInfo
     *
     * Update TTTeacher by RefId
     *
     * @param string $ref_id RefId of TTTeacher (required)
     * @param \DataExchange\SIFUK20\Models\TTTeacher $body TTTeacher to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeacherByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTTTeacherByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeacherByRefId');
        }
        // parse inputs
        $resourcePath = "/TTTeachers/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTTeachers/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTTTeachers
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTTTeachers($body)
    {
        list($response) = $this->updateTTTeachersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTTTeachersWithHttpInfo
     *
     * Update multiple TTTeachers
     *
     * @param \DataExchange\SIFUK20\Models\TTTeachers $body TTTeachers to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTTTeachersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTTTeachers');
        }
        // parse inputs
        $resourcePath = "/TTTeachers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TTTeachers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroupByRefId
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTeachingGroupByRefId($ref_id, $body)
    {
        list($response) = $this->updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupByRefIdWithHttpInfo
     *
     * Update TeachingGroup by RefId
     *
     * @param string $ref_id RefId of TeachingGroup (required)
     * @param \DataExchange\SIFUK20\Models\TeachingGroup $body TeachingGroup to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTeachingGroupByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroupByRefId');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TeachingGroups/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTeachingGroups
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTeachingGroups($body)
    {
        list($response) = $this->updateTeachingGroupsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTeachingGroupsWithHttpInfo
     *
     * Update multiple TeachingGroups
     *
     * @param \DataExchange\SIFUK20\Models\TeachingGroups $body TeachingGroups to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTeachingGroupsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTeachingGroups');
        }
        // parse inputs
        $resourcePath = "/TeachingGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TeachingGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTermInfoByRefId
     *
     * Update TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTermInfoByRefId($ref_id, $body)
    {
        list($response) = $this->updateTermInfoByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateTermInfoByRefIdWithHttpInfo
     *
     * Update TermInfo by RefId
     *
     * @param string $ref_id RefId of TermInfo (required)
     * @param \DataExchange\SIFUK20\Models\TermInfo $body TermInfo to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfoByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateTermInfoByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfoByRefId');
        }
        // parse inputs
        $resourcePath = "/TermInfos/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TermInfos/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTermInfos
     *
     * Update multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateTermInfos($body)
    {
        list($response) = $this->updateTermInfosWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateTermInfosWithHttpInfo
     *
     * Update multiple TermInfos
     *
     * @param \DataExchange\SIFUK20\Models\TermInfos $body TermInfos to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermInfosWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateTermInfos');
        }
        // parse inputs
        $resourcePath = "/TermInfos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/TermInfos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsenceByRefId
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsenceByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceAbsenceByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsenceByRefIdWithHttpInfo
     *
     * Update WorkforceAbsence by RefId
     *
     * @param string $ref_id RefId of WorkforceAbsence (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsence $body WorkforceAbsence to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsenceByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAbsenceByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsenceByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAbsences/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAbsences
     *
     * Update multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAbsences($body)
    {
        list($response) = $this->updateWorkforceAbsencesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceAbsencesWithHttpInfo
     *
     * Update multiple WorkforceAbsences
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAbsences $body WorkforceAbsences to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAbsencesWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAbsences');
        }
        // parse inputs
        $resourcePath = "/WorkforceAbsences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAbsences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignmentByRefId
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignmentByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceAssignmentByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentByRefIdWithHttpInfo
     *
     * Update WorkforceAssignment by RefId
     *
     * @param string $ref_id RefId of WorkforceAssignment (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignment $body WorkforceAssignment to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceAssignmentByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignmentByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAssignments/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceAssignments
     *
     * Update multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceAssignments($body)
    {
        list($response) = $this->updateWorkforceAssignmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceAssignmentsWithHttpInfo
     *
     * Update multiple WorkforceAssignments
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceAssignments $body WorkforceAssignments to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceAssignmentsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceAssignments');
        }
        // parse inputs
        $resourcePath = "/WorkforceAssignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceAssignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContractByRefId
     *
     * Update WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContractByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforceContractByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractByRefIdWithHttpInfo
     *
     * Update WorkforceContract by RefId
     *
     * @param string $ref_id RefId of WorkforceContract (required)
     * @param \DataExchange\SIFUK20\Models\WorkforceContract $body WorkforceContract to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforceContractByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContractByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceContracts/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforceContracts
     *
     * Update multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforceContracts($body)
    {
        list($response) = $this->updateWorkforceContractsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforceContractsWithHttpInfo
     *
     * Update multiple WorkforceContracts
     *
     * @param \DataExchange\SIFUK20\Models\WorkforceContracts $body WorkforceContracts to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforceContractsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforceContracts');
        }
        // parse inputs
        $resourcePath = "/WorkforceContracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforceContracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonalByRefId
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonalByRefId($ref_id, $body)
    {
        list($response) = $this->updateWorkforcePersonalByRefIdWithHttpInfo($ref_id, $body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalByRefIdWithHttpInfo
     *
     * Update WorkforcePersonal by RefId
     *
     * @param string $ref_id RefId of WorkforcePersonal (required)
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonal $body WorkforcePersonal to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalByRefIdWithHttpInfo($ref_id, $body)
    {
        // verify the required parameter 'ref_id' is set
        if ($ref_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ref_id when calling updateWorkforcePersonalByRefId');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonalByRefId');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals/{RefId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // path params
        if ($ref_id !== null) {
            $resourcePath = str_replace(
                "{" . "RefId" . "}",
                $this->apiClient->getSerializer()->toPathValue($ref_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforcePersonals/{RefId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkforcePersonals
     *
     * Update multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return \DataExchange\SIFUK20\Models\SifUpdateResponse
     */
    public function updateWorkforcePersonals($body)
    {
        list($response) = $this->updateWorkforcePersonalsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWorkforcePersonalsWithHttpInfo
     *
     * Update multiple WorkforcePersonals
     *
     * @param \DataExchange\SIFUK20\Models\WorkforcePersonals $body WorkforcePersonals to be updated (required)
     * @throws \DataExchange\SIFUK20\ApiException on non-2xx response
     * @return array of \DataExchange\SIFUK20\Models\SifUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkforcePersonalsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateWorkforcePersonals');
        }
        // parse inputs
        $resourcePath = "/WorkforcePersonals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataExchange\SIFUK20\Models\SifUpdateResponse',
                '/WorkforcePersonals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataExchange\SIFUK20\Models\SifUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataExchange\SIFUK20\Models\SifError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
