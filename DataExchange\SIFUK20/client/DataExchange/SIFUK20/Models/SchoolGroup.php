<?php
/**
 * SchoolGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@dataexchange.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * SchoolGroup Class Doc Comment
 *
 * @category    Class */
 // @description This object describes a specific group and includes resource and time tabling information. All groups are based upon a SchoolGroupType record. However, there are courses which are not based upon any subject area and likewise may not have any teachers or other staff assigned. Compare with US/Canada object:
/**
 * @package     
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SchoolGroup implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SchoolGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'school_group_type_ref_id' => 'string',
        'school_year' => 'string',
        'local_id' => 'string',
        'group_name' => 'string',
        'description' => 'string',
        'parent_school_group_ref_id' => 'string',
        'schedule_info_list' => '\DataExchange\SIFUK20\Models\ScheduleInfo[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'school_group_type_ref_id' => '@SchoolGroupTypeRefId',
        'school_year' => '@SchoolYear',
        'local_id' => 'LocalId',
        'group_name' => 'GroupName',
        'description' => 'Description',
        'parent_school_group_ref_id' => 'ParentSchoolGroupRefId',
        'schedule_info_list' => 'ScheduleInfoList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'school_group_type_ref_id' => 'setSchoolGroupTypeRefId',
        'school_year' => 'setSchoolYear',
        'local_id' => 'setLocalId',
        'group_name' => 'setGroupName',
        'description' => 'setDescription',
        'parent_school_group_ref_id' => 'setParentSchoolGroupRefId',
        'schedule_info_list' => 'setScheduleInfoList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'school_group_type_ref_id' => 'getSchoolGroupTypeRefId',
        'school_year' => 'getSchoolYear',
        'local_id' => 'getLocalId',
        'group_name' => 'getGroupName',
        'description' => 'getDescription',
        'parent_school_group_ref_id' => 'getParentSchoolGroupRefId',
        'schedule_info_list' => 'getScheduleInfoList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['school_group_type_ref_id'] = isset($data['school_group_type_ref_id']) ? $data['school_group_type_ref_id'] : null;
        $this->container['school_year'] = isset($data['school_year']) ? $data['school_year'] : null;
        $this->container['local_id'] = isset($data['local_id']) ? $data['local_id'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['parent_school_group_ref_id'] = isset($data['parent_school_group_ref_id']) ? $data['parent_school_group_ref_id'] : null;
        $this->container['schedule_info_list'] = isset($data['schedule_info_list']) ? $data['schedule_info_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['school_group_type_ref_id'] === null) {
            $invalid_properties[] = "'school_group_type_ref_id' can't be null";
        }
        if ($this->container['school_year'] === null) {
            $invalid_properties[] = "'school_year' can't be null";
        }
        if ($this->container['local_id'] === null) {
            $invalid_properties[] = "'local_id' can't be null";
        }
        if ($this->container['group_name'] === null) {
            $invalid_properties[] = "'group_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['school_group_type_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_year'] === null) {
            return false;
        }
        if ($this->container['local_id'] === null) {
            return false;
        }
        if ($this->container['group_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) that uniquely identifies this group entity.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets school_group_type_ref_id
     * @return string
     */
    public function getSchoolGroupTypeRefId()
    {
        return $this->container['school_group_type_ref_id'];
    }

    /**
     * Sets school_group_type_ref_id
     * @param string $school_group_type_ref_id The ID (GUID) that identifies a course upon which this group is centered. Note that this element is mandatory when GroupType is associated with a course (teaching group).
     * @return $this
     */
    public function setSchoolGroupTypeRefId($school_group_type_ref_id)
    {
        $this->container['school_group_type_ref_id'] = $school_group_type_ref_id;

        return $this;
    }

    /**
     * Gets school_year
     * @return string
     */
    public function getSchoolYear()
    {
        return $this->container['school_year'];
    }

    /**
     * Sets school_year
     * @param string $school_year School year for which the group is applicable, expressed as the four-digit year in which the school year ends (e.g. 2007 for the 2006/07 school year). Where a group membership is valid across multiple years, the current year at the time of publication will be used.
     * @return $this
     */
    public function setSchoolYear($school_year)
    {
        $this->container['school_year'] = $school_year;

        return $this;
    }

    /**
     * Gets local_id
     * @return string
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     * @param string $local_id
     * @return $this
     */
    public function setLocalId($local_id)
    {
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets group_name
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     * @param string $group_name The name associated with this group for display purposes.
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description A textual description.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parent_school_group_ref_id
     * @return string
     */
    public function getParentSchoolGroupRefId()
    {
        return $this->container['parent_school_group_ref_id'];
    }

    /**
     * Sets parent_school_group_ref_id
     * @param string $parent_school_group_ref_id The parent group associated with this group, if any.
     * @return $this
     */
    public function setParentSchoolGroupRefId($parent_school_group_ref_id)
    {
        $this->container['parent_school_group_ref_id'] = $parent_school_group_ref_id;

        return $this;
    }

    /**
     * Gets schedule_info_list
     * @return \DataExchange\SIFUK20\Models\ScheduleInfo[]
     */
    public function getScheduleInfoList()
    {
        return $this->container['schedule_info_list'];
    }

    /**
     * Sets schedule_info_list
     * @param \DataExchange\SIFUK20\Models\ScheduleInfo[] $schedule_info_list
     * @return $this
     */
    public function setScheduleInfoList($schedule_info_list)
    {
        $this->container['schedule_info_list'] = $schedule_info_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\\ObjectSerializer::sanitizeForSerialization($this));
    }
}
