<?php
/**
 * Identity
 *
 * PHP version 5
 *
 * @category Class
 * @package  
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@dataexchange.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * Identity Class Doc Comment
 *
 * @category    Class */
 // @description This object allows a system that stores network identities and/or passwords to share them with other applications through SIF. The provider of the Identity object may only support providing an identity or a password, or it may support both.
/**
 * @package     
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Identity implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Identity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'sif_ref_id' => '\DataExchange\SIFUK20\Models\SIFRefId',
        'main_role' => 'string',
        'authentication_source' => 'string',
        'identity_assertions' => '\DataExchange\SIFUK20\Models\IdentityAssertions',
        'password_list' => '\DataExchange\SIFUK20\Models\Password[]',
        'authentication_source_global_uid' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'sif_ref_id' => 'SIF_RefId',
        'main_role' => 'MainRole',
        'authentication_source' => 'AuthenticationSource',
        'identity_assertions' => 'IdentityAssertions',
        'password_list' => 'PasswordList',
        'authentication_source_global_uid' => 'AuthenticationSourceGlobalUID'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'sif_ref_id' => 'setSifRefId',
        'main_role' => 'setMainRole',
        'authentication_source' => 'setAuthenticationSource',
        'identity_assertions' => 'setIdentityAssertions',
        'password_list' => 'setPasswordList',
        'authentication_source_global_uid' => 'setAuthenticationSourceGlobalUid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'sif_ref_id' => 'getSifRefId',
        'main_role' => 'getMainRole',
        'authentication_source' => 'getAuthenticationSource',
        'identity_assertions' => 'getIdentityAssertions',
        'password_list' => 'getPasswordList',
        'authentication_source_global_uid' => 'getAuthenticationSourceGlobalUid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['sif_ref_id'] = isset($data['sif_ref_id']) ? $data['sif_ref_id'] : null;
        $this->container['main_role'] = isset($data['main_role']) ? $data['main_role'] : null;
        $this->container['authentication_source'] = isset($data['authentication_source']) ? $data['authentication_source'] : null;
        $this->container['identity_assertions'] = isset($data['identity_assertions']) ? $data['identity_assertions'] : null;
        $this->container['password_list'] = isset($data['password_list']) ? $data['password_list'] : null;
        $this->container['authentication_source_global_uid'] = isset($data['authentication_source_global_uid']) ? $data['authentication_source_global_uid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['authentication_source'] === null) {
            $invalid_properties[] = "'authentication_source' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['authentication_source'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The SIF RefId that uniquely identifies this object.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets sif_ref_id
     * @return \DataExchange\SIFUK20\Models\SIFRefId
     */
    public function getSifRefId()
    {
        return $this->container['sif_ref_id'];
    }

    /**
     * Sets sif_ref_id
     * @param \DataExchange\SIFUK20\Models\SIFRefId $sif_ref_id
     * @return $this
     */
    public function setSifRefId($sif_ref_id)
    {
        $this->container['sif_ref_id'] = $sif_ref_id;

        return $this;
    }

    /**
     * Gets main_role
     * @return string
     */
    public function getMainRole()
    {
        return $this->container['main_role'];
    }

    /**
     * Sets main_role
     * @param string $main_role Indicates whether or not the Person that this object refers to is the main role for this Identity.
     * @return $this
     */
    public function setMainRole($main_role)
    {
        $this->container['main_role'] = $main_role;

        return $this;
    }

    /**
     * Gets authentication_source
     * @return string
     */
    public function getAuthenticationSource()
    {
        return $this->container['authentication_source'];
    }

    /**
     * Sets authentication_source
     * @param string $authentication_source The type of source system that produced this Identityobject.
     * @return $this
     */
    public function setAuthenticationSource($authentication_source)
    {
        $this->container['authentication_source'] = $authentication_source;

        return $this;
    }

    /**
     * Gets identity_assertions
     * @return \DataExchange\SIFUK20\Models\IdentityAssertions
     */
    public function getIdentityAssertions()
    {
        return $this->container['identity_assertions'];
    }

    /**
     * Sets identity_assertions
     * @param \DataExchange\SIFUK20\Models\IdentityAssertions $identity_assertions
     * @return $this
     */
    public function setIdentityAssertions($identity_assertions)
    {
        $this->container['identity_assertions'] = $identity_assertions;

        return $this;
    }

    /**
     * Gets password_list
     * @return \DataExchange\SIFUK20\Models\Password[]
     */
    public function getPasswordList()
    {
        return $this->container['password_list'];
    }

    /**
     * Sets password_list
     * @param \DataExchange\SIFUK20\Models\Password[] $password_list
     * @return $this
     */
    public function setPasswordList($password_list)
    {
        $this->container['password_list'] = $password_list;

        return $this;
    }

    /**
     * Gets authentication_source_global_uid
     * @return string
     */
    public function getAuthenticationSourceGlobalUid()
    {
        return $this->container['authentication_source_global_uid'];
    }

    /**
     * Sets authentication_source_global_uid
     * @param string $authentication_source_global_uid The globally unique identifier that links together separate Identity objects which reference the same Person.
     * @return $this
     */
    public function setAuthenticationSourceGlobalUid($authentication_source_global_uid)
    {
        $this->container['authentication_source_global_uid'] = $authentication_source_global_uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\\ObjectSerializer::sanitizeForSerialization($this));
    }
}
