<?php
/**
 * LearnerAttendanceSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIF (UK), v.2.0
 *
 * DataExchange for the SIF (UK), v.2.0 data model
 *
 * OpenAPI spec version: 1.0
 * Contact: support@dataexchange.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataExchange\SIFUK20\Models;

use \ArrayAccess;

/**
 * LearnerAttendanceSummary Class Doc Comment
 *
 * @category    Class */
 // @description This object provides a summary of a learner&amp;#039;s daily attendance and membership information for a given school during the time period between the StartDate and EndDate, inclusive. As such, there may be multiple instances of this object for a learner in a school over the course of an academic school year. Note that sessions are defined by each school and in most cases is two but can be any number in the range 1-10. Compare with US/Canada object:
/**
 * @package     
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnerAttendanceSummary implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnerAttendanceSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_id' => 'string',
        'learner_personal_ref_id' => 'string',
        'school_info_ref_id' => 'string',
        'school_year' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'reasons_list' => '\DataExchange\SIFUK20\Models\Reason[]',
        'sessions_attended_total' => 'int',
        'sessions_possible' => 'int',
        'authorised_absences' => 'int',
        'unauthorised_absences' => 'int',
        'alternative_tuition_hours' => 'string',
        'dfe_statutory_session_attendance_string' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => '@RefId',
        'learner_personal_ref_id' => '@LearnerPersonalRefId',
        'school_info_ref_id' => '@SchoolInfoRefId',
        'school_year' => 'SchoolYear',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'reasons_list' => 'ReasonsList',
        'sessions_attended_total' => 'SessionsAttendedTotal',
        'sessions_possible' => 'SessionsPossible',
        'authorised_absences' => 'AuthorisedAbsences',
        'unauthorised_absences' => 'UnauthorisedAbsences',
        'alternative_tuition_hours' => 'AlternativeTuitionHours',
        'dfe_statutory_session_attendance_string' => 'DfeStatutorySessionAttendanceString'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'learner_personal_ref_id' => 'setLearnerPersonalRefId',
        'school_info_ref_id' => 'setSchoolInfoRefId',
        'school_year' => 'setSchoolYear',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'reasons_list' => 'setReasonsList',
        'sessions_attended_total' => 'setSessionsAttendedTotal',
        'sessions_possible' => 'setSessionsPossible',
        'authorised_absences' => 'setAuthorisedAbsences',
        'unauthorised_absences' => 'setUnauthorisedAbsences',
        'alternative_tuition_hours' => 'setAlternativeTuitionHours',
        'dfe_statutory_session_attendance_string' => 'setDfeStatutorySessionAttendanceString'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'learner_personal_ref_id' => 'getLearnerPersonalRefId',
        'school_info_ref_id' => 'getSchoolInfoRefId',
        'school_year' => 'getSchoolYear',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'reasons_list' => 'getReasonsList',
        'sessions_attended_total' => 'getSessionsAttendedTotal',
        'sessions_possible' => 'getSessionsPossible',
        'authorised_absences' => 'getAuthorisedAbsences',
        'unauthorised_absences' => 'getUnauthorisedAbsences',
        'alternative_tuition_hours' => 'getAlternativeTuitionHours',
        'dfe_statutory_session_attendance_string' => 'getDfeStatutorySessionAttendanceString'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['learner_personal_ref_id'] = isset($data['learner_personal_ref_id']) ? $data['learner_personal_ref_id'] : null;
        $this->container['school_info_ref_id'] = isset($data['school_info_ref_id']) ? $data['school_info_ref_id'] : null;
        $this->container['school_year'] = isset($data['school_year']) ? $data['school_year'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['reasons_list'] = isset($data['reasons_list']) ? $data['reasons_list'] : null;
        $this->container['sessions_attended_total'] = isset($data['sessions_attended_total']) ? $data['sessions_attended_total'] : null;
        $this->container['sessions_possible'] = isset($data['sessions_possible']) ? $data['sessions_possible'] : null;
        $this->container['authorised_absences'] = isset($data['authorised_absences']) ? $data['authorised_absences'] : null;
        $this->container['unauthorised_absences'] = isset($data['unauthorised_absences']) ? $data['unauthorised_absences'] : null;
        $this->container['alternative_tuition_hours'] = isset($data['alternative_tuition_hours']) ? $data['alternative_tuition_hours'] : null;
        $this->container['dfe_statutory_session_attendance_string'] = isset($data['dfe_statutory_session_attendance_string']) ? $data['dfe_statutory_session_attendance_string'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            $invalid_properties[] = "'learner_personal_ref_id' can't be null";
        }
        if ($this->container['school_info_ref_id'] === null) {
            $invalid_properties[] = "'school_info_ref_id' can't be null";
        }
        if ($this->container['school_year'] === null) {
            $invalid_properties[] = "'school_year' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        if ($this->container['reasons_list'] === null) {
            $invalid_properties[] = "'reasons_list' can't be null";
        }
        if ($this->container['sessions_attended_total'] === null) {
            $invalid_properties[] = "'sessions_attended_total' can't be null";
        }
        if ($this->container['sessions_possible'] === null) {
            $invalid_properties[] = "'sessions_possible' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['learner_personal_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_info_ref_id'] === null) {
            return false;
        }
        if ($this->container['school_year'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        if ($this->container['reasons_list'] === null) {
            return false;
        }
        if ($this->container['sessions_attended_total'] === null) {
            return false;
        }
        if ($this->container['sessions_possible'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The ID (GUID) assigned to uniquely identify this attendance record.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets learner_personal_ref_id
     * @return string
     */
    public function getLearnerPersonalRefId()
    {
        return $this->container['learner_personal_ref_id'];
    }

    /**
     * Sets learner_personal_ref_id
     * @param string $learner_personal_ref_id The ID (GUID) of the learner for whom this attendance information is being reported.
     * @return $this
     */
    public function setLearnerPersonalRefId($learner_personal_ref_id)
    {
        $this->container['learner_personal_ref_id'] = $learner_personal_ref_id;

        return $this;
    }

    /**
     * Gets school_info_ref_id
     * @return string
     */
    public function getSchoolInfoRefId()
    {
        return $this->container['school_info_ref_id'];
    }

    /**
     * Sets school_info_ref_id
     * @param string $school_info_ref_id The ID (GUID) of the school for which this attendance information is being reported.
     * @return $this
     */
    public function setSchoolInfoRefId($school_info_ref_id)
    {
        $this->container['school_info_ref_id'] = $school_info_ref_id;

        return $this;
    }

    /**
     * Gets school_year
     * @return string
     */
    public function getSchoolYear()
    {
        return $this->container['school_year'];
    }

    /**
     * Sets school_year
     * @param string $school_year
     * @return $this
     */
    public function setSchoolYear($school_year)
    {
        $this->container['school_year'] = $school_year;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Starting date of this attendance reporting period.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Ending date of this attendance reporting period.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets reasons_list
     * @return \DataExchange\SIFUK20\Models\Reason[]
     */
    public function getReasonsList()
    {
        return $this->container['reasons_list'];
    }

    /**
     * Sets reasons_list
     * @param \DataExchange\SIFUK20\Models\Reason[] $reasons_list
     * @return $this
     */
    public function setReasonsList($reasons_list)
    {
        $this->container['reasons_list'] = $reasons_list;

        return $this;
    }

    /**
     * Gets sessions_attended_total
     * @return int
     */
    public function getSessionsAttendedTotal()
    {
        return $this->container['sessions_attended_total'];
    }

    /**
     * Sets sessions_attended_total
     * @param int $sessions_attended_total The number of sessions the learner attended school when school was in session between the StartDate and EndDate, inclusive.
     * @return $this
     */
    public function setSessionsAttendedTotal($sessions_attended_total)
    {
        $this->container['sessions_attended_total'] = $sessions_attended_total;

        return $this;
    }

    /**
     * Gets sessions_possible
     * @return int
     */
    public function getSessionsPossible()
    {
        return $this->container['sessions_possible'];
    }

    /**
     * Sets sessions_possible
     * @param int $sessions_possible The number of sessions the learner was present plus the number of sessions the learner was absent (authorised and unauthorised) when school was in session during the period between the StartDate and EndDate, inclusive.
     * @return $this
     */
    public function setSessionsPossible($sessions_possible)
    {
        $this->container['sessions_possible'] = $sessions_possible;

        return $this;
    }

    /**
     * Gets authorised_absences
     * @return int
     */
    public function getAuthorisedAbsences()
    {
        return $this->container['authorised_absences'];
    }

    /**
     * Sets authorised_absences
     * @param int $authorised_absences The number of sessions the learner was absent from school with a valid excuse when school was in session between the StartDate and EndDate, inclusive. Note that ts column can be derived from Reason Status.
     * @return $this
     */
    public function setAuthorisedAbsences($authorised_absences)
    {
        $this->container['authorised_absences'] = $authorised_absences;

        return $this;
    }

    /**
     * Gets unauthorised_absences
     * @return int
     */
    public function getUnauthorisedAbsences()
    {
        return $this->container['unauthorised_absences'];
    }

    /**
     * Sets unauthorised_absences
     * @param int $unauthorised_absences The number of sessions the learner was absent from school without a valid excuse when school was in session between the StartDate and EndDate, inclusive. Note that this column can be derived from Reason Status.
     * @return $this
     */
    public function setUnauthorisedAbsences($unauthorised_absences)
    {
        $this->container['unauthorised_absences'] = $unauthorised_absences;

        return $this;
    }

    /**
     * Gets alternative_tuition_hours
     * @return string
     */
    public function getAlternativeTuitionHours()
    {
        return $this->container['alternative_tuition_hours'];
    }

    /**
     * Sets alternative_tuition_hours
     * @param string $alternative_tuition_hours Number of Alternative Tuition (whole) hours attended between the StartDate and EndDate, inclusive.
     * @return $this
     */
    public function setAlternativeTuitionHours($alternative_tuition_hours)
    {
        $this->container['alternative_tuition_hours'] = $alternative_tuition_hours;

        return $this;
    }

    /**
     * Gets dfe_statutory_session_attendance_string
     * @return string
     */
    public function getDfeStatutorySessionAttendanceString()
    {
        return $this->container['dfe_statutory_session_attendance_string'];
    }

    /**
     * Sets dfe_statutory_session_attendance_string
     * @param string $dfe_statutory_session_attendance_string Learner morning and afternoon session registration marks as per DfE statutory definition. This data item is a concatenation of all DfE statutory session attendance codes recorded for the given Learner starting on the morning session of the StartDate this object refers to and ending on the afternoon session of EndDate.
     * @return $this
     */
    public function setDfeStatutorySessionAttendanceString($dfe_statutory_session_attendance_string)
    {
        $this->container['dfe_statutory_session_attendance_string'] = $dfe_statutory_session_attendance_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\\ObjectSerializer::sanitizeForSerialization($this));
    }
}
